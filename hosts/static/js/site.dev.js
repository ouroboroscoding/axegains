/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./webpack/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./webpack/3rd/jquery.ajax.js":
/*!************************************!*\
  !*** ./webpack/3rd/jquery.ajax.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! jQuery v2.1.1 -css,-css/addGetHookIf,-css/curCSS,-css/defaultDisplay,-css/hiddenVisibleSelectors,-css/support,-css/swap,-css/var/cssExpand,-css/var/getStyles,-css/var/isHidden,-css/var/rmargin,-css/var/rnumnonpx,-effects,-effects/Tween,-effects/animatedSelector,-dimensions,-offset,-deprecated,-event-alias,-wrap | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function (a, b) {
  "object" == ( false ? undefined : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {
    if (!a.document) throw new Error("jQuery requires a window with a document");
    return b(a);
  } : b(a);
}("undefined" != typeof window ? window : this, function (a, b) {
  var c = [],
      d = c.slice,
      e = c.concat,
      f = c.push,
      g = c.indexOf,
      h = {},
      i = h.toString,
      j = h.hasOwnProperty,
      k = {},
      l = a.document,
      m = "2.1.1 -css,-css/addGetHookIf,-css/curCSS,-css/defaultDisplay,-css/hiddenVisibleSelectors,-css/support,-css/swap,-css/var/cssExpand,-css/var/getStyles,-css/var/isHidden,-css/var/rmargin,-css/var/rnumnonpx,-effects,-effects/Tween,-effects/animatedSelector,-dimensions,-offset,-deprecated,-event-alias,-wrap",
      n = function n(a, b) {
    return new n.fn.init(a, b);
  },
      o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      p = /^-ms-/,
      q = /-([\da-z])/gi,
      r = function r(a, b) {
    return b.toUpperCase();
  };

  n.fn = n.prototype = {
    jquery: m,
    constructor: n,
    selector: "",
    length: 0,
    toArray: function toArray() {
      return d.call(this);
    },
    get: function get(a) {
      return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);
    },
    pushStack: function pushStack(a) {
      var b = n.merge(this.constructor(), a);
      return b.prevObject = this, b.context = this.context, b;
    },
    each: function each(a, b) {
      return n.each(this, a, b);
    },
    map: function map(a) {
      return this.pushStack(n.map(this, function (b, c) {
        return a.call(b, c, b);
      }));
    },
    slice: function slice() {
      return this.pushStack(d.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    eq: function eq(a) {
      var b = this.length,
          c = +a + (0 > a ? b : 0);
      return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor(null);
    },
    push: f,
    sort: c.sort,
    splice: c.splice
  }, n.extend = n.fn.extend = function () {
    var a,
        b,
        c,
        d,
        e,
        f,
        g = arguments[0] || {},
        h = 1,
        i = arguments.length,
        j = !1;

    for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == _typeof(g) || n.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) {
      if (null != (a = arguments[h])) for (b in a) {
        c = g[b], d = a[b], g !== d && (j && d && (n.isPlainObject(d) || (e = n.isArray(d))) ? (e ? (e = !1, f = c && n.isArray(c) ? c : []) : f = c && n.isPlainObject(c) ? c : {}, g[b] = n.extend(j, f, d)) : void 0 !== d && (g[b] = d));
      }
    }

    return g;
  }, n.extend({
    expando: "jQuery" + (m + Math.random()).replace(/\D/g, ""),
    isReady: !0,
    error: function error(a) {
      throw new Error(a);
    },
    noop: function noop() {},
    isFunction: function isFunction(a) {
      return "function" === n.type(a);
    },
    isArray: Array.isArray,
    isWindow: function isWindow(a) {
      return null != a && a === a.window;
    },
    isNumeric: function isNumeric(a) {
      return !n.isArray(a) && a - parseFloat(a) >= 0;
    },
    isPlainObject: function isPlainObject(a) {
      return "object" !== n.type(a) || a.nodeType || n.isWindow(a) ? !1 : a.constructor && !j.call(a.constructor.prototype, "isPrototypeOf") ? !1 : !0;
    },
    isEmptyObject: function isEmptyObject(a) {
      var b;

      for (b in a) {
        return !1;
      }

      return !0;
    },
    type: function type(a) {
      return null == a ? a + "" : "object" == _typeof(a) || "function" == typeof a ? h[i.call(a)] || "object" : _typeof(a);
    },
    globalEval: function globalEval(a) {
      var b,
          c = eval;
      a = n.trim(a), a && (1 === a.indexOf("use strict") ? (b = l.createElement("script"), b.text = a, l.head.appendChild(b).parentNode.removeChild(b)) : c(a));
    },
    camelCase: function camelCase(a) {
      return a.replace(p, "ms-").replace(q, r);
    },
    nodeName: function nodeName(a, b) {
      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
    },
    each: function each(a, b, c) {
      var d,
          e = 0,
          f = a.length,
          g = s(a);

      if (c) {
        if (g) {
          for (; f > e; e++) {
            if (d = b.apply(a[e], c), d === !1) break;
          }
        } else for (e in a) {
          if (d = b.apply(a[e], c), d === !1) break;
        }
      } else if (g) {
        for (; f > e; e++) {
          if (d = b.call(a[e], e, a[e]), d === !1) break;
        }
      } else for (e in a) {
        if (d = b.call(a[e], e, a[e]), d === !1) break;
      }

      return a;
    },
    trim: function trim(a) {
      return null == a ? "" : (a + "").replace(o, "");
    },
    makeArray: function makeArray(a, b) {
      var c = b || [];
      return null != a && (s(Object(a)) ? n.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c;
    },
    inArray: function inArray(a, b, c) {
      return null == b ? -1 : g.call(b, a, c);
    },
    merge: function merge(a, b) {
      for (var c = +b.length, d = 0, e = a.length; c > d; d++) {
        a[e++] = b[d];
      }

      return a.length = e, a;
    },
    grep: function grep(a, b, c) {
      for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {
        d = !b(a[f], f), d !== h && e.push(a[f]);
      }

      return e;
    },
    map: function map(a, b, c) {
      var d,
          f = 0,
          g = a.length,
          h = s(a),
          i = [];
      if (h) for (; g > f; f++) {
        d = b(a[f], f, c), null != d && i.push(d);
      } else for (f in a) {
        d = b(a[f], f, c), null != d && i.push(d);
      }
      return e.apply([], i);
    },
    guid: 1,
    proxy: function proxy(a, b) {
      var c, e, f;
      return "string" == typeof b && (c = a[b], b = a, a = c), n.isFunction(a) ? (e = d.call(arguments, 2), f = function f() {
        return a.apply(b || this, e.concat(d.call(arguments)));
      }, f.guid = a.guid = a.guid || n.guid++, f) : void 0;
    },
    now: Date.now,
    support: k
  }), n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) {
    h["[object " + b + "]"] = b.toLowerCase();
  });

  function s(a) {
    var b = a.length,
        c = n.type(a);
    return "function" === c || n.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a;
  }

  var t = a.document.documentElement,
      u,
      v = t.matches || t.webkitMatchesSelector || t.mozMatchesSelector || t.oMatchesSelector || t.msMatchesSelector,
      w = function w(a, b) {
    if (a === b) return u = !0, 0;
    var c = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
    return c ? 1 & c ? a === l || n.contains(l, a) ? -1 : b === l || n.contains(l, b) ? 1 : 0 : 4 & c ? -1 : 1 : a.compareDocumentPosition ? -1 : 1;
  };

  n.extend({
    find: function find(a, b, c, d) {
      var e,
          f,
          g = 0;
      if (c = c || [], b = b || l, !a || "string" != typeof a) return c;
      if (1 !== (f = b.nodeType) && 9 !== f) return [];
      if (d) while (e = d[g++]) {
        n.find.matchesSelector(e, a) && c.push(e);
      } else n.merge(c, b.querySelectorAll(a));
      return c;
    },
    unique: function unique(a) {
      var b,
          c = [],
          d = 0,
          e = 0;

      if (u = !1, a.sort(w), u) {
        while (b = a[d++]) {
          b === a[d] && (e = c.push(d));
        }

        while (e--) {
          a.splice(c[e], 1);
        }
      }

      return a;
    },
    text: function text(a) {
      var b,
          c = "",
          d = 0,
          e = a.nodeType;

      if (e) {
        if (1 === e || 9 === e || 11 === e) return a.textContent;
        if (3 === e || 4 === e) return a.nodeValue;
      } else while (b = a[d++]) {
        c += n.text(b);
      }

      return c;
    },
    contains: function contains(a, b) {
      var c = 9 === a.nodeType ? a.documentElement : a,
          d = b && b.parentNode;
      return a === d || !(!d || 1 !== d.nodeType || !c.contains(d));
    },
    isXMLDoc: function isXMLDoc(a) {
      return "HTML" !== (a.ownerDocument || a).documentElement.nodeName;
    },
    expr: {
      attrHandle: {},
      match: {
        bool: /^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$/i,
        needsContext: /^[\x20\t\r\n\f]*[>+~]/
      }
    }
  }), n.extend(n.find, {
    matches: function matches(a, b) {
      return n.find(a, null, null, b);
    },
    matchesSelector: function matchesSelector(a, b) {
      return v.call(a, b);
    },
    attr: function attr(a, b) {
      return a.getAttribute(b);
    }
  });
  var x = n.expr.match.needsContext,
      y = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
      z = /^.[^:#\[\.,]*$/;

  function A(a, b, c) {
    if (n.isFunction(b)) return n.grep(a, function (a, d) {
      return !!b.call(a, d, a) !== c;
    });
    if (b.nodeType) return n.grep(a, function (a) {
      return a === b !== c;
    });

    if ("string" == typeof b) {
      if (z.test(b)) return n.filter(b, a, c);
      b = n.filter(b, a);
    }

    return n.grep(a, function (a) {
      return g.call(b, a) >= 0 !== c;
    });
  }

  n.filter = function (a, b, c) {
    var d = b[0];
    return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? n.find.matchesSelector(d, a) ? [d] : [] : n.find.matches(a, n.grep(b, function (a) {
      return 1 === a.nodeType;
    }));
  }, n.fn.extend({
    find: function find(a) {
      var b,
          c = this.length,
          d = [],
          e = this;
      if ("string" != typeof a) return this.pushStack(n(a).filter(function () {
        for (b = 0; c > b; b++) {
          if (n.contains(e[b], this)) return !0;
        }
      }));

      for (b = 0; c > b; b++) {
        n.find(a, e[b], d);
      }

      return d = this.pushStack(c > 1 ? n.unique(d) : d), d.selector = this.selector ? this.selector + " " + a : a, d;
    },
    filter: function filter(a) {
      return this.pushStack(A(this, a || [], !1));
    },
    not: function not(a) {
      return this.pushStack(A(this, a || [], !0));
    },
    is: function is(a) {
      return !!A(this, "string" == typeof a && x.test(a) ? n(a) : a || [], !1).length;
    }
  });

  var B,
      C = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
      D = n.fn.init = function (a, b) {
    var c, d;
    if (!a) return this;

    if ("string" == typeof a) {
      if (c = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : C.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || B).find(a) : this.constructor(b).find(a);

      if (c[1]) {
        if (b = b instanceof n ? b[0] : b, n.merge(this, n.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : l, !0)), y.test(c[1]) && n.isPlainObject(b)) for (c in b) {
          n.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
        }
        return this;
      }

      return d = l.getElementById(c[2]), d && d.parentNode && (this.length = 1, this[0] = d), this.context = l, this.selector = a, this;
    }

    return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : n.isFunction(a) ? "undefined" != typeof B.ready ? B.ready(a) : a(n) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), n.makeArray(a, this));
  };

  D.prototype = n.fn, B = n(l);
  var E = /^(?:parents|prev(?:Until|All))/,
      F = {
    children: !0,
    contents: !0,
    next: !0,
    prev: !0
  };
  n.extend({
    dir: function dir(a, b, c) {
      var d = [],
          e = void 0 !== c;

      while ((a = a[b]) && 9 !== a.nodeType) {
        if (1 === a.nodeType) {
          if (e && n(a).is(c)) break;
          d.push(a);
        }
      }

      return d;
    },
    sibling: function sibling(a, b) {
      for (var c = []; a; a = a.nextSibling) {
        1 === a.nodeType && a !== b && c.push(a);
      }

      return c;
    }
  }), n.fn.extend({
    has: function has(a) {
      var b = n(a, this),
          c = b.length;
      return this.filter(function () {
        for (var a = 0; c > a; a++) {
          if (n.contains(this, b[a])) return !0;
        }
      });
    },
    closest: function closest(a, b) {
      for (var c, d = 0, e = this.length, f = [], g = x.test(a) || "string" != typeof a ? n(a, b || this.context) : 0; e > d; d++) {
        for (c = this[d]; c && c !== b; c = c.parentNode) {
          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && n.find.matchesSelector(c, a))) {
            f.push(c);
            break;
          }
        }
      }

      return this.pushStack(f.length > 1 ? n.unique(f) : f);
    },
    index: function index(a) {
      return a ? "string" == typeof a ? g.call(n(a), this[0]) : g.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    },
    add: function add(a, b) {
      return this.pushStack(n.unique(n.merge(this.get(), n(a, b))));
    },
    addBack: function addBack(a) {
      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
    }
  });

  function G(a, b) {
    while ((a = a[b]) && 1 !== a.nodeType) {
      ;
    }

    return a;
  }

  n.each({
    parent: function parent(a) {
      var b = a.parentNode;
      return b && 11 !== b.nodeType ? b : null;
    },
    parents: function parents(a) {
      return n.dir(a, "parentNode");
    },
    parentsUntil: function parentsUntil(a, b, c) {
      return n.dir(a, "parentNode", c);
    },
    next: function next(a) {
      return G(a, "nextSibling");
    },
    prev: function prev(a) {
      return G(a, "previousSibling");
    },
    nextAll: function nextAll(a) {
      return n.dir(a, "nextSibling");
    },
    prevAll: function prevAll(a) {
      return n.dir(a, "previousSibling");
    },
    nextUntil: function nextUntil(a, b, c) {
      return n.dir(a, "nextSibling", c);
    },
    prevUntil: function prevUntil(a, b, c) {
      return n.dir(a, "previousSibling", c);
    },
    siblings: function siblings(a) {
      return n.sibling((a.parentNode || {}).firstChild, a);
    },
    children: function children(a) {
      return n.sibling(a.firstChild);
    },
    contents: function contents(a) {
      return a.contentDocument || n.merge([], a.childNodes);
    }
  }, function (a, b) {
    n.fn[a] = function (c, d) {
      var e = n.map(this, b, c);
      return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = n.filter(d, e)), this.length > 1 && (F[a] || n.unique(e), E.test(a) && e.reverse()), this.pushStack(e);
    };
  });
  var H = /\S+/g,
      I = {};

  function J(a) {
    var b = I[a] = {};
    return n.each(a.match(H) || [], function (a, c) {
      b[c] = !0;
    }), b;
  }

  n.Callbacks = function (a) {
    a = "string" == typeof a ? I[a] || J(a) : n.extend({}, a);

    var b,
        c,
        d,
        e,
        f,
        g,
        h = [],
        i = !a.once && [],
        j = function j(l) {
      for (b = a.memory && l, c = !0, g = e || 0, e = 0, f = h.length, d = !0; h && f > g; g++) {
        if (h[g].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
          b = !1;
          break;
        }
      }

      d = !1, h && (i ? i.length && j(i.shift()) : b ? h = [] : k.disable());
    },
        k = {
      add: function add() {
        if (h) {
          var c = h.length;
          !function g(b) {
            n.each(b, function (b, c) {
              var d = n.type(c);
              "function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && g(c);
            });
          }(arguments), d ? f = h.length : b && (e = c, j(b));
        }

        return this;
      },
      remove: function remove() {
        return h && n.each(arguments, function (a, b) {
          var c;

          while ((c = n.inArray(b, h, c)) > -1) {
            h.splice(c, 1), d && (f >= c && f--, g >= c && g--);
          }
        }), this;
      },
      has: function has(a) {
        return a ? n.inArray(a, h) > -1 : !(!h || !h.length);
      },
      empty: function empty() {
        return h = [], f = 0, this;
      },
      disable: function disable() {
        return h = i = b = void 0, this;
      },
      disabled: function disabled() {
        return !h;
      },
      lock: function lock() {
        return i = void 0, b || k.disable(), this;
      },
      locked: function locked() {
        return !i;
      },
      fireWith: function fireWith(a, b) {
        return !h || c && !i || (b = b || [], b = [a, b.slice ? b.slice() : b], d ? i.push(b) : j(b)), this;
      },
      fire: function fire() {
        return k.fireWith(this, arguments), this;
      },
      fired: function fired() {
        return !!c;
      }
    };

    return k;
  }, n.extend({
    Deferred: function Deferred(a) {
      var b = [["resolve", "done", n.Callbacks("once memory"), "resolved"], ["reject", "fail", n.Callbacks("once memory"), "rejected"], ["notify", "progress", n.Callbacks("memory")]],
          c = "pending",
          d = {
        state: function state() {
          return c;
        },
        always: function always() {
          return e.done(arguments).fail(arguments), this;
        },
        then: function then() {
          var a = arguments;
          return n.Deferred(function (c) {
            n.each(b, function (b, f) {
              var g = n.isFunction(a[b]) && a[b];
              e[f[1]](function () {
                var a = g && g.apply(this, arguments);
                a && n.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments);
              });
            }), a = null;
          }).promise();
        },
        promise: function promise(a) {
          return null != a ? n.extend(a, d) : d;
        }
      },
          e = {};
      return d.pipe = d.then, n.each(b, function (a, f) {
        var g = f[2],
            h = f[3];
        d[f[1]] = g.add, h && g.add(function () {
          c = h;
        }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {
          return e[f[0] + "With"](this === e ? d : this, arguments), this;
        }, e[f[0] + "With"] = g.fireWith;
      }), d.promise(e), a && a.call(e, e), e;
    },
    when: function when(a) {
      var b = 0,
          c = d.call(arguments),
          e = c.length,
          f = 1 !== e || a && n.isFunction(a.promise) ? e : 0,
          g = 1 === f ? a : n.Deferred(),
          h = function h(a, b, c) {
        return function (e) {
          b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
        };
      },
          i,
          j,
          k;

      if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {
        c[b] && n.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
      }
      return f || g.resolveWith(k, c), g.promise();
    }
  });
  var K;
  n.fn.ready = function (a) {
    return n.ready.promise().done(a), this;
  }, n.extend({
    isReady: !1,
    readyWait: 1,
    holdReady: function holdReady(a) {
      a ? n.readyWait++ : n.ready(!0);
    },
    ready: function ready(a) {
      (a === !0 ? --n.readyWait : n.isReady) || (n.isReady = !0, a !== !0 && --n.readyWait > 0 || (K.resolveWith(l, [n]), n.fn.triggerHandler && (n(l).triggerHandler("ready"), n(l).off("ready"))));
    }
  });

  function L() {
    l.removeEventListener("DOMContentLoaded", L, !1), a.removeEventListener("load", L, !1), n.ready();
  }

  n.ready.promise = function (b) {
    return K || (K = n.Deferred(), "complete" === l.readyState ? setTimeout(n.ready) : (l.addEventListener("DOMContentLoaded", L, !1), a.addEventListener("load", L, !1))), K.promise(b);
  }, n.ready.promise();

  var M = n.access = function (a, b, c, d, e, f, g) {
    var h = 0,
        i = a.length,
        j = null == c;

    if ("object" === n.type(c)) {
      e = !0;

      for (h in c) {
        n.access(a, b, h, c[h], !0, f, g);
      }
    } else if (void 0 !== d && (e = !0, n.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b2, c) {
      return j.call(n(a), c);
    })), b)) for (; i > h; h++) {
      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
    }

    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
  };

  n.acceptData = function (a) {
    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
  };

  function N() {
    Object.defineProperty(this.cache = {}, 0, {
      get: function get() {
        return {};
      }
    }), this.expando = n.expando + Math.random();
  }

  N.uid = 1, N.accepts = n.acceptData, N.prototype = {
    key: function key(a) {
      if (!N.accepts(a)) return 0;
      var b = {},
          c = a[this.expando];

      if (!c) {
        c = N.uid++;

        try {
          b[this.expando] = {
            value: c
          }, Object.defineProperties(a, b);
        } catch (d) {
          b[this.expando] = c, n.extend(a, b);
        }
      }

      return this.cache[c] || (this.cache[c] = {}), c;
    },
    set: function set(a, b, c) {
      var d,
          e = this.key(a),
          f = this.cache[e];
      if ("string" == typeof b) f[b] = c;else if (n.isEmptyObject(f)) n.extend(this.cache[e], b);else for (d in b) {
        f[d] = b[d];
      }
      return f;
    },
    get: function get(a, b) {
      var c = this.cache[this.key(a)];
      return void 0 === b ? c : c[b];
    },
    access: function access(a, b, c) {
      var d;
      return void 0 === b || b && "string" == typeof b && void 0 === c ? (d = this.get(a, b), void 0 !== d ? d : this.get(a, n.camelCase(b))) : (this.set(a, b, c), void 0 !== c ? c : b);
    },
    remove: function remove(a, b) {
      var c,
          d,
          e,
          f = this.key(a),
          g = this.cache[f];
      if (void 0 === b) this.cache[f] = {};else {
        n.isArray(b) ? d = b.concat(b.map(n.camelCase)) : (e = n.camelCase(b), b in g ? d = [b, e] : (d = e, d = d in g ? [d] : d.match(H) || [])), c = d.length;

        while (c--) {
          delete g[d[c]];
        }
      }
    },
    hasData: function hasData(a) {
      return !n.isEmptyObject(this.cache[a[this.expando]] || {});
    },
    discard: function discard(a) {
      a[this.expando] && delete this.cache[a[this.expando]];
    }
  };
  var O = new N(),
      P = new N(),
      Q = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      R = /([A-Z])/g;

  function S(a, b, c) {
    var d;
    if (void 0 === c && 1 === a.nodeType) if (d = "data-" + b.replace(R, "-$1").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
      try {
        c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : Q.test(c) ? n.parseJSON(c) : c;
      } catch (e) {}

      P.set(a, b, c);
    } else c = void 0;
    return c;
  }

  n.extend({
    hasData: function hasData(a) {
      return P.hasData(a) || O.hasData(a);
    },
    data: function data(a, b, c) {
      return P.access(a, b, c);
    },
    removeData: function removeData(a, b) {
      P.remove(a, b);
    },
    _data: function _data(a, b, c) {
      return O.access(a, b, c);
    },
    _removeData: function _removeData(a, b) {
      O.remove(a, b);
    }
  }), n.fn.extend({
    data: function data(a, b) {
      var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;

      if (void 0 === a) {
        if (this.length && (e = P.get(f), 1 === f.nodeType && !O.get(f, "hasDataAttrs"))) {
          c = g.length;

          while (c--) {
            g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = n.camelCase(d.slice(5)), S(f, d, e[d])));
          }

          O.set(f, "hasDataAttrs", !0);
        }

        return e;
      }

      return "object" == _typeof(a) ? this.each(function () {
        P.set(this, a);
      }) : M(this, function (b) {
        var c,
            d = n.camelCase(a);

        if (f && void 0 === b) {
          if (c = P.get(f, a), void 0 !== c) return c;
          if (c = P.get(f, d), void 0 !== c) return c;
          if (c = S(f, d, void 0), void 0 !== c) return c;
        } else this.each(function () {
          var c = P.get(this, d);
          P.set(this, d, b), -1 !== a.indexOf("-") && void 0 !== c && P.set(this, a, b);
        });
      }, null, b, arguments.length > 1, null, !0);
    },
    removeData: function removeData(a) {
      return this.each(function () {
        P.remove(this, a);
      });
    }
  }), n.extend({
    queue: function queue(a, b, c) {
      var d;
      return a ? (b = (b || "fx") + "queue", d = O.get(a, b), c && (!d || n.isArray(c) ? d = O.access(a, b, n.makeArray(c)) : d.push(c)), d || []) : void 0;
    },
    dequeue: function dequeue(a, b) {
      b = b || "fx";

      var c = n.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = n._queueHooks(a, b),
          g = function g() {
        n.dequeue(a, b);
      };

      "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
    },
    _queueHooks: function _queueHooks(a, b) {
      var c = b + "queueHooks";
      return O.get(a, c) || O.access(a, c, {
        empty: n.Callbacks("once memory").add(function () {
          O.remove(a, [b + "queue", c]);
        })
      });
    }
  }), n.fn.extend({
    queue: function queue(a, b) {
      var c = 2;
      return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? n.queue(this[0], a) : void 0 === b ? this : this.each(function () {
        var c = n.queue(this, a, b);
        n._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && n.dequeue(this, a);
      });
    },
    dequeue: function dequeue(a) {
      return this.each(function () {
        n.dequeue(this, a);
      });
    },
    clearQueue: function clearQueue(a) {
      return this.queue(a || "fx", []);
    },
    promise: function promise(a, b) {
      var c,
          d = 1,
          e = n.Deferred(),
          f = this,
          g = this.length,
          h = function h() {
        --d || e.resolveWith(f, [f]);
      };

      "string" != typeof a && (b = a, a = void 0), a = a || "fx";

      while (g--) {
        c = O.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
      }

      return h(), e.promise(b);
    }
  });
  var T = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      U = /^(?:checkbox|radio)$/i;
  !function () {
    var a = l.createDocumentFragment(),
        b = a.appendChild(l.createElement("div")),
        c = l.createElement("input");
    c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
  }();
  var V = "undefined";
  k.focusinBubbles = "onfocusin" in a;
  var W = /^key/,
      X = /^(?:mouse|pointer|contextmenu)|click/,
      Y = /^(?:focusinfocus|focusoutblur)$/,
      Z = /^([^.]*)(?:\.(.+)|)$/;

  function $() {
    return !0;
  }

  function _() {
    return !1;
  }

  function ab() {
    try {
      return l.activeElement;
    } catch (a) {}
  }

  n.event = {
    global: {},
    add: function add(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          o,
          p,
          q,
          r = O.get(a);

      if (r) {
        c.handler && (f = c, c = f.handler, e = f.selector), c.guid || (c.guid = n.guid++), (i = r.events) || (i = r.events = {}), (g = r.handle) || (g = r.handle = function (b) {
          return _typeof(n) !== V && n.event.triggered !== b.type ? n.event.dispatch.apply(a, arguments) : void 0;
        }), b = (b || "").match(H) || [""], j = b.length;

        while (j--) {
          h = Z.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o && (l = n.event.special[o] || {}, o = (e ? l.delegateType : l.bindType) || o, l = n.event.special[o] || {}, k = n.extend({
            type: o,
            origType: q,
            data: d,
            handler: c,
            guid: c.guid,
            selector: e,
            needsContext: e && n.expr.match.needsContext.test(e),
            namespace: p.join(".")
          }, f), (m = i[o]) || (m = i[o] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, p, g) !== !1 || a.addEventListener && a.addEventListener(o, g, !1)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), n.event.global[o] = !0);
        }
      }
    },
    remove: function remove(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          o,
          p,
          q,
          r = O.hasData(a) && O.get(a);

      if (r && (i = r.events)) {
        b = (b || "").match(H) || [""], j = b.length;

        while (j--) {
          if (h = Z.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) {
            l = n.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, m = i[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;

            while (f--) {
              k = m[f], !e && q !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
            }

            g && !m.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || n.removeEvent(a, o, r.handle), delete i[o]);
          } else for (o in i) {
            n.event.remove(a, o + b[j], c, d, !0);
          }
        }

        n.isEmptyObject(i) && (delete r.handle, O.remove(a, "events"));
      }
    },
    trigger: function trigger(b, c, d, e) {
      var f,
          g,
          h,
          i,
          k,
          m,
          o,
          p = [d || l],
          q = j.call(b, "type") ? b.type : b,
          r = j.call(b, "namespace") ? b.namespace.split(".") : [];

      if (g = h = d = d || l, 3 !== d.nodeType && 8 !== d.nodeType && !Y.test(q + n.event.triggered) && (q.indexOf(".") >= 0 && (r = q.split("."), q = r.shift(), r.sort()), k = q.indexOf(":") < 0 && "on" + q, b = b[n.expando] ? b : new n.Event(q, "object" == _typeof(b) && b), b.isTrigger = e ? 2 : 3, b.namespace = r.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + r.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : n.makeArray(c, [b]), o = n.event.special[q] || {}, e || !o.trigger || o.trigger.apply(d, c) !== !1)) {
        if (!e && !o.noBubble && !n.isWindow(d)) {
          for (i = o.delegateType || q, Y.test(i + q) || (g = g.parentNode); g; g = g.parentNode) {
            p.push(g), h = g;
          }

          h === (d.ownerDocument || l) && p.push(h.defaultView || h.parentWindow || a);
        }

        f = 0;

        while ((g = p[f++]) && !b.isPropagationStopped()) {
          b.type = f > 1 ? i : o.bindType || q, m = (O.get(g, "events") || {})[b.type] && O.get(g, "handle"), m && m.apply(g, c), m = k && g[k], m && m.apply && n.acceptData(g) && (b.result = m.apply(g, c), b.result === !1 && b.preventDefault());
        }

        return b.type = q, e || b.isDefaultPrevented() || o._default && o._default.apply(p.pop(), c) !== !1 || !n.acceptData(d) || k && n.isFunction(d[q]) && !n.isWindow(d) && (h = d[k], h && (d[k] = null), n.event.triggered = q, d[q](), n.event.triggered = void 0, h && (d[k] = h)), b.result;
      }
    },
    dispatch: function dispatch(a) {
      a = n.event.fix(a);
      var b,
          c,
          e,
          f,
          g,
          h = [],
          i = d.call(arguments),
          j = (O.get(this, "events") || {})[a.type] || [],
          k = n.event.special[a.type] || {};

      if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
        h = n.event.handlers.call(this, a, j), b = 0;

        while ((f = h[b++]) && !a.isPropagationStopped()) {
          a.currentTarget = f.elem, c = 0;

          while ((g = f.handlers[c++]) && !a.isImmediatePropagationStopped()) {
            (!a.namespace_re || a.namespace_re.test(g.namespace)) && (a.handleObj = g, a.data = g.data, e = ((n.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (a.result = e) === !1 && (a.preventDefault(), a.stopPropagation()));
          }
        }

        return k.postDispatch && k.postDispatch.call(this, a), a.result;
      }
    },
    handlers: function handlers(a, b) {
      var c,
          d,
          e,
          f,
          g = [],
          h = b.delegateCount,
          i = a.target;
      if (h && i.nodeType && (!a.button || "click" !== a.type)) for (; i !== this; i = i.parentNode || this) {
        if (i.disabled !== !0 || "click" !== a.type) {
          for (d = [], c = 0; h > c; c++) {
            f = b[c], e = f.selector + " ", void 0 === d[e] && (d[e] = f.needsContext ? n(e, this).index(i) >= 0 : n.find(e, this, null, [i]).length), d[e] && d.push(f);
          }

          d.length && g.push({
            elem: i,
            handlers: d
          });
        }
      }
      return h < b.length && g.push({
        elem: this,
        handlers: b.slice(h)
      }), g;
    },
    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    fixHooks: {},
    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function filter(a, b) {
        return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;
      }
    },
    mouseHooks: {
      props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
      filter: function filter(a, b) {
        var c,
            d,
            e,
            f = b.button;
        return null == a.pageX && null != b.clientX && (c = a.target.ownerDocument || l, d = c.documentElement, e = c.body, a.pageX = b.clientX + (d && d.scrollLeft || e && e.scrollLeft || 0) - (d && d.clientLeft || e && e.clientLeft || 0), a.pageY = b.clientY + (d && d.scrollTop || e && e.scrollTop || 0) - (d && d.clientTop || e && e.clientTop || 0)), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;
      }
    },
    fix: function fix(a) {
      if (a[n.expando]) return a;
      var b,
          c,
          d,
          e = a.type,
          f = a,
          g = this.fixHooks[e];
      g || (this.fixHooks[e] = g = X.test(e) ? this.mouseHooks : W.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new n.Event(f), b = d.length;

      while (b--) {
        c = d[b], a[c] = f[c];
      }

      return a.target || (a.target = l), 3 === a.target.nodeType && (a.target = a.target.parentNode), g.filter ? g.filter(a, f) : a;
    },
    special: {
      load: {
        noBubble: !0
      },
      focus: {
        trigger: function trigger() {
          return this !== ab() && this.focus ? (this.focus(), !1) : void 0;
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function trigger() {
          return this === ab() && this.blur ? (this.blur(), !1) : void 0;
        },
        delegateType: "focusout"
      },
      click: {
        trigger: function trigger() {
          return "checkbox" === this.type && this.click && n.nodeName(this, "input") ? (this.click(), !1) : void 0;
        },
        _default: function _default(a) {
          return n.nodeName(a.target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(a) {
          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
        }
      }
    },
    simulate: function simulate(a, b, c, d) {
      var e = n.extend(new n.Event(), c, {
        type: a,
        isSimulated: !0,
        originalEvent: {}
      });
      d ? n.event.trigger(e, null, b) : n.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
    }
  }, n.removeEvent = function (a, b, c) {
    a.removeEventListener && a.removeEventListener(b, c, !1);
  }, n.Event = function (a, b) {
    return this instanceof n.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? $ : _) : this.type = a, b && n.extend(this, b), this.timeStamp = a && a.timeStamp || n.now(), void (this[n.expando] = !0)) : new n.Event(a, b);
  }, n.Event.prototype = {
    isDefaultPrevented: _,
    isPropagationStopped: _,
    isImmediatePropagationStopped: _,
    preventDefault: function preventDefault() {
      var a = this.originalEvent;
      this.isDefaultPrevented = $, a && a.preventDefault && a.preventDefault();
    },
    stopPropagation: function stopPropagation() {
      var a = this.originalEvent;
      this.isPropagationStopped = $, a && a.stopPropagation && a.stopPropagation();
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var a = this.originalEvent;
      this.isImmediatePropagationStopped = $, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();
    }
  }, n.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (a, b) {
    n.event.special[a] = {
      delegateType: b,
      bindType: b,
      handle: function handle(a) {
        var c,
            d = this,
            e = a.relatedTarget,
            f = a.handleObj;
        return (!e || e !== d && !n.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
      }
    };
  }), k.focusinBubbles || n.each({
    focus: "focusin",
    blur: "focusout"
  }, function (a, b) {
    var c = function c(a) {
      n.event.simulate(b, a.target, n.event.fix(a), !0);
    };

    n.event.special[b] = {
      setup: function setup() {
        var d = this.ownerDocument || this,
            e = O.access(d, b);
        e || d.addEventListener(a, c, !0), O.access(d, b, (e || 0) + 1);
      },
      teardown: function teardown() {
        var d = this.ownerDocument || this,
            e = O.access(d, b) - 1;
        e ? O.access(d, b, e) : (d.removeEventListener(a, c, !0), O.remove(d, b));
      }
    };
  }), n.fn.extend({
    on: function on(a, b, c, d, e) {
      var f, g;

      if ("object" == _typeof(a)) {
        "string" != typeof b && (c = c || b, b = void 0);

        for (g in a) {
          this.on(g, b, c, a[g], e);
        }

        return this;
      }

      if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = _;else if (!d) return this;
      return 1 === e && (f = d, d = function d(a) {
        return n().off(a), f.apply(this, arguments);
      }, d.guid = f.guid || (f.guid = n.guid++)), this.each(function () {
        n.event.add(this, a, d, c, b);
      });
    },
    one: function one(a, b, c, d) {
      return this.on(a, b, c, d, 1);
    },
    off: function off(a, b, c) {
      var d, e;
      if (a && a.preventDefault && a.handleObj) return d = a.handleObj, n(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;

      if ("object" == _typeof(a)) {
        for (e in a) {
          this.off(e, b, a[e]);
        }

        return this;
      }

      return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = _), this.each(function () {
        n.event.remove(this, a, c, b);
      });
    },
    trigger: function trigger(a, b) {
      return this.each(function () {
        n.event.trigger(a, b, this);
      });
    },
    triggerHandler: function triggerHandler(a, b) {
      var c = this[0];
      return c ? n.event.trigger(a, b, c, !0) : void 0;
    }
  });
  var bb = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
      cb = /<([\w:]+)/,
      db = /<|&#?\w+;/,
      eb = /<(?:script|style|link)/i,
      fb = /checked\s*(?:[^=]|=\s*.checked.)/i,
      gb = /^$|\/(?:java|ecma)script/i,
      hb = /^true\/(.*)/,
      ib = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
      jb = {
    option: [1, "<select multiple='multiple'>", "</select>"],
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  jb.optgroup = jb.option, jb.tbody = jb.tfoot = jb.colgroup = jb.caption = jb.thead, jb.th = jb.td;

  function kb(a, b) {
    return n.nodeName(a, "table") && n.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;
  }

  function lb(a) {
    return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
  }

  function mb(a) {
    var b = hb.exec(a.type);
    return b ? a.type = b[1] : a.removeAttribute("type"), a;
  }

  function nb(a, b) {
    for (var c = 0, d = a.length; d > c; c++) {
      O.set(a[c], "globalEval", !b || O.get(b[c], "globalEval"));
    }
  }

  function ob(a, b) {
    var c, d, e, f, g, h, i, j;

    if (1 === b.nodeType) {
      if (O.hasData(a) && (f = O.access(a), g = O.set(b, f), j = f.events)) {
        delete g.handle, g.events = {};

        for (e in j) {
          for (c = 0, d = j[e].length; d > c; c++) {
            n.event.add(b, e, j[e][c]);
          }
        }
      }

      P.hasData(a) && (h = P.access(a), i = n.extend({}, h), P.set(b, i));
    }
  }

  function pb(a, b) {
    var c = a.getElementsByTagName ? a.getElementsByTagName(b || "*") : a.querySelectorAll ? a.querySelectorAll(b || "*") : [];
    return void 0 === b || b && n.nodeName(a, b) ? n.merge([a], c) : c;
  }

  function qb(a, b) {
    var c = b.nodeName.toLowerCase();
    "input" === c && U.test(a.type) ? b.checked = a.checked : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);
  }

  n.extend({
    clone: function clone(a, b, c) {
      var d,
          e,
          f,
          g,
          h = a.cloneNode(!0),
          i = n.contains(a.ownerDocument, a);
      if (!(k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || n.isXMLDoc(a))) for (g = pb(h), f = pb(a), d = 0, e = f.length; e > d; d++) {
        qb(f[d], g[d]);
      }
      if (b) if (c) for (f = f || pb(a), g = g || pb(h), d = 0, e = f.length; e > d; d++) {
        ob(f[d], g[d]);
      } else ob(a, h);
      return g = pb(h, "script"), g.length > 0 && nb(g, !i && pb(a, "script")), h;
    },
    buildFragment: function buildFragment(a, b, c, d) {
      for (var e, f, g, h, i, j, k = b.createDocumentFragment(), l = [], m = 0, o = a.length; o > m; m++) {
        if (e = a[m], e || 0 === e) if ("object" === n.type(e)) n.merge(l, e.nodeType ? [e] : e);else if (db.test(e)) {
          f = f || k.appendChild(b.createElement("div")), g = (cb.exec(e) || ["", ""])[1].toLowerCase(), h = jb[g] || jb._default, f.innerHTML = h[1] + e.replace(bb, "<$1></$2>") + h[2], j = h[0];

          while (j--) {
            f = f.lastChild;
          }

          n.merge(l, f.childNodes), f = k.firstChild, f.textContent = "";
        } else l.push(b.createTextNode(e));
      }

      k.textContent = "", m = 0;

      while (e = l[m++]) {
        if ((!d || -1 === n.inArray(e, d)) && (i = n.contains(e.ownerDocument, e), f = pb(k.appendChild(e), "script"), i && nb(f), c)) {
          j = 0;

          while (e = f[j++]) {
            gb.test(e.type || "") && c.push(e);
          }
        }
      }

      return k;
    },
    cleanData: function cleanData(a) {
      for (var b, c, d, e, f = n.event.special, g = 0; void 0 !== (c = a[g]); g++) {
        if (n.acceptData(c) && (e = c[O.expando], e && (b = O.cache[e]))) {
          if (b.events) for (d in b.events) {
            f[d] ? n.event.remove(c, d) : n.removeEvent(c, d, b.handle);
          }
          O.cache[e] && delete O.cache[e];
        }

        delete P.cache[c[P.expando]];
      }
    }
  }), n.fn.extend({
    text: function text(a) {
      return M(this, function (a) {
        return void 0 === a ? n.text(this) : this.empty().each(function () {
          (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && (this.textContent = a);
        });
      }, null, a, arguments.length);
    },
    append: function append() {
      return this.domManip(arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = kb(this, a);
          b.appendChild(a);
        }
      });
    },
    prepend: function prepend() {
      return this.domManip(arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = kb(this, a);
          b.insertBefore(a, b.firstChild);
        }
      });
    },
    before: function before() {
      return this.domManip(arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this);
      });
    },
    after: function after() {
      return this.domManip(arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
      });
    },
    remove: function remove(a, b) {
      for (var c, d = a ? n.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {
        b || 1 !== c.nodeType || n.cleanData(pb(c)), c.parentNode && (b && n.contains(c.ownerDocument, c) && nb(pb(c, "script")), c.parentNode.removeChild(c));
      }

      return this;
    },
    empty: function empty() {
      for (var a, b = 0; null != (a = this[b]); b++) {
        1 === a.nodeType && (n.cleanData(pb(a, !1)), a.textContent = "");
      }

      return this;
    },
    clone: function clone(a, b) {
      return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {
        return n.clone(this, a, b);
      });
    },
    html: function html(a) {
      return M(this, function (a) {
        var b = this[0] || {},
            c = 0,
            d = this.length;
        if (void 0 === a && 1 === b.nodeType) return b.innerHTML;

        if ("string" == typeof a && !eb.test(a) && !jb[(cb.exec(a) || ["", ""])[1].toLowerCase()]) {
          a = a.replace(bb, "<$1></$2>");

          try {
            for (; d > c; c++) {
              b = this[c] || {}, 1 === b.nodeType && (n.cleanData(pb(b, !1)), b.innerHTML = a);
            }

            b = 0;
          } catch (e) {}
        }

        b && this.empty().append(a);
      }, null, a, arguments.length);
    },
    replaceWith: function replaceWith() {
      var a = arguments[0];
      return this.domManip(arguments, function (b) {
        a = this.parentNode, n.cleanData(pb(this)), a && a.replaceChild(b, this);
      }), a && (a.length || a.nodeType) ? this : this.remove();
    },
    detach: function detach(a) {
      return this.remove(a, !0);
    },
    domManip: function domManip(a, b) {
      a = e.apply([], a);
      var c,
          d,
          f,
          g,
          h,
          i,
          j = 0,
          l = this.length,
          m = this,
          o = l - 1,
          p = a[0],
          q = n.isFunction(p);
      if (q || l > 1 && "string" == typeof p && !k.checkClone && fb.test(p)) return this.each(function (c) {
        var d = m.eq(c);
        q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
      });

      if (l && (c = n.buildFragment(a, this[0].ownerDocument, !1, this), d = c.firstChild, 1 === c.childNodes.length && (c = d), d)) {
        for (f = n.map(pb(c, "script"), lb), g = f.length; l > j; j++) {
          h = c, j !== o && (h = n.clone(h, !0, !0), g && n.merge(f, pb(h, "script"))), b.call(this[j], h, j);
        }

        if (g) for (i = f[f.length - 1].ownerDocument, n.map(f, mb), j = 0; g > j; j++) {
          h = f[j], gb.test(h.type || "") && !O.access(h, "globalEval") && n.contains(i, h) && (h.src ? n._evalUrl && n._evalUrl(h.src) : n.globalEval(h.textContent.replace(ib, "")));
        }
      }

      return this;
    }
  }), n.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (a, b) {
    n.fn[a] = function (a) {
      for (var c, d = [], e = n(a), g = e.length - 1, h = 0; g >= h; h++) {
        c = h === g ? this : this.clone(!0), n(e[h])[b](c), f.apply(d, c.get());
      }

      return this.pushStack(d);
    };
  }), n.fn.delay = function (a, b) {
    return a = n.fx ? n.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) {
      var d = setTimeout(b, a);

      c.stop = function () {
        clearTimeout(d);
      };
    });
  }, function () {
    var a = l.createElement("input"),
        b = l.createElement("select"),
        c = b.appendChild(l.createElement("option"));
    a.type = "checkbox", k.checkOn = "" !== a.value, k.optSelected = c.selected, b.disabled = !0, k.optDisabled = !c.disabled, a = l.createElement("input"), a.value = "t", a.type = "radio", k.radioValue = "t" === a.value;
  }();
  var rb,
      sb,
      tb = n.expr.attrHandle;
  n.fn.extend({
    attr: function attr(a, b) {
      return M(this, n.attr, a, b, arguments.length > 1);
    },
    removeAttr: function removeAttr(a) {
      return this.each(function () {
        n.removeAttr(this, a);
      });
    }
  }), n.extend({
    attr: function attr(a, b, c) {
      var d,
          e,
          f = a.nodeType;
      if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof(a.getAttribute) === V ? n.prop(a, b, c) : (1 === f && n.isXMLDoc(a) || (b = b.toLowerCase(), d = n.attrHooks[b] || (n.expr.match.bool.test(b) ? sb : rb)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = n.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void n.removeAttr(a, b));
    },
    removeAttr: function removeAttr(a, b) {
      var c,
          d,
          e = 0,
          f = b && b.match(H);
      if (f && 1 === a.nodeType) while (c = f[e++]) {
        d = n.propFix[c] || c, n.expr.match.bool.test(c) && (a[d] = !1), a.removeAttribute(c);
      }
    },
    attrHooks: {
      type: {
        set: function set(a, b) {
          if (!k.radioValue && "radio" === b && n.nodeName(a, "input")) {
            var c = a.value;
            return a.setAttribute("type", b), c && (a.value = c), b;
          }
        }
      }
    }
  }), sb = {
    set: function set(a, b, c) {
      return b === !1 ? n.removeAttr(a, c) : a.setAttribute(c, c), c;
    }
  }, n.each(n.expr.match.bool.source.match(/\w+/g), function (a, b) {
    var c = tb[b] || n.find.attr;

    tb[b] = function (a, b, d) {
      var e, f;
      return d || (f = tb[b], tb[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, tb[b] = f), e;
    };
  });
  var ub = /^(?:input|select|textarea|button)$/i;
  n.fn.extend({
    prop: function prop(a, b) {
      return M(this, n.prop, a, b, arguments.length > 1);
    },
    removeProp: function removeProp(a) {
      return this.each(function () {
        delete this[n.propFix[a] || a];
      });
    }
  }), n.extend({
    propFix: {
      "for": "htmlFor",
      "class": "className"
    },
    prop: function prop(a, b, c) {
      var d,
          e,
          f,
          g = a.nodeType;
      if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !n.isXMLDoc(a), f && (b = n.propFix[b] || b, e = n.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
    },
    propHooks: {
      tabIndex: {
        get: function get(a) {
          return a.hasAttribute("tabindex") || ub.test(a.nodeName) || a.href ? a.tabIndex : -1;
        }
      }
    }
  }), k.optSelected || (n.propHooks.selected = {
    get: function get(a) {
      var b = a.parentNode;
      return b && b.parentNode && b.parentNode.selectedIndex, null;
    }
  }), n.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    n.propFix[this.toLowerCase()] = this;
  });
  var vb = /[\t\r\n\f]/g;
  n.fn.extend({
    addClass: function addClass(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h = "string" == typeof a && a,
          i = 0,
          j = this.length;
      if (n.isFunction(a)) return this.each(function (b) {
        n(this).addClass(a.call(this, b, this.className));
      });
      if (h) for (b = (a || "").match(H) || []; j > i; i++) {
        if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(vb, " ") : " ")) {
          f = 0;

          while (e = b[f++]) {
            d.indexOf(" " + e + " ") < 0 && (d += e + " ");
          }

          g = n.trim(d), c.className !== g && (c.className = g);
        }
      }
      return this;
    },
    removeClass: function removeClass(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h = 0 === arguments.length || "string" == typeof a && a,
          i = 0,
          j = this.length;
      if (n.isFunction(a)) return this.each(function (b) {
        n(this).removeClass(a.call(this, b, this.className));
      });
      if (h) for (b = (a || "").match(H) || []; j > i; i++) {
        if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(vb, " ") : "")) {
          f = 0;

          while (e = b[f++]) {
            while (d.indexOf(" " + e + " ") >= 0) {
              d = d.replace(" " + e + " ", " ");
            }
          }

          g = a ? n.trim(d) : "", c.className !== g && (c.className = g);
        }
      }
      return this;
    },
    toggleClass: function toggleClass(a, b) {
      var c = _typeof(a);

      return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(n.isFunction(a) ? function (c) {
        n(this).toggleClass(a.call(this, c, this.className, b), b);
      } : function () {
        if ("string" === c) {
          var b,
              d = 0,
              e = n(this),
              f = a.match(H) || [];

          while (b = f[d++]) {
            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
          }
        } else (c === V || "boolean" === c) && (this.className && O.set(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : O.get(this, "__className__") || "");
      });
    },
    hasClass: function hasClass(a) {
      for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) {
        if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(vb, " ").indexOf(b) >= 0) return !0;
      }

      return !1;
    }
  });
  var wb = /\r/g;
  n.fn.extend({
    val: function val(a) {
      var b,
          c,
          d,
          e = this[0];
      {
        if (arguments.length) return d = n.isFunction(a), this.each(function (c) {
          var e;
          1 === this.nodeType && (e = d ? a.call(this, c, n(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : n.isArray(e) && (e = n.map(e, function (a) {
            return null == a ? "" : a + "";
          })), b = n.valHooks[this.type] || n.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
        });
        if (e) return b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(wb, "") : null == c ? "" : c);
      }
    }
  }), n.extend({
    valHooks: {
      option: {
        get: function get(a) {
          var b = n.find.attr(a, "value");
          return null != b ? b : n.trim(n.text(a));
        }
      },
      select: {
        get: function get(a) {
          for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {
            if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && n.nodeName(c.parentNode, "optgroup"))) {
              if (b = n(c).val(), f) return b;
              g.push(b);
            }
          }

          return g;
        },
        set: function set(a, b) {
          var c,
              d,
              e = a.options,
              f = n.makeArray(b),
              g = e.length;

          while (g--) {
            d = e[g], (d.selected = n.inArray(d.value, f) >= 0) && (c = !0);
          }

          return c || (a.selectedIndex = -1), f;
        }
      }
    }
  }), n.each(["radio", "checkbox"], function () {
    n.valHooks[this] = {
      set: function set(a, b) {
        return n.isArray(b) ? a.checked = n.inArray(n(a).val(), b) >= 0 : void 0;
      }
    }, k.checkOn || (n.valHooks[this].get = function (a) {
      return null === a.getAttribute("value") ? "on" : a.value;
    });
  }), n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {
    n.fn[b] = function (a, c) {
      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
    };
  }), n.fn.extend({
    hover: function hover(a, b) {
      return this.mouseenter(a).mouseleave(b || a);
    },
    bind: function bind(a, b, c) {
      return this.on(a, null, b, c);
    },
    unbind: function unbind(a, b) {
      return this.off(a, null, b);
    },
    delegate: function delegate(a, b, c, d) {
      return this.on(b, a, c, d);
    },
    undelegate: function undelegate(a, b, c) {
      return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
    }
  });
  var xb = n.now(),
      yb = /\?/;
  n.parseJSON = function (a) {
    return JSON.parse(a + "");
  }, n.parseXML = function (a) {
    var b, c;
    if (!a || "string" != typeof a) return null;

    try {
      c = new DOMParser(), b = c.parseFromString(a, "text/xml");
    } catch (d) {
      b = void 0;
    }

    return (!b || b.getElementsByTagName("parsererror").length) && n.error("Invalid XML: " + a), b;
  };
  var zb,
      Ab,
      Bb = /#.*$/,
      Cb = /([?&])_=[^&]*/,
      Db = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      Eb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      Fb = /^(?:GET|HEAD)$/,
      Gb = /^\/\//,
      Hb = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
      Ib = {},
      Jb = {},
      Kb = "*/".concat("*");

  try {
    Ab = location.href;
  } catch (Lb) {
    Ab = l.createElement("a"), Ab.href = "", Ab = Ab.href;
  }

  zb = Hb.exec(Ab.toLowerCase()) || [];

  function Mb(a) {
    return function (b, c) {
      "string" != typeof b && (c = b, b = "*");
      var d,
          e = 0,
          f = b.toLowerCase().match(H) || [];
      if (n.isFunction(c)) while (d = f[e++]) {
        "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
      }
    };
  }

  function Nb(a, b, c, d) {
    var e = {},
        f = a === Jb;

    function g(h) {
      var i;
      return e[h] = !0, n.each(a[h] || [], function (a, h) {
        var j = h(b, c, d);
        return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
      }), i;
    }

    return g(b.dataTypes[0]) || !e["*"] && g("*");
  }

  function Ob(a, b) {
    var c,
        d,
        e = n.ajaxSettings.flatOptions || {};

    for (c in b) {
      void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
    }

    return d && n.extend(!0, a, d), a;
  }

  function Pb(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.contents,
        i = a.dataTypes;

    while ("*" === i[0]) {
      i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));
    }

    if (d) for (e in h) {
      if (h[e] && h[e].test(d)) {
        i.unshift(e);
        break;
      }
    }
    if (i[0] in c) f = i[0];else {
      for (e in c) {
        if (!i[0] || a.converters[e + " " + i[0]]) {
          f = e;
          break;
        }

        g || (g = e);
      }

      f = f || g;
    }
    return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
  }

  function Qb(a, b, c, d) {
    var e,
        f,
        g,
        h,
        i,
        j = {},
        k = a.dataTypes.slice();
    if (k[1]) for (g in a.converters) {
      j[g.toLowerCase()] = a.converters[g];
    }
    f = k.shift();

    while (f) {
      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {
        if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) {
          if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
            g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
            break;
          }
        }
        if (g !== !0) if (g && a["throws"]) b = g(b);else try {
          b = g(b);
        } catch (l) {
          return {
            state: "parsererror",
            error: g ? l : "No conversion from " + i + " to " + f
          };
        }
      }
    }

    return {
      state: "success",
      data: b
    };
  }

  n.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: Ab,
      type: "GET",
      isLocal: Eb.test(zb[1]),
      global: !0,
      processData: !0,
      async: !0,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      accepts: {
        "*": Kb,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      converters: {
        "* text": String,
        "text html": !0,
        "text json": n.parseJSON,
        "text xml": n.parseXML
      },
      flatOptions: {
        url: !0,
        context: !0
      }
    },
    ajaxSetup: function ajaxSetup(a, b) {
      return b ? Ob(Ob(a, n.ajaxSettings), b) : Ob(n.ajaxSettings, a);
    },
    ajaxPrefilter: Mb(Ib),
    ajaxTransport: Mb(Jb),
    ajax: function ajax(a, b) {
      "object" == _typeof(a) && (b = a, a = void 0), b = b || {};
      var c,
          d,
          e,
          f,
          g,
          h,
          i,
          j,
          k = n.ajaxSetup({}, b),
          l = k.context || k,
          m = k.context && (l.nodeType || l.jquery) ? n(l) : n.event,
          o = n.Deferred(),
          p = n.Callbacks("once memory"),
          q = k.statusCode || {},
          r = {},
          s = {},
          t = 0,
          u = "canceled",
          v = {
        readyState: 0,
        getResponseHeader: function getResponseHeader(a) {
          var b;

          if (2 === t) {
            if (!f) {
              f = {};

              while (b = Db.exec(e)) {
                f[b[1].toLowerCase()] = b[2];
              }
            }

            b = f[a.toLowerCase()];
          }

          return null == b ? null : b;
        },
        getAllResponseHeaders: function getAllResponseHeaders() {
          return 2 === t ? e : null;
        },
        setRequestHeader: function setRequestHeader(a, b) {
          var c = a.toLowerCase();
          return t || (a = s[c] = s[c] || a, r[a] = b), this;
        },
        overrideMimeType: function overrideMimeType(a) {
          return t || (k.mimeType = a), this;
        },
        statusCode: function statusCode(a) {
          var b;
          if (a) if (2 > t) for (b in a) {
            q[b] = [q[b], a[b]];
          } else v.always(a[v.status]);
          return this;
        },
        abort: function abort(a) {
          var b = a || u;
          return c && c.abort(b), x(0, b), this;
        }
      };
      if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || Ab) + "").replace(Bb, "").replace(Gb, zb[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = n.trim(k.dataType || "*").toLowerCase().match(H) || [""], null == k.crossDomain && (h = Hb.exec(k.url.toLowerCase()), k.crossDomain = !(!h || h[1] === zb[1] && h[2] === zb[2] && (h[3] || ("http:" === h[1] ? "80" : "443")) === (zb[3] || ("http:" === zb[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = n.param(k.data, k.traditional)), Nb(Ib, k, b, v), 2 === t) return v;
      i = k.global, i && 0 === n.active++ && n.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !Fb.test(k.type), d = k.url, k.hasContent || (k.data && (d = k.url += (yb.test(d) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = Cb.test(d) ? d.replace(Cb, "$1_=" + xb++) : d + (yb.test(d) ? "&" : "?") + "_=" + xb++)), k.ifModified && (n.lastModified[d] && v.setRequestHeader("If-Modified-Since", n.lastModified[d]), n.etag[d] && v.setRequestHeader("If-None-Match", n.etag[d])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Kb + "; q=0.01" : "") : k.accepts["*"]);

      for (j in k.headers) {
        v.setRequestHeader(j, k.headers[j]);
      }

      if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();
      u = "abort";

      for (j in {
        success: 1,
        error: 1,
        complete: 1
      }) {
        v[j](k[j]);
      }

      if (c = Nb(Jb, k, b, v)) {
        v.readyState = 1, i && m.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {
          v.abort("timeout");
        }, k.timeout));

        try {
          t = 1, c.send(r, x);
        } catch (w) {
          if (!(2 > t)) throw w;
          x(-1, w);
        }
      } else x(-1, "No Transport");

      function x(a, b, f, h) {
        var j,
            r,
            s,
            u,
            w,
            x = b;
        2 !== t && (t = 2, g && clearTimeout(g), c = void 0, e = h || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, f && (u = Pb(k, v, f)), u = Qb(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (n.lastModified[d] = w), w = v.getResponseHeader("etag"), w && (n.etag[d] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, i && m.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), i && (m.trigger("ajaxComplete", [v, k]), --n.active || n.event.trigger("ajaxStop")));
      }

      return v;
    },
    getJSON: function getJSON(a, b, c) {
      return n.get(a, b, c, "json");
    },
    getScript: function getScript(a, b) {
      return n.get(a, void 0, b, "script");
    }
  }), n.each(["get", "post"], function (a, b) {
    n[b] = function (a, c, d, e) {
      return n.isFunction(c) && (e = e || d, d = c, c = void 0), n.ajax({
        url: a,
        type: b,
        dataType: e,
        data: c,
        success: d
      });
    };
  }), n.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
    n.fn[b] = function (a) {
      return this.on(b, a);
    };
  }), n._evalUrl = function (a) {
    return n.ajax({
      url: a,
      type: "GET",
      dataType: "script",
      async: !1,
      global: !1,
      "throws": !0
    });
  };
  var Rb = /%20/g,
      Sb = /\[\]$/,
      Tb = /\r?\n/g,
      Ub = /^(?:submit|button|image|reset|file)$/i,
      Vb = /^(?:input|select|textarea|keygen)/i;

  function Wb(a, b, c, d) {
    var e;
    if (n.isArray(b)) n.each(b, function (b, e) {
      c || Sb.test(a) ? d(a, e) : Wb(a + "[" + ("object" == _typeof(e) ? b : "") + "]", e, c, d);
    });else if (c || "object" !== n.type(b)) d(a, b);else for (e in b) {
      Wb(a + "[" + e + "]", b[e], c, d);
    }
  }

  n.param = function (a, b) {
    var c,
        d = [],
        e = function e(a, b) {
      b = n.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);
    };

    if (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional), n.isArray(a) || a.jquery && !n.isPlainObject(a)) n.each(a, function () {
      e(this.name, this.value);
    });else for (c in a) {
      Wb(c, a[c], b, e);
    }
    return d.join("&").replace(Rb, "+");
  }, n.fn.extend({
    serialize: function serialize() {
      return n.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        var a = n.prop(this, "elements");
        return a ? n.makeArray(a) : this;
      }).filter(function () {
        var a = this.type;
        return this.name && !n(this).is(":disabled") && Vb.test(this.nodeName) && !Ub.test(a) && (this.checked || !U.test(a));
      }).map(function (a, b) {
        var c = n(this).val();
        return null == c ? null : n.isArray(c) ? n.map(c, function (a) {
          return {
            name: b.name,
            value: a.replace(Tb, "\r\n")
          };
        }) : {
          name: b.name,
          value: c.replace(Tb, "\r\n")
        };
      }).get();
    }
  }), n.ajaxSettings.xhr = function () {
    try {
      return new XMLHttpRequest();
    } catch (a) {}
  };
  var Xb = 0,
      Yb = {},
      Zb = {
    0: 200,
    1223: 204
  },
      $b = n.ajaxSettings.xhr();
  a.ActiveXObject && n(a).on("unload", function () {
    for (var a in Yb) {
      Yb[a]();
    }
  }), k.cors = !!$b && "withCredentials" in $b, k.ajax = $b = !!$b, n.ajaxTransport(function (a) {
    var _b3;

    return k.cors || $b && !a.crossDomain ? {
      send: function send(c, d) {
        var e,
            f = a.xhr(),
            g = ++Xb;
        if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {
          f[e] = a.xhrFields[e];
        }
        a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");

        for (e in c) {
          f.setRequestHeader(e, c[e]);
        }

        _b3 = function b(a) {
          return function () {
            _b3 && (delete Yb[g], _b3 = f.onload = f.onerror = null, "abort" === a ? f.abort() : "error" === a ? d(f.status, f.statusText) : d(Zb[f.status] || f.status, f.statusText, "string" == typeof f.responseText ? {
              text: f.responseText
            } : void 0, f.getAllResponseHeaders()));
          };
        }, f.onload = _b3(), f.onerror = _b3("error"), _b3 = Yb[g] = _b3("abort");

        try {
          f.send(a.hasContent && a.data || null);
        } catch (h) {
          if (_b3) throw h;
        }
      },
      abort: function abort() {
        _b3 && _b3();
      }
    } : void 0;
  }), n.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /(?:java|ecma)script/
    },
    converters: {
      "text script": function textScript(a) {
        return n.globalEval(a), a;
      }
    }
  }), n.ajaxPrefilter("script", function (a) {
    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET");
  }), n.ajaxTransport("script", function (a) {
    if (a.crossDomain) {
      var b, _c;

      return {
        send: function send(d, e) {
          b = n("<script>").prop({
            async: !0,
            charset: a.scriptCharset,
            src: a.url
          }).on("load error", _c = function c(a) {
            b.remove(), _c = null, a && e("error" === a.type ? 404 : 200, a.type);
          }), l.head.appendChild(b[0]);
        },
        abort: function abort() {
          _c && _c();
        }
      };
    }
  });
  var _b = [],
      ac = /(=)\?(?=&|$)|\?\?/;
  n.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var a = _b.pop() || n.expando + "_" + xb++;
      return this[a] = !0, a;
    }
  }), n.ajaxPrefilter("json jsonp", function (b, c, d) {
    var e,
        f,
        g,
        h = b.jsonp !== !1 && (ac.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && ac.test(b.data) && "data");
    return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = n.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(ac, "$1" + e) : b.jsonp !== !1 && (b.url += (yb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
      return g || n.error(e + " was not called"), g[0];
    }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
      g = arguments;
    }, d.always(function () {
      a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _b.push(e)), g && n.isFunction(f) && f(g[0]), g = f = void 0;
    }), "script") : void 0;
  }), n.parseHTML = function (a, b, c) {
    if (!a || "string" != typeof a) return null;
    "boolean" == typeof b && (c = b, b = !1), b = b || l;
    var d = y.exec(a),
        e = !c && [];
    return d ? [b.createElement(d[1])] : (d = n.buildFragment([a], b, e), e && e.length && n(e).remove(), n.merge([], d.childNodes));
  };
  var bc = n.fn.load;
  n.fn.load = function (a, b, c) {
    if ("string" != typeof a && bc) return bc.apply(this, arguments);
    var d,
        e,
        f,
        g = this,
        h = a.indexOf(" ");
    return h >= 0 && (d = n.trim(a.slice(h)), a = a.slice(0, h)), n.isFunction(b) ? (c = b, b = void 0) : b && "object" == _typeof(b) && (e = "POST"), g.length > 0 && n.ajax({
      url: a,
      type: e,
      dataType: "html",
      data: b
    }).done(function (a) {
      f = arguments, g.html(d ? n("<div>").append(n.parseHTML(a)).find(d) : a);
    }).complete(c && function (a, b) {
      g.each(c, f || [a.responseText, b, a]);
    }), this;
  },  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return n;
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  var cc = a.jQuery,
      dc = a.$;
  return n.noConflict = function (b) {
    return a.$ === n && (a.$ = dc), b && a.jQuery === n && (a.jQuery = cc), n;
  }, _typeof(b) === V && (a.jQuery = a.$ = n), n;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./webpack/generic/cookies.js":
/*!************************************!*\
  !*** ./webpack/generic/cookies.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Cookies
 *
 * JS Library to deal with Cookies
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-11-24
 */
var Cookies = {
  /**
   * Get
   *
   * Gets a cookie or returns the default. Set no name to get all
   *
   * @name get
   * @access public
   * @param str name				The name of the cookie to fetch
   * @param str default_			The default value to return if no cookie is found
   * @return str|null
   */
  get: function get(name, default_) {
    // Set the default if no value is passed
    if (typeof default_ == 'undefined') {
      default_ = null;
    } // Parse all cookies


    var oCookies = {};
    var lCookies = document.cookie.split(';');

    for (var i = 0; i < lCookies.length; ++i) {
      l = lCookies[i].split('=');
      oCookies[l[0]] = decodeURIComponent(l[1]);
    } // If there's no name, return all


    if (typeof name == 'undefined') {
      return oCookies;
    } // If the cookie exists return it, else return the default


    return name in oCookies ? oCookies[name] : default_;
  },

  /**
   * Remove
   *
   * Deletes a cookie
   *
   * @name remove
   * @access public
   * @param str name				The name of the cookie to delete
   * @return void
   */
  "remove": function remove(name, domain, path) {
    this.set(name, '', -1, domain, path);
  },

  /**
   * Set
   *
   * Sets a cookie
   *
   * @name set
   * @access public
   * @param str name				The name of the cookie
   * @param str value				The value to store
   * @param int expires			The number of seconds before the cookie expires
   * @param str domain			The optional domain to set the cookie on
   * @param str path				The optional path of the cookie
   * @return null
   */
  set: function set(name, value, expires, domain, path) {
    // Generate the expires time
    var d = new Date();
    d.setTime(d.getTime() + expires * 1000); // Generate the cookie string

    var s = name + '=' + encodeURIComponent(value) + '; expires=' + d.toGMTString() + ';';

    if (domain) {
      s += ' domain=' + domain + ';';
    }

    if (path) {
      s += ' path=' + path + ';';
    } // Set the cookie


    document.cookie = s;
  } // Export the module

};
module.exports = Cookies;

/***/ }),

/***/ "./webpack/generic/events.js":
/*!***********************************!*\
  !*** ./webpack/generic/events.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Events
 *
 * Event model for non UI events
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-11-24
 */
// Init the callbacks object
var _callbacks = {};
/**
 * Add
 *
 * Adds a callback to an event
 *
 * @name add
 * @access public
 * @param str event				The name of the event
 * @param function callback		The callback to attach to the event
 * @return bool
 */

function add(event, callback) {
  // If the event doesn't exist yet
  if (!(event in _callbacks)) {
    _callbacks[event] = [];
  } // Add the callback to the list


  _callbacks[event].push(callback);

  return true;
}
/**
 * Remove
 *
 * Removes a callback from a specific event
 *
 * @name remove
 * @access public
 * @param str event				The name of the event to remove the callback from
 * @param function callback		The exact same callback that was added to the event
 * @return
 */


function remove(event, callback) {
  // If the name exists in the object
  if (event in _callbacks) {
    // If the callback exists in the list
    var i = _callbacks[event].indexOf(callback);

    if (i != -1) {
      _callbacks[event].splice(i, 1);

      return true;
    }
  } // Nothing found, return false


  return false;
}
/**
 * Trigger
 *
 * Triggers a specific event and calls all callbacks associated
 *
 * @name trigger
 * @access public
 * @param str event				The name of the event to trigger
 * @return void
 */


function trigger(event) {
  // If we have callbacks for the event
  if (event in _callbacks) {
    // Check for additional arguments that will be passed to the
    //	callbacks
    var args = [];

    if (arguments.length > 1) {
      args = Array.apply(null, arguments).slice(1);
    } // If there's any callbacks, call them one by one


    for (var i in _callbacks[event]) {
      try {
        var b = _callbacks[event][i].apply(null, args);
      } catch (err) {
        console.error(event + ' callback ' + i + ' threw exception: ' + err);
        break;
      } // If we got false back, stop calling the callbacks


      if (b === false) {
        break;
      }
    }
  } // No callbacks asscocited with the event
  else {
      console.error('event value "' + event + '" returned, and no callbacks were found to handle it');
    }
} // Export the functions


module.exports = {
  "add": add,
  "remove": remove,
  "trigger": trigger
};

/***/ }),

/***/ "./webpack/generic/hash.js":
/*!*********************************!*\
  !*** ./webpack/generic/hash.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Hash
 *
 * JS Library to manage hash values
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-12-09
 */
// Generic modules
var Tools = __webpack_require__(/*! ./tools.js */ "./webpack/generic/tools.js"); // Values


var _hash = {}; // name regex

var _nameRE = /^[a-z]+$/; // Callbacks

var _watches = {};
/**
 * Check Watches
 *
 * Gets old values and compares them to existing values, if anyone is watching
 * any names that are changed, they are notified
 *
 * @name _checkWatches
 * @param object old			The old values to check again
 * @return void
 */

function _checkWatches(old) {
  // If there are watches
  if (!Tools.empty(_watches)) {
    // Check each watch
    for (var name in _watches) {
      // If the value didn't exist and now it does, or it did exist
      //	and now it doesn't, or the values don't match
      if (!(name in old) && name in _hash || name in old && !(name in _hash) || old[name] != _hash[name]) {
        // Go through each callback and call it
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _watches[name][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var f = _step.value;
            f(_hash[name] || null);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }
}
/**
 * Hash Changed
 *
 * Called when the location hash has been altered, notifies any watchers of
 * hash values changing
 *
 * @name _hashChanged
 * @return void
 */


function _hashChanged() {
  // Store the current hash
  var old = Tools.clone(_hash); // Re-parse the current location hash

  _parseHash(); // Check the watches


  _checkWatches(old);
}
/**
 * Parse Hash
 *
 * Parses the current location hash into an object
 *
 * @name _parseHash
 * @return void
 */


function _parseHash() {
  // If there's anything in the hash
  if (window.location.hash.length > 1) {
    var regex = /([^=&]+)=?([^&]*)/g;
    var field = null; // Go through each part found

    while (field = regex.exec(window.location.hash.substring(1))) {
      _hash[field[1]] = decodeURIComponent(field[2]).replace('+', ' ');
    }
  }
} // Export the module


var Hash = {
  /**
   * Init
   *
   * Initialises the internal hash by fetching and parsing the current
   * location hash
   *
   * @name init
   * @access public
   * @static
   * @return void
   */
  "init": function init() {
    // Track changes
    window.addEventListener("hashchange", _hashChanged); // Parse the current location hash

    _parseHash();
  },

  /**
   * Get
   *
   * Returns a hash name
   *
   * @name get
   * @access public
   * @static
   * @param string name		The name to look for
   * @param string default_	The value to return if the name isn't found
   * @return str
   */
  "get": function get(name, default_) {
    // If the name is invalid
    if (!_nameRE.test(name)) {
      throw 'Invalid Hash name';
    } // If there is a value for the name


    if (typeof _hash[name] != 'undefined') {
      return _hash[name];
    } // Else, return the default
    else {
        return default_;
      }
  },

  /**
   * Set
   *
   * Sets a specific name
   *
   * @name set
   * @access public
   * @static
   * @param str|object name	The name to set, or an object of name/value pairs
   * @param str value			The value to set the name to
   */
  "set": function set(name, value) {
    // If the name is not an object
    if (!Tools.isObject(name)) {
      // If the value is not defined
      if (typeof value == 'undefined') {
        value = null;
      } // JavaScript is dumb and thinks {name: value} is the same as
      //	{"name": value}


      var temp = name;
      name = {};
      name[temp] = value;
    } // Store the old hash


    var old = Tools.clone(_hash); // Go through each name

    for (var n in name) {
      // If the name is invalid
      if (!_nameRE.test(n)) {
        throw 'Invalid Hash name: ' + n;
      } // If we got null, delete the name


      if (name[n] == null) {
        delete _hash[n];
      } // Else, set the new value
      else {
          _hash[n] = name[n];
        }
    } // Check anyone watching this value


    _checkWatches(old); // Init an array to store the parts


    var hash = []; // Go through each name

    for (var k in _hash) {
      hash.push(k + '=' + encodeURIComponent(_hash[k]));
    } // Reset the window location hash


    window.location.hash = hash.join('&');
  },

  /**
   * Unwatch
   *
   * Removes a callback from the watches
   *
   * @name unwatch
   * @access public
   * @static
   * @param string name			The name of the value to stop watching
   * @param function callback		The callback to remove
   * @return void
   */
  "unwatch": function unwatch(name, callback) {
    // If we have the name
    if (name in _watches) {
      // Go through the callbacks associated with the name
      for (var i = 0; i < _watches[name].length; ++i) {
        // If we find the callback
        if (_watches[name][i] == callback) {
          // Remove it
          _watches[name].splice(i, 1);

          return;
        }
      }
    }
  },

  /**
   * Watch
   *
   * Adds a callback for a specific name which will be called if the name is
   * added, deleted, or changed
   *
   * @name watch
   * @access public
   * @static
   * @param string name			The name of the value to watch
   * @param function callback		The function to call when the value changes
   * @return void
   */
  "watch": function watch(name, callback) {
    // If we already have the name
    if (name in _watches) {
      // Go through the callbacks associated with the name
      for (var i = 0; i < _watches[name].length; ++i) {
        // If we already have the callback there's no need to store it
        if (_watches[name][i] == callback) {
          return;
        }
      }
    } // Else if we don't have any callbacks for the name
    else {
        _watches[name] = [];
      } // Add the callback to the watches


    _watches[name].push(callback);
  } // Export the module

};
module.exports = Hash;

/***/ }),

/***/ "./webpack/generic/loader.js":
/*!***********************************!*\
  !*** ./webpack/generic/loader.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Loader
 *
 * Shows a loading graphic during requests/startup
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-11-24
 */
// Keep track of the show/hide calls
//	assume the loader started on
var _count = 1; // Get the DOM element

var _el = document.getElementById('loader'); // Export the module


module.exports = {
  // Hide the loader
  hide: function hide() {
    // Decrement the count
    _count--; // If this is the last one

    if (_count == 0) {
      _el.style.display = 'none';
    }
  },
  // Show the loader
  show: function show() {
    // Increment the count
    _count++; // If this is the first one

    if (_count == 1) {
      _el.style.display = 'block';
    }
  }
};

/***/ }),

/***/ "./webpack/generic/services.js":
/*!*************************************!*\
  !*** ./webpack/generic/services.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Services
 *
 * Handles connecting to and retrieving data from services
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-11-24
 */
// External modules
var $ = __webpack_require__(/*! ../3rd/jquery.ajax.js */ "./webpack/3rd/jquery.ajax.js"); // Generic modules


var Cookies = __webpack_require__(/*! ../generic/cookies.js */ "./webpack/generic/cookies.js"); // Services domain


var _domain = ''; // Default error function

var _error = function _error() {};
/**
 * Clear
 *
 * Clears the session from local storage and cookies
 *
 * @name _clear
 * access private
 * @return void
 */


function _clear() {
  // Delete from localStorage
  delete localStorage['_session']; // Delete the cookie

  Cookies.remove('_session', '.' + window.location.hostname, '/');
}
/**
 * Request
 *
 * Handles actual requests
 *
 * @name request
 * @access private
 * @param string method			The method used to send the request
 * @param string url			The full URL to the service/noun
 * @param object data			The data to send to the service
 * @param string auth			Optional Authorization token
 * @return xhr
 */


function _request(method, url, data) {
  // Generate the ajax config
  var oConfig = {
    "beforeSend": function beforeSend(xhr, settings) {
      xhr._url = url; // If we have a session

      if ('_session' in localStorage) {
        xhr.setRequestHeader('Authorization', localStorage['_session']);
      }
    },
    "contentType": "application/json; charset=utf-8",
    "error": function error(xhr, status, _error2) {
      // If we got an Authorization error
      if (xhr.status == 401) {
        // Clear the current token
        _clear();
      } // Put the error in the console


      console.error(method + ' ' + xhr._url + ' returned: ' + _error2); // Return the xhr to the error callback

      _error(xhr);
    },
    "method": method,
    "url": url // If it's a get request

  };

  if (method == 'get') {
    if (typeof data !== 'undefined') {
      oConfig['data'] = "d=" + encodeURIComponent(JSON.stringify(data));
    }
  } // Else it's any other method
  else {
      oConfig.data = JSON.stringify(data);
    } // Make the request and return the xhr


  return $.ajax(oConfig);
}
/**
 * Store
 *
 * Stores the session token in local storage and cookies
 *
 * @name _store
 * @access private
 * @param string token
 * @return void
 */


function _store(token) {
  // Set the session in localStorage
  localStorage['_session'] = token; // Set the session in a cookie

  Cookies.set('_session', token, 86400, '.' + window.location.hostname, '/');
}
/**
 * Success
 *
 * Handles success from xhr
 *
 * @name _success
 * @access private
 * @param string res			The result from the server
 * @param string status			The status of the request
 * @param xhr xhr				The request object
 * @return void
 */


function _success(res, status, xhr) {
  // If the result is a string
  if (typeof res == 'string') {
    // Try to conver it to JSON
    try {
      res = JSON.parse(res);
    } catch (err) {
      console.error(method + ' ' + xhr._url + ' returned invalid JSON: ' + err);
      res = {
        "error": {
          "code": 0,
          "msg": err
        }
      };
    }
  }
}
/**
 * Services
 */


var Services = {
  /**
   * Init
   *
   * Initialises the Services modules
   *
   * @name init
   * @access public
   * @param string subdomain		The sub-domain services can be reached through
   * @return void
   */
  "init": function init(subdomain, error) {
    // Store the full domain name for service calls
    _domain = '//' + subdomain + '.' + window.location.hostname + '/'; // Do we have a session in storage

    if ('_session' in localStorage && localStorage['_session']) {
      this.session(localStorage['_session']);
    } // Else do we have one in a cookie
    else {
        var cookie = Cookies.get('_session');

        if (cookie) {
          this.session(cookie);
        }
      } // If an error was passed


    if (typeof error !== 'undefined') {
      _error = error;
    }
  },

  /**
   * Create
   *
   * Calls the create action on a specific service noune
   *
   * @name create
   * @access public
   * @param string service		The name of the service to call
   * @param string noun			The noun to call on the service
   * @param object data			The data to send to the service
   * @return xhr
   */
  "create": function create(service, noun, data) {
    return _request('post', _domain + service + '/' + noun, data);
  },

  /**
   * Delete
   *
   * Calls the delete action on a specific service noune
   *
   * @name delete
   * @access public
   * @param string service		The name of the service to call
   * @param string noun			The noun to call on the service
   * @param object data			The data to send to the service
   * @return xhr
   */
  "delete": function _delete(service, noun, data) {
    return _request('delete', _domain + service + '/' + noun, data);
  },

  /**
   * Read
   *
   * Calls the read action on a specific service noune
   *
   * @name read
   * @access public
   * @param string service		The name of the service to call
   * @param string noun			The noun to call on the service
   * @param object data			The data to send to the service
   * @return xhr
   */
  "read": function read(service, noun, data) {
    return _request('get', _domain + service + '/' + noun, data);
  },

  /**
   * Session
   *
   * Set or get the session token
   *
   * @name session
   * @access public
   * @param string token			The token to store
   * @return void|str
   */
  "session": function session(token) {
    // If we are setting the session
    if (typeof token !== 'undefined') {
      // If null was passed, delete the session
      if (token == null) {
        _clear();
      } // Else, set the session
      else {
          _store(token);
        }
    } // Else we are returning the session
    else {
        return '_session' in localStorage ? localStorage['_session'] : '';
      }
  },

  /**
   * Update
   *
   * Calls the update action on a specific service noune
   *
   * @name update
   * @access public
   * @param string service		The name of the service to call
   * @param string noun			The noun to call on the service
   * @param object data			The data to send to the service
   * @return xhr
   */
  "update": function update(service, noun, data) {
    return _request('put', _domain + service + '/' + noun, data);
  }
}; // Export the module

module.exports = Services;

/***/ }),

/***/ "./webpack/generic/tools.js":
/*!**********************************!*\
  !*** ./webpack/generic/tools.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Tools
 *
 * Useful functions that belong to any specific module
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-11-25
 */

/**
 * Tools
 */
var Tools = {
  /**
   * Array Find Index
   *
   * Finds a specific object in an array based on key name and value and
   * returns its index
   *
   * @name afindi
   * @param array a				The value to look through
   * @param str k					The name of the key to check
   * @param mixed v				The value to check against
   * @return object
   */
  afindi: function afindi(a, k, v) {
    for (var i = 0; i < a.length; ++i) {
      if (a[i][k] == v) {
        return i;
      }
    }

    return -1;
  },

  /**
   * Array Find Object
   *
   * Finds a specific object in an array based on key name and value and
   * returns it
   *
   * @name afindo
   * @param array a				The value to look through
   * @param str k					The name of the key to check
   * @param mixed v				The value to check against
   * @return object
   */
  afindo: function afindo(a, k, v) {
    for (var i = 0; i < a.length; ++i) {
      if (a[i][k] == v) {
        return a[i];
      }
    }

    return null;
  },

  /**
   * Clone
   *
   * Deep clone any type of object, returning a new one
   *
   * @name clone
   * @param mixed o				The variable to clone
   * @return mixed
   */
  clone: function clone(o) {
    // New var
    var n = null; // If it's an array

    if (Array.isArray()) {
      n = [];

      for (var i in o) {
        n.push(Tools.clone(o[k]));
      }
    } // Else if the value is an object
    else if (Tools.isObject(o)) {
        n = {};

        for (var k in o) {
          n[k] = Tools.clone(o[k]);
        }
      } // Else, copy as is
      else {
          n = o;
        } // Return the new var


    return n;
  },

  /**
   * Compare
   *
   * Compares two values of any type to see if they contain the same
   * data or not
   *
   * @name compare
   * @access public
   * @param mixed v1				The first value
   * @param mixed v2				The second value
   * @return bool
   */
  compare: function compare(v1, v2) {
    // If they're both arrays
    if (Array.isArray(v1) && Array.isArray(v2)) {
      // If they don't have the same length
      if (v1.length != v2.length) {
        return false;
      } // Compare the values


      for (var i = 0; i < v1.length; ++i) {
        if (!Tools.compare(v1[i], v2[i])) {
          return false;
        }
      }
    } // Else if they're both objects
    else if (Tools.isObject(v1) && Tools.isObject(v2)) {
        // If they don't have the same keys
        if (!Tools.compare(Object.keys(v1).sort(), Object.keys(v2).sort())) {
          return false;
        } // Compare each key


        for (var k in v1) {
          if (!Tools.compare(v1[k], v2[k])) {
            return false;
          }
        }
      } // Else, compare as is
      else {
          if (v1 !== v2) {
            return false;
          }
        } // Return equal


    return true;
  },

  /**
   * Empty
   *
   * Returns true if the value type is empty
   *
   * @name empty
   * @access public
   * @param mixed m				The value to check, can be object, array, string, etc
   * @return bool
   */
  empty: function empty(m) {
    // If it's an object
    if (Tools.isObject(m)) {
      for (var p in m) {
        return false;
      }

      return true;
    } // Else if it's an array or a string
    else if (Array.isArray(m) || typeof m == 'string') {
        return m.length > 0 ? true : false;
      } // Else
      else {
          // If it's null or undefined
          if (typeof m == 'undefined' || m == null) {
            return true;
          } // Else return false


          return false;
        }
  },

  /**
   * Is Decimal
   *
   * Returns true if the variable is a number
   *
   * @name isDecimal
   * @access public
   * @param mixed m				The variable to test
   * @return bool
   */
  isDecimal: function isDecimal(m) {
    return typeof m == 'number';
  },

  /**
   * Is Integer
   *
   * Returns true if the variable is a true integer
   *
   * @name isInteger
   * @access public
   * @param mixed m				The variable to test
   * @return bool
   */
  isInteger: function isInteger(m) {
    return m === +m && m === (m | 0);
  },

  /**
   * Is Object
   *
   * Returns true if the variable is a true object
   *
   * @name isObject
   * @access public
   * @param mixed m				The variable to test
   * @return bool
   */
  isObject: function isObject(m) {
    if (m === null) return false;
    if (_typeof(m) != 'object') return false;
    if (Array.isArray(m)) return false;
    return true;
  },

  /**
   * Object Map
   *
   * Works like map for arrays, but iterates over an object
   *
   * @name omap
   * @param {object} o			The object to map
   * @param {Function} callback	The function to call each iteration
   * @return array
   */
  omap: function omap(o, callback) {
    var ret = [];

    for (var k in o) {
      ret.push(callback(o[k], k));
    }

    return ret;
  },

  /**
   * UUID v4
   *
   * Returns a psuedo random string in UUID format (NOT ACTUALLY A UUID)
   *
   * @name uuidv4
   * @return str
   */
  uuidv4: function uuidv4() {
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
      return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
    });
  } // Export the module

};
module.exports = Tools;

/***/ }),

/***/ "./webpack/generic/websocket.js":
/*!**************************************!*\
  !*** ./webpack/generic/websocket.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Websocket
 *
 * Simplifies using a websocket
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2017-05-17
 */
// Export the function
module.exports = function (url, conf) {
  // If we can't handle websockets
  if (!('WebSocket' in window)) {
    console.error('websocket: WebSockets not supported');
    return false;
  } // If conf is not defined


  if (typeof conf == 'undefined') {
    conf = {};
  } // Else, if it's not an object, we have a problem
  else if (_typeof(conf) != 'object') {
      console.error('websocket: second argument must be an object');
      return false;
    } // Create the WebSocket


  var oSock = new WebSocket(url); // Add the URL to the instance

  oSock.url = url; // Set the open callback

  oSock.onopen = function () {
    // If an open callback is set
    if ('open' in conf) {
      conf['open'](oSock);
    } // Else, just log the event
    else {
        console.log('websocket: opened');
      }
  }; // Set the message callback


  oSock.onmessage = function (ev) {
    // If a message callback is set
    if ('message' in conf) {
      conf['message'](oSock, ev);
    } // Else, just log the event
    else {
        console.log('websocket: message received, "' + ev.data + '"');
      }
  }; // Set the error callback


  oSock.onerror = function (ev) {
    // If an error callback is set
    if ('error' in conf) {
      conf['error'](oSock, ev);
    } // Else, just log the event
    else {
        console.log('websocket: error, "' + JSON.stringify(ev) + '"');
      }
  }; // Set the close callback


  oSock.onclose = function () {
    // If a close callback is set
    if ('close' in conf) {
      conf['close'](oSock);
    } // Else, just log the event
    else {
        console.log('websocket: closed');
      }
  }; // Return the socket


  return oSock;
};

/***/ }),

/***/ "./webpack/index.js":
/*!**************************!*\
  !*** ./webpack/index.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generic
var Events = __webpack_require__(/*! ./generic/events.js */ "./webpack/generic/events.js");

var Loader = __webpack_require__(/*! ./generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ./generic/services.js */ "./webpack/generic/services.js"); // Site specific


var Requests = __webpack_require__(/*! ./requests.js */ "./webpack/requests.js"); // Components


var Site = __webpack_require__(/*! ./react/site.jsx */ "./webpack/react/site.jsx");

(function () {
  // Render the LoginComponent
  ReactDOM.render(React.createElement(Site, {}), document.getElementById('react')); // Init the requests

  Requests.init(); // Init the services

  Services.init("services", function (xhr) {
    // If we got a 401, let everyone know we signed out
    if (xhr.status == 401) {
      Events.trigger('error', 'You have been signed out!');
      Events.trigger('signout');
    }
  }); // If we have a session, fetch the thrower

  if (Services.session()) {
    Loader.show();
    Services.read('auth', 'session', {}).done(function (res) {
      Events.trigger('signin', res.data);
    }).always(function () {
      Loader.hide();
    });
  } // Hide the loader


  Loader.hide(); // Make Events available from console

  window.Events = Events;
})(); // Export


module.exports = null;

/***/ }),

/***/ "./webpack/react/base/forms.jsx":
/*!**************************************!*\
  !*** ./webpack/react/base/forms.jsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Forms Module
 *
 * Classes and functions used by all forms
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @create 2018-12-08
 */
// Error class define
var ERROR_CLASS = 'error';
/**
 * Add Class
 *
 * Adds the error class name to an element
 *
 * @name _addClass
 * @access private
 * @param Element el	The element to remove the class from
 */

function _addClass(el) {
  if (!el.className) {
    el.className = ERROR_CLASS;
  } else {
    var names = el.className.split(' ');

    if (names.indexOf(ERROR_CLASS) == -1) {
      names.push(ERROR_CLASS);
      el.className = names.join(' ');
    }
  }
}
/**
 * Remove Class
 *
 * Removes the error class name from an element
 *
 * @name _removeClass
 * @access private
 * @param Element el	The element to remove the class from
 * @return void
 */


function _removeClass(el) {
  if (el.className.includes(ERROR_CLASS)) {
    var names = el.className.split(' ');
    names.splice(names.indexOf(ERROR_CLASS), 1);
    el.className = names.join(' ');
  }
} // Create the Base Node Component


var _BaseNode =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(_BaseNode, _React$PureComponent);

  function _BaseNode(props) {
    _classCallCheck(this, _BaseNode);

    // Call the parent
    return _possibleConstructorReturn(this, _getPrototypeOf(_BaseNode).call(this, props));
  }

  _createClass(_BaseNode, [{
    key: "errors",
    value: function errors(_errors) {
      for (var k in _errors) {
        if (this.refs[k].errors) {
          this.refs[k].errors(_errors[k]);
        } else {
          _addClass(this.refs[k]);
        }
      }
    }
  }]);

  return _BaseNode;
}(React.PureComponent); // Create the Array Form Component


var ArrayNode =
/*#__PURE__*/
function (_BaseNode2) {
  _inherits(ArrayNode, _BaseNode2);

  function ArrayNode(props) {
    _classCallCheck(this, ArrayNode);

    // Call the parent
    return _possibleConstructorReturn(this, _getPrototypeOf(ArrayNode).call(this, props));
  }

  _createClass(ArrayNode, [{
    key: "value",
    get: function get() {
      // Init the return
      var value = []; // Go through all refs

      for (var r in this.refs) {
        if (this.refs[r].type && this.refs[r].type == 'checkbox') {
          value.push(this.refs[r].checked);
        } else {
          value.push(this.refs[r].value);
        }
      } // Return the values


      return value;
    }
  }]);

  return ArrayNode;
}(_BaseNode);

var Node =
/*#__PURE__*/
function (_React$PureComponent2) {
  _inherits(Node, _React$PureComponent2);

  function Node(props) {
    _classCallCheck(this, Node);

    // Call the parent
    return _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, props));
  }

  _createClass(Node, [{
    key: "errors",
    value: function errors(msg) {
      if (this.refs.el.errors) {
        this.refs.el.errors(msg);
      } else {
        _addClass(this.refs.el);
      }
    }
  }, {
    key: "value",
    get: function get() {
      return this.refs.el.value;
    },
    set: function set(v) {
      this.refs.el.value = v;

      if (this.valueSet) {
        this.valueSet();
      }
    }
  }]);

  return Node;
}(React.PureComponent); // Create the base Component


var Parent =
/*#__PURE__*/
function (_BaseNode3) {
  _inherits(Parent, _BaseNode3);

  function Parent(props) {
    _classCallCheck(this, Parent);

    // Call the parent
    return _possibleConstructorReturn(this, _getPrototypeOf(Parent).call(this, props));
  }

  _createClass(Parent, [{
    key: "value",
    get: function get() {
      // Init the return
      var value = {}; // Go through all refs

      for (var r in this.refs) {
        if (this.refs[r].type && this.refs[r].type == 'checkbox') {
          value[r] = this.refs[r].checked;
        } else {
          value[r] = this.refs[r].value;
        }
      } // Return the value


      return value;
    }
  }]);

  return Parent;
}(_BaseNode); // Export the module


module.exports = {
  ArrayNode: ArrayNode,
  Node: Node,
  Parent: Parent,
  errorAdd: _addClass,
  errorRemove: _removeClass,
  errorFocus: function errorFocus(ev) {
    // If the special elements prop is set
    if (ev.elements) {
      for (var i = 0; i < ev.elements.length; ++i) {
        _removeClass(ev.elements[i]);
      }
    } // Else, assuming currentTarget
    else {
        _removeClass(ev.currentTarget);
      }
  }
};

/***/ }),

/***/ "./webpack/react/games.jsx":
/*!*********************************!*\
  !*** ./webpack/react/games.jsx ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Games
 *
 * Displays the appropriate games based on what org mode we're in
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-23
 */
// Generic modules
var Hash = __webpack_require__(/*! ../generic/hash.js */ "./webpack/generic/hash.js"); // Site components


var Natf = __webpack_require__(/*! ./natf/games.jsx */ "./webpack/react/natf/games.jsx"); // Games component


var Games =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Games, _React$Component);

  function Games(props) {
    var _this;

    _classCallCheck(this, Games);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Games).call(this, props)); // Initialise the state

    _this.state = {
      "org": Hash.get('org', _this.props.thrower.org || 'natf')
    }; // Bind methods

    _this.orgHash = _this.orgHash.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Games, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any org hash change events
      Hash.watch('org', this.orgHash);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any org hash change events
      Hash.unwatch('org', this.orgHash);
    }
  }, {
    key: "orgHash",
    value: function orgHash(org) {
      if (org != this.state.org) {
        if (org == null) {
          org = 'natf';
        }

        this.setState({
          "org": org
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        id: "games"
      }, React.createElement("div", {
        id: "content"
      }, React.createElement("div", null, this.state.org == 'natf' && React.createElement(Natf, {
        thrower: this.props.thrower
      }), this.state.org == 'watl' && React.createElement("p", null, "WATL Games not available yet"))));
    }
  }]);

  return Games;
}(React.Component); // Export the component


module.exports = Games;

/***/ }),

/***/ "./webpack/react/generic/graph.jsx":
/*!*****************************************!*\
  !*** ./webpack/react/generic/graph.jsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Graph
 *
 * Creates a line chart
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-22
 */
// Graph component
var Graph =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Graph, _React$Component);

  function Graph(props) {
    var _this;

    _classCallCheck(this, Graph);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Graph).call(this, props)); // Initialise the state

    _this.state = {}; // Graph

    _this.graph = null;
    return _this;
  }

  _createClass(Graph, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.graph = new Chart(this.refs.graph.getContext('2d'), {
        "type": "line",
        "data": this.props.data,
        "options": {
          "layout": {
            "padding": 0
          },
          "legend": {
            "display": false
          },
          "maintainAspectRatio": false,
          "responsive": true
        }
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.graph.data = this.props.data;
      this.graph.update();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ref = _this$props.ref,
          data = _this$props.data,
          rest = _objectWithoutProperties(_this$props, ["ref", "data"]);

      return React.createElement("canvas", _extends({}, rest, {
        ref: "graph"
      }));
    }
  }]);

  return Graph;
}(React.Component); // Export the component


module.exports = Graph;

/***/ }),

/***/ "./webpack/react/generic/inputEnter.jsx":
/*!**********************************************!*\
  !*** ./webpack/react/generic/inputEnter.jsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Input Enter
 *
 * An input box that handles Enter key presses and sends them to a onEnter
 * callback
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-12-01
 */
// React Base
var Forms = __webpack_require__(/*! ../base/forms.jsx */ "./webpack/react/base/forms.jsx"); // Create the Component


var InputEnter =
/*#__PURE__*/
function (_Forms$Node) {
  _inherits(InputEnter, _Forms$Node);

  function InputEnter(props) {
    var _this;

    _classCallCheck(this, InputEnter);

    // Call the parent
    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputEnter).call(this, props)); // Store the callback

    _this.onEnter = props.onEnter;
    delete _this.props.onEnter; // Set the initial state

    _this.state = {}; // Bind functions

    _this.keyPress = _this.keyPress.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(InputEnter, [{
    key: "keyPress",
    value: function keyPress(ev) {
      // If an Enter key was pressed and the callback was set
      if (ev.key == 'Enter' && this.onEnter) {
        this.onEnter(ev.currentTarget.value);
        ev.stopPropagation();
        ev.preventDefault();
      } // If there's an onKeyPress callback


      if (this.props.onKeyPress) {
        this.props.onKeyPress(ev);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          onEnter = _this$props.onEnter,
          rest = _objectWithoutProperties(_this$props, ["onEnter"]);

      return React.createElement("input", _extends({}, rest, {
        type: "text",
        ref: "el",
        onKeyPress: this.keyPress
      }));
    }
  }]);

  return InputEnter;
}(Forms.Node); // Export the component


module.exports = InputEnter;

/***/ }),

/***/ "./webpack/react/generic/menu.jsx":
/*!****************************************!*\
  !*** ./webpack/react/generic/menu.jsx ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Menu Component
 *
 * A component to display a menu on the screen
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-11-11
 */
// Create the Menu Component
var Menu =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(Menu, _React$PureComponent);

  function Menu(props) {
    var _this;

    _classCallCheck(this, Menu);

    // Call the parent
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Menu).call(this, props)); // Set the base state

    _this.state = {
      selected: _this.props.selected
    }; // If there's no close

    if (!_this.props.onChange) {
      throw 'Menu requires onChange callback';
    } // Bind methods


    _this.itemClick = _this.itemClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Menu, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.selected != this.props.selected) {
        this.setState({
          selected: this.props.selected
        });
      }
    }
  }, {
    key: "itemClick",
    value: function itemClick(name) {
      var _this2 = this;

      this.setState({
        selected: name
      }, function () {
        _this2.props.onChange(name);
      });
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var self = this;
      return React.Children.map(this.props.children, function (child, i) {
        var status = self.state.selected == child.props.name ? 'active' : '';
        return React.cloneElement(child, {
          onClick: self.itemClick,
          className: status
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        className: this.props.className
      }, this.renderChildren());
    }
  }, {
    key: "selected",
    get: function get() {
      return this.state.selected;
    },
    set: function set(n) {
      this.setState({
        selected: n
      });
    }
  }]);

  return Menu;
}(React.PureComponent); // Create the Menu Item Component


var Item =
/*#__PURE__*/
function (_React$PureComponent2) {
  _inherits(Item, _React$PureComponent2);

  function Item(props) {
    var _this3;

    _classCallCheck(this, Item);

    // Call the parent
    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this, props)); // Set the base state

    _this3.state = {}; // If there's no name

    if (!_this3.props.name) {
      throw 'Item requires name attribute';
    } // Bind methods


    _this3.click = _this3.click.bind(_assertThisInitialized(_this3));
    return _this3;
  }

  _createClass(Item, [{
    key: "click",
    value: function click(ev) {
      ev.stopPropagation();
      ev.preventDefault();
      this.props.onClick(this.props.name);
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("span", {
        className: this.props.className,
        onClick: this.click
      }, this.props.children);
    }
  }]);

  return Item;
}(React.PureComponent); // Export components


module.exports = {
  "Menu": Menu,
  "Item": Item
};

/***/ }),

/***/ "./webpack/react/generic/messages.jsx":
/*!********************************************!*\
  !*** ./webpack/react/generic/messages.jsx ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Messages
 *
 * Shows a message with buttons to accept, dismiss, etc
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-31
 */
// Generic
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Make sure there isn't more than one Messages


var _instance = false; // Create the message component

var Message =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Message, _React$Component);

  function Message(props) {
    var _this;

    _classCallCheck(this, Message);

    // Call the parent
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this, props)); // Set the initial state

    _this.state = {}; // Bind methods

    _this.button = _this.button.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Message, [{
    key: "button",
    value: function button(ev) {
      // Call the callback associated, if it returns successful, remove the
      //	message
      if (this.props.buttons[ev.currentTarget.dataset.index].callback(this.props.id)) {
        this.props.remove(this.props.id);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement("div", {
        className: "message"
      }, React.createElement("p", null, self.props.text), React.createElement("div", {
        className: "buttons"
      }, self.props.buttons.map(function (b, i) {
        return React.createElement("button", {
          key: i,
          "data-index": i,
          onClick: self.button
        }, b.title);
      })));
    }
  }]);

  return Message;
}(React.Component); // Create the primary component


var Messages =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(Messages, _React$Component2);

  function Messages(props) {
    var _this2;

    _classCallCheck(this, Messages);

    // Call the parent
    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Messages).call(this, props)); // If we already have an instance

    if (_instance) {
      throw 'Can\'t have more than one Messages';
    }

    _instance = true; // Set the initial state

    _this2.state = {
      messages: []
    }; // Bind methods

    _this2.message = _this2.message.bind(_assertThisInitialized(_this2));
    _this2.remove = _this2.remove.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  _createClass(Messages, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any message events
      Events.add('message', this.message);
      Events.add('message_remove', this.remove);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any message events
      Events.remove('message', this.message);
      Events.remove('message_remove', this.remove);
    }
  }, {
    key: "message",
    value: function message(id, conf) {
      // Clone the messages
      var msgs = Tools.clone(this.state.messages); // Push the new message

      msgs[id] = conf; // Set the state

      this.setState({
        "messages": msgs
      });
    }
  }, {
    key: "remove",
    value: function remove(id) {
      // Clone the messages
      var msgs = Tools.clone(this.state.messages); // Remove the requested ID

      delete msgs[id]; // Set the state

      this.setState({
        "messages": msgs
      });
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement("div", {
        id: "messages"
      }, Tools.omap(this.state.messages, function (m, k) {
        return React.createElement(Message, _extends({}, m, {
          key: k,
          id: k,
          remove: self.remove
        }));
      }));
    }
  }]);

  return Messages;
}(React.Component); // Export the Component


module.exports = Messages;

/***/ }),

/***/ "./webpack/react/generic/modal.jsx":
/*!*****************************************!*\
  !*** ./webpack/react/generic/modal.jsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Model Component
 *
 * A component to display a modal box on the screen
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-11-11
 */
// Create the Component
var Modal =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(Modal, _React$PureComponent);

  function Modal(props) {
    var _this;

    _classCallCheck(this, Modal);

    // Call the parent
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props)); // If there's no close

    if (!_this.props.close) {
      throw 'Modal requires close callback';
    } // Bind methods


    _this.buttonClick = _this.buttonClick.bind(_assertThisInitialized(_this));
    _this.trapEscape = _this.trapEscape.bind(_assertThisInitialized(_this));
    return _this;
  } // If a button is pushed


  _createClass(Modal, [{
    key: "buttonClick",
    value: function buttonClick(ev) {
      // Get the button using the index
      var btn = this.props.buttons[ev.currentTarget.dataset.index]; // If there's a callback

      if (typeof btn.callback == 'function') {
        btn.callback(btn);
      } else {
        this.props.close();
      }
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      // Trap the escape key
      document.addEventListener('keydown', this.trapEscape);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop trapping the escape key
      document.removeEventListener('keydown', this.trapEscape);
    }
  }, {
    key: "render",
    value: function render() {
      // Store this
      var self = this; // Generate the styles

      var styles = {};
      if (this.props.height) styles.height = this.props.height;
      if (this.props.maxHeight) styles.maxHeight = this.props.maxHeight;
      if (this.props.maxWidth) styles.maxHeight = this.props.maxHeight;
      if (this.props.width) styles.width = this.props.width; // Return the HTML

      return React.createElement("div", {
        className: "modal"
      }, React.createElement("div", {
        className: "cell"
      }, React.createElement("div", {
        className: "container",
        style: styles
      }, React.createElement("div", {
        className: "header"
      }, React.createElement("i", {
        className: "fas fa-window-close",
        onClick: this.props.close
      }), React.createElement("span", null, this.props.title)), React.createElement("div", {
        className: "content"
      }, this.props.children), this.props.buttons && React.createElement("div", {
        className: "footer"
      }, this.props.buttons.map(function (btn, i) {
        return React.createElement("button", {
          "data-index": i,
          className: "small",
          onClick: self.buttonClick,
          disabled: btn['disabled']
        }, btn['name']);
      })))));
    } // Traps ESC key clicks so we can close the Modal window

  }, {
    key: "trapEscape",
    value: function trapEscape(ev) {
      if (ev.keyCode === 27) {
        this.props.close();
      }
    }
  }]);

  return Modal;
}(React.PureComponent); // Export the component


module.exports = Modal;

/***/ }),

/***/ "./webpack/react/generic/popups.jsx":
/*!******************************************!*\
  !*** ./webpack/react/generic/popups.jsx ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Popups
 *
 * Shows a popup of type error, success, or warning
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2018-12-08
 */
// Defines
var SUCCESS_TIMEOUT = 2000;
var ERROR_TIMEOUT = 5000;
var WARNING_TIMEOUT = 3000;
var STEP_TIMEOUT = 20;
var WIDTH_STEPS = 40;
var HEIGHT_STEPS = 20;
var MARGIN = 5; // Generic

var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Make sure there isn't more than one Popups


var _instance = false; // Create the Component

var Popups =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Popups, _React$Component);

  function Popups(props) {
    var _this;

    _classCallCheck(this, Popups);

    // Call the parent
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popups).call(this, props)); // If we already have an instance

    if (_instance) {
      throw 'Can\'t have more than one Popups';
    }

    _instance = true; // Set the initial state

    _this.state = {
      popups: [],
      timer: null
    }; // Bind methods

    _this.error = _this.error.bind(_assertThisInitialized(_this));
    _this.popup = _this.popup.bind(_assertThisInitialized(_this));
    _this.process = _this.process.bind(_assertThisInitialized(_this));
    _this.warning = _this.warning.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Popups, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any popup events
      Events.add('error', this.error);
      Events.add('popup', this.popup);
      Events.add('success', this.popup);
      Events.add('warning', this.warning);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any popup events
      Events.remove('error', this.error);
      Events.remove('popup', this.popup);
      Events.remove('success', this.popup);
      Events.remove('warning', this.warning);
    }
  }, {
    key: "error",
    value: function error(msg) {
      this.popup(msg, 'error');
    }
  }, {
    key: "process",
    value: function process() {
      // Clone the state
      var state = Tools.clone(this.state); // If we were waiting

      if (state.timer.step == 0) {
        // Start the process to hide the first popup
        state.popups[0]['l'] = MARGIN;
        state.popups[0]['r'] = MARGIN; // Start the step timeouts

        state.timer.res = setTimeout(this.process, STEP_TIMEOUT);
        state.timer.step = 1;
      } // Else we need to move the first popup off the screen
      else if (state.timer.step >= 1 && state.timer.step <= 40) {
          // Get the inner width of the screen and divide by the steps
          var step = window.innerWidth / WIDTH_STEPS; // Subtract it from the left and right

          state.popups[0]['l'] -= step;
          state.popups[0]['r'] += step; // Set the next timeout

          state.timer.res = setTimeout(this.process, STEP_TIMEOUT);
          state.timer.step += 1;
        } // Else we need to move the first popup up
        else if (state.timer.step >= 41 && state.timer.step <= 60) {
            // If we're on the first step
            if (state.timer.step == 41) {
              state.popups[0]['oh'] = this.refs["0"].offsetHeight;
              state.popups[0]['h'] = this.refs["0"].offsetHeight;
            } // Get the height of the div and divide by the steps


            var step = state.popups[0]['oh'] / HEIGHT_STEPS; // Subtract it from the current height

            state.popups[0]['h'] -= step; // Set the next timeout

            state.timer.res = setTimeout(this.process, STEP_TIMEOUT);
            state.timer.step += 1;
          } // Else we need to remove the popup completely
          else if (state.timer.step == 61) {
              // Remove the current first popup
              state.popups.splice(0, 1); // If we still have popups

              if (state.popups.length) {
                // Reset the timer steps
                state.timer.res = setTimeout(this.process, state.popups[0].timeout);
                state.timer.step = 0;
              } // Else, no more timeouts
              else {
                  state.timer = null;
                }
            } // Set the state


      this.setState(state);
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        id: "popups",
        style: {
          display: this.state.popups.length ? 'block' : 'none'
        }
      }, this.state.popups.map(function (msg, i) {
        var style = {};

        if (typeof msg.l != 'undefined') {
          style.marginLeft = msg.l + 'px';
          style.marginRight = msg.r + 'px';
        }

        if (typeof msg.h != 'undefined') {
          style.height = msg.h + 'px';
          style.padding = 0;
          style.marginBottom = 0;
          style.marginTop = 0;
        }

        return React.createElement("div", {
          key: i,
          ref: "" + i,
          className: msg.type,
          style: style
        }, React.createElement("i", {
          className: "fas fa-" + msg.icon
        }), msg.text);
      }));
    }
  }, {
    key: "popup",
    value: function popup(text, type) {
      // If there's no type
      if (typeof type == 'undefined') {
        type = 'success';
      }

      var iTimeout = 0;
      var sIcon = '';

      switch (type) {
        case 'success':
          iTimeout = SUCCESS_TIMEOUT;
          sIcon = 'check-circle';
          break;

        case 'error':
          iTimeout = ERROR_TIMEOUT;
          sIcon = 'exclamation-circle';
          console.error(text);
          break;

        case 'warning':
          iTimeout = WARNING_TIMEOUT;
          sIcon = 'exclamation-triangle';
          console.warn(text);
          break;

        default:
          throw "Invalid popup type: " + type;
      } // Clone the state


      var state = Tools.clone(this.state); // Add the popup

      state.popups.push({
        icon: sIcon,
        text: text,
        timeout: iTimeout,
        type: type
      }); // Set the timer

      if (state.timer == null) {
        state.timer = {
          res: setTimeout(this.process, iTimeout),
          step: 0
        };
      } // Set the new state


      this.setState(state);
    }
  }, {
    key: "warning",
    value: function warning(msg) {
      this.popup(msg, 'warning');
    }
  }]);

  return Popups;
}(React.Component); // Export the component


module.exports = Popups;

/***/ }),

/***/ "./webpack/react/header.jsx":
/*!**********************************!*\
  !*** ./webpack/react/header.jsx ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Header
 *
 * Manages sign in / sign out / sign up
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-21
 */
// Components
var Forms = __webpack_require__(/*! ./base/forms.jsx */ "./webpack/react/base/forms.jsx");

var Modal = __webpack_require__(/*! ./generic/modal.jsx */ "./webpack/react/generic/modal.jsx");

var Thrower = __webpack_require__(/*! ./thrower.jsx */ "./webpack/react/thrower.jsx"); // Generic modules


var Events = __webpack_require__(/*! ../generic/events.js */ "./webpack/generic/events.js");

var Hash = __webpack_require__(/*! ../generic/hash.js */ "./webpack/generic/hash.js");

var Loader = __webpack_require__(/*! ../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../generic/services.js */ "./webpack/generic/services.js"); // Site modules


var Utils = __webpack_require__(/*! ../utils.js */ "./webpack/utils.js"); // Header component


var Header =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Header, _React$Component);

  function Header(props) {
    var _this;

    _classCallCheck(this, Header);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).call(this, props)); // Initialise the state

    _this.state = {
      "account": false,
      "forgot": false,
      "modal": false,
      "org": Hash.get('org', props.thrower.org || 'natf'),
      "resend": false,
      "thrower": props.thrower || false
    }; // Bind methods

    _this.accountShow = _this.accountShow.bind(_assertThisInitialized(_this));
    _this.forgotShow = _this.forgotShow.bind(_assertThisInitialized(_this));
    _this.forgotEmailSubmit = _this.forgotEmailSubmit.bind(_assertThisInitialized(_this));
    _this.forgotPasswordSubmit = _this.forgotPasswordSubmit.bind(_assertThisInitialized(_this));
    _this.forgotResend = _this.forgotResend.bind(_assertThisInitialized(_this));
    _this.home = _this.home.bind(_assertThisInitialized(_this));
    _this.orgChange = _this.orgChange.bind(_assertThisInitialized(_this));
    _this.orgHash = _this.orgHash.bind(_assertThisInitialized(_this));
    _this.signin = _this.signin.bind(_assertThisInitialized(_this));
    _this.signinShow = _this.signinShow.bind(_assertThisInitialized(_this));
    _this.signinTrigger = _this.signinTrigger.bind(_assertThisInitialized(_this));
    _this.signout = _this.signout.bind(_assertThisInitialized(_this));
    _this.signoutTrigger = _this.signoutTrigger.bind(_assertThisInitialized(_this));
    _this.signup = _this.signup.bind(_assertThisInitialized(_this));
    _this.signupShow = _this.signupShow.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Header, [{
    key: "accountShow",
    value: function accountShow(ev) {
      this.setState({
        "account": !this.state.account
      });
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any signin/signout events
      Events.add('signin', this.signinTrigger);
      Events.add('signout', this.signoutTrigger); // Watch any org hash changes

      Hash.watch('org', this.orgHash); // If we have a forgot key in the hash

      var key = Hash.get('forgot');

      if (key) {
        this.setState({
          "forgot": key,
          "modal": "forgot"
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any signin/signout events
      Events.remove('signin', this.signinTrigger);
      Events.remove('signout', this.signoutTrigger); // Stop watch any org hash changes

      Hash.unwatch('org', this.orgHash);
    }
  }, {
    key: "forgotShow",
    value: function forgotShow(ev) {
      // Remove the forgot hash
      Hash.set('forgot', null); // Set the new state

      this.setState({
        "forgot": false,
        "modal": this.state.modal == 'forgot' ? false : 'forgot'
      });
    }
  }, {
    key: "forgotEmailSubmit",
    value: function forgotEmailSubmit(ev) {
      var _this2 = this;

      // Check the e-mail field
      var email = this.refs.forgot_email.value.trim(); // If it's missing or invalid

      if (!email) {
        Events.trigger('error', 'Please enter the e-mail address associated with your account');
        Forms.errorAdd(this.refs.forgot_email);
        return;
      } // Show loader


      Loader.show(); // Create the params

      dParams = {
        "email": email // If resend is set

      };

      if (this.state.resend) {
        dParams['regenerate'] = true;
      } // Send the email to the service


      Services.create('auth', 'passwd/forgot', dParams).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Notify
          Events.trigger('success', 'Submitted, please check your e-mail'); // Change state

          _this2.setState({
            "forgot": '',
            "resend": false
          });
        }
      }).always(function () {
        // Hide loader
        Loader.hide();
      });
    }
  }, {
    key: "forgotPasswordSubmit",
    value: function forgotPasswordSubmit(ev) {
      var _this3 = this;

      // If the key is missing
      var key = this.refs.key.value.trim();

      if (!key) {
        Events.trigger('error', 'Please enter the key you received by e-mail.');
        Forms.errorAdd(this.refs.key);
        return;
      } // If the passwords don't match


      if (this.refs.forgot_passwd.value != this.refs.forgot_repeat_passwd.value) {
        Events.trigger('error', 'Passwords do not match');
        Forms.errorAdd(this.refs.forgot_repeat_passwd);
        return;
      } // Show the loader


      Loader.show(); // Submit the key and new password to the service

      Services.update('auth', 'passwd/forgot', {
        "key": key,
        "passwd": this.refs.forgot_passwd.value
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          // If the key code is wrong
          if (res.error.code == 1203) {
            Events.trigger('error', 'Invalid key code. Either it was typed wrong, or it has expired.');
            Forms.errorAdd(_this3.refs.key);
          } // Else if the password is not strong enough
          else if (res.error.code == 1204) {
              Events.trigger('error', 'Password not strong enough');
              Forms.errorAdd(_this3.refs.forgot_passwd);
            } // Else, unknown error
            else {
                Events.trigger('error', JSON.stringify(res.error));
              }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Notify
          Events.trigger('success', 'Password successfully changed, please login.'); // Change state

          _this3.setState({
            "forgot": false,
            "modal": false
          }); // Hide the key in the hash if there is one


          Hash.set('forgot', null);
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "forgotResend",
    value: function forgotResend() {
      this.setState({
        "forgot": false,
        "resend": true
      });
    }
  }, {
    key: "home",
    value: function home() {
      Hash.set("page", null);
    }
  }, {
    key: "orgChange",
    value: function orgChange(ev) {
      this.setState({
        "org": ev.currentTarget.value
      }, function () {
        Hash.set('org', this.state.org);
      });
    }
  }, {
    key: "orgHash",
    value: function orgHash(org) {
      if (org != this.state.org) {
        this.setState({
          "org": org
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement("header", null, React.createElement("div", {
        className: "actions fright aright"
      }, React.createElement("select", {
        value: this.state.org,
        onChange: this.orgChange
      }, React.createElement("option", {
        value: "natf"
      }, "NATF"), React.createElement("option", {
        value: "watl"
      }, "WATL")), self.state.thrower ? React.createElement(React.Fragment, null, React.createElement("i", {
        className: "fas fa-user",
        title: "Account",
        onClick: self.accountShow
      }), React.createElement("i", {
        className: "fas fa-power-off",
        title: "Sign Out",
        onClick: self.signout
      })) : React.createElement(React.Fragment, null, React.createElement("i", {
        className: "fas fa-user-plus",
        title: "Create Account",
        onClick: self.signupShow
      }), React.createElement("i", {
        className: "fas fa-sign-in-alt",
        title: "Sign In",
        onClick: self.signinShow
      }))), React.createElement("img", {
        src: "//static." + window.location.hostname + "/images/logo_small.png",
        alt: "AxeGains.com",
        onClick: this.home
      }), React.createElement("div", {
        className: "subtitle"
      }, "By ", React.createElement("a", {
        href: "http://ouroboroscoding.com/",
        target: "_blank"
      }, "OuroborosCoding")), self.state.modal == 'signin' && React.createElement("div", {
        id: "signin",
        className: "form"
      }, React.createElement("p", null, React.createElement("input", {
        ref: "alias",
        type: "text",
        title: "alias",
        placeholder: "alias",
        onClick: Forms.errorFocus
      })), React.createElement("p", null, React.createElement("input", {
        ref: "passwd",
        type: "password",
        title: "password",
        placeholder: "password",
        onClick: Forms.errorFocus
      })), React.createElement("p", {
        className: "fright"
      }, React.createElement("button", {
        onClick: self.signin
      }, "sign in")), React.createElement("p", {
        style: {
          paddingTop: "5px"
        }
      }, React.createElement("span", {
        className: "link",
        onClick: self.forgotShow
      }, "Forgot Password"))), self.state.modal == 'signup' && React.createElement("div", {
        id: "signup",
        className: "form"
      }, React.createElement("p", null, React.createElement("input", {
        ref: "signup_alias",
        type: "text",
        title: "alias",
        placeholder: "alias",
        onClick: Forms.errorFocus
      })), React.createElement("p", null, React.createElement("input", {
        ref: "email",
        type: "text",
        title: "e-mail",
        placeholder: "e-mail (not required)",
        onClick: Forms.errorFocus
      })), React.createElement("p", null, React.createElement("input", {
        ref: "signup_passwd",
        type: "password",
        title: "password",
        placeholder: "password",
        onClick: Forms.errorFocus
      })), React.createElement("p", null, React.createElement("input", {
        ref: "repeat_passwd",
        type: "password",
        title: "repeat password",
        placeholder: "repeat password",
        onClick: Forms.errorFocus
      })), React.createElement("p", {
        className: "aright"
      }, React.createElement("button", {
        onClick: self.signup
      }, "sign up"))), self.state.modal == 'forgot' && React.createElement(Modal, {
        close: self.forgotShow,
        key: "forgot",
        title: "Forgot Password",
        width: "95%"
      }, self.state.forgot !== false ? React.createElement("div", {
        key: "code",
        className: "form"
      }, React.createElement("p", null, React.createElement("input", {
        ref: "key",
        type: "text",
        title: "forgot password Key",
        placeholder: "enter forgot password key",
        onFocus: Forms.errorFocus,
        autocomplete: "off",
        defaultValue: self.state.forgot
      })), React.createElement("p", null, React.createElement("input", {
        ref: "forgot_passwd",
        title: "new password",
        placeholder: "new password",
        type: "password",
        onFocus: Forms.errorFocus,
        autocomplete: "new-password"
      })), React.createElement("p", null, React.createElement("input", {
        ref: "forgot_repeat_passwd",
        title: "repeat new password",
        placeholder: "repeat new password",
        type: "password",
        onFocus: Forms.errorFocus,
        autocomplete: "repeat-password"
      })), React.createElement("p", {
        className: "fright"
      }, React.createElement("button", {
        onClick: this.forgotPasswordSubmit
      }, "Change Password")), React.createElement("p", {
        className: "fleft",
        style: {
          paddingTop: "5px"
        }
      }, React.createElement("span", {
        "class": "link",
        onClick: self.forgotResend
      }, "Resend Key"))) : React.createElement("div", {
        key: "email",
        className: "form"
      }, React.createElement("p", null, React.createElement("input", {
        ref: "forgot_email",
        type: "text",
        title: "Email",
        placeholder: "enter e-mail associated with account",
        onClick: Forms.errorFocus
      })), React.createElement("p", {
        className: "aright"
      }, React.createElement("button", {
        onClick: this.forgotEmailSubmit
      }, "Send E-mail")))), self.state.account && React.createElement(Modal, {
        close: self.accountShow,
        key: "account",
        title: "Account",
        width: "95%"
      }, React.createElement(Thrower, {
        thrower: self.state.thrower
      })));
    }
  }, {
    key: "signin",
    value: function signin(ev) {
      var _this4 = this;

      // Show loader
      Loader.show(); // Store the alias

      var alias = this.refs.alias.value; // Call the signin

      Services.create('auth', 'signin', {
        "alias": alias,
        "passwd": this.refs.passwd.value
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          var error = ' ';

          switch (res.error.code) {
            case 1001:
              // Go through each message and make the ref red
              for (var i in res.error.msg) {
                Forms.errorAdd(_this4.refs[i]);
              }

              break;

            case 1201:
              Events.trigger('error', 'Alias or password invalid');
              break;

            default:
              Events.trigger('error', JSON.stringify(res.error));
              break;
          }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Set the session with the service
          Services.session(res.data.session); // Greet thrower

          Events.trigger('success', "Welcome back to AxeGains " + alias); // Trigger the signin event

          Events.trigger('signin', res.data.thrower);
        }
      }).always(function () {
        // Hide loader
        Loader.hide();
      });
    }
  }, {
    key: "signinShow",
    value: function signinShow(ev) {
      this.setState({
        "modal": this.state.modal == 'signin' ? false : 'signin'
      });
    }
  }, {
    key: "signinTrigger",
    value: function signinTrigger(thrower) {
      // Hide any modals and set the thrower
      this.setState({
        "modal": false,
        "org": thrower.org,
        "thrower": thrower
      }, function () {
        Hash.set('org', this.state.org);
      });
    }
  }, {
    key: "signout",
    value: function signout(ev) {
      // Store this
      var self = this; // Show loader

      Loader.show(); // Call the signout

      Services.create('auth', 'signout', {}).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Reset the session
          Services.session(null); // Trigger the signout event

          Events.trigger('signout');
        }
      }).always(function () {
        // Hide loader
        Loader.hide();
      });
    }
  }, {
    key: "signoutTrigger",
    value: function signoutTrigger() {
      // Hide and modals and set the thrower to false
      this.setState({
        "modal": false,
        "thrower": false
      });
    }
  }, {
    key: "signup",
    value: function signup(ev) {
      var _this5 = this;

      // Get the alias
      var alias = this.refs.signup_alias.value.trim(); // If the alias is not long enough

      if (alias.length < 3 || alias.length > 32) {
        Forms.errorAdd(this.refs.signup_alias);
        Events.trigger('error', 'Alias must be between 3 and 32 characters');
        return;
      } // If the passwords don't match


      if (this.refs.signup_passwd.value != this.refs.repeat_passwd.value) {
        Forms.errorAdd(this.refs.repeat_passwd);
        Events.trigger('error', 'Passwords do not match');
        return;
      } // Show loader


      Loader.show(); // Init the data

      var oData = {
        "alias": alias,
        "passwd": this.refs.signup_passwd.value // If there's an e-mail

      };

      if (this.refs.email.value) {
        var email = this.refs.email.value.trim();

        if (email) {
          oData['email'] = email;
        }
      } // Call the signup


      Services.create('auth', 'signup', oData).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          var error = ' ';

          switch (res.error.code) {
            case 1001:
              // Go through each message and make the ref red
              for (var i in res.error.msg) {
                if (i == 'alias') {
                  i = 'signup_alias';
                } else if (i == 'passwd') {
                  i = 'signup_passwd';
                }

                Forms.errorAdd(_this5.refs[i]);
              }

              break;

            case 1200:
              Forms.errorAdd(_this5.refs['signup_alias']);
              Events.trigger('error', 'Alias is already in use');
              break;

            case 1204:
              Forms.errorAdd(_this5.refs['signup_passwd']);
              Events.trigger('error', 'Password not strong enough');
              break;

            case 1206:
              Forms.errorAdd(_this5.refs['email']);
              Events.trigger('error', 'E-mail already in use');
              break;

            default:
              Events.trigger('error', JSON.stringify(res.error));
              break;
          }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Set the session with the service
          Services.session(res.data.session); // Revert to sign in and show success message

          _this5.setState({
            "modal": false,
            "thrower": res.data.thrower
          }); // Greet thrower


          Events.trigger('success', "Welcome to AxeGains " + res.data.thrower.alias); // Trigger the signin event

          Events.trigger('signin', res.data.thrower);
        }
      }).always(function () {
        // Hide loader
        Loader.hide();
      });
    }
  }, {
    key: "signupShow",
    value: function signupShow(ev) {
      this.setState({
        "modal": this.state.modal == 'signup' ? false : 'signup'
      });
    }
  }]);

  return Header;
}(React.Component); // Export the component


module.exports = Header;

/***/ }),

/***/ "./webpack/react/match.jsx":
/*!*********************************!*\
  !*** ./webpack/react/match.jsx ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Match
 *
 * Displays the appropriate match based on what org mode we're in
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-26
 */
// Generic modules
var Hash = __webpack_require__(/*! ../generic/hash.js */ "./webpack/generic/hash.js"); // Site components


var Natf = __webpack_require__(/*! ./natf/match.jsx */ "./webpack/react/natf/match.jsx");

var Watl = __webpack_require__(/*! ./watl/match.jsx */ "./webpack/react/watl/match.jsx"); // Match component


var Match =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Match, _React$Component);

  function Match(props) {
    var _this;

    _classCallCheck(this, Match);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Match).call(this, props)); // Initialise the state

    _this.state = {
      "org": Hash.get('org', _this.props.thrower.org || 'natf')
    }; // Bind methods

    _this.orgHash = _this.orgHash.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Match, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any org hash change events
      Hash.watch('org', this.orgHash);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any org hash change events
      Hash.unwatch('org', this.orgHash);
    }
  }, {
    key: "orgHash",
    value: function orgHash(org) {
      if (org != this.state.org) {
        if (org == null) {
          org = 'natf';
        }

        this.setState({
          "org": org
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        id: "match"
      }, React.createElement("div", {
        id: "content"
      }, React.createElement("div", null, this.state.org == 'natf' && React.createElement(Natf, {
        thrower: this.props.thrower
      }), this.state.org == 'watl' && React.createElement(Watl, {
        thrower: this.props.thrower
      }))));
    }
  }]);

  return Match;
}(React.Component); // Export the component


module.exports = Match;

/***/ }),

/***/ "./webpack/react/natf/board.jsx":
/*!**************************************!*\
  !*** ./webpack/react/natf/board.jsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Board
 *
 * Manages a standard NATF board
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-19
 */
// Defines
var ATW = ['L1', 'L3', 'BE', 'R3', 'R1', 'C']; // Board component

var Board =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Board, _React$Component);

  function Board(props) {
    var _this;

    _classCallCheck(this, Board);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // Initialise the state

    _this.state = {
      "atw": props.atw ? 1 : false,
      "clutchMode": props.clutchMode,
      "selected": props.clutchMode == 'expected'
    }; // Bind methods

    _this.atwClick = _this.atwClick.bind(_assertThisInitialized(_this));
    _this.clutchClick = _this.clutchClick.bind(_assertThisInitialized(_this));
    _this.dropClick = _this.dropClick.bind(_assertThisInitialized(_this));
    _this.pointClick = _this.pointClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Board, [{
    key: "atw",
    value: function atw(val) {
      // If we got a string, set the next value
      if (typeof val == 'string') {
        val = ATW.indexOf(val) + 2;

        if (val == 7) {
          val = 1;
        }
      } // Else if we got a negative, add it to the current value
      else if (val < 0) {
          val = this.state.atw + val;
        } // Set the state


      this.setState({
        "atw": val
      });
    }
  }, {
    key: "atwClick",
    value: function atwClick(ev) {
      // Stop propagation no matter what
      ev.stopPropagation(); // Get the value

      var value = ev.currentTarget.dataset.value; // Send out the value

      this.props.onATW(value); // Set ATW mode to the next value

      var atw = this.state.atw + 1; // If it's 7, loop around

      if (atw == 7) {
        atw = 1;
      } // Set the state


      this.setState({
        "atw": atw
      });
    }
  }, {
    key: "clutchClick",
    value: function clutchClick(ev) {
      // Stop propagation no matter what
      ev.stopPropagation(); // If clutches are not allowed

      if (this.state.clutchMode == 'none') {
        // Store the current target
        var target = ev.currentTarget; // Get the class name

        var className = target.className; // Set the invalid class

        target.className = className + ' invalid'; // And set a timeout to turn it off

        setTimeout(function () {
          target.className = className;
        }, 500); // Don't count the click

        return;
      } else {
        if (this.state.selected) {
          if (this.props.onPoints(true, 7) !== false) {
            this.resetClutch();
          }
        } else {
          this.setState({
            "selected": true
          });
        }
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      // If clutch mode changed
      if (prevProps.clutchMode != this.props.clutchMode) {
        this.clutchMode = this.props.clutchMode;
      }
    }
  }, {
    key: "dropClick",
    value: function dropClick(ev) {
      // Stop propagation no matter what
      ev.stopPropagation(); // Init the accepted flag

      var accepted = true; // Store the current target

      var target = ev.currentTarget; // If we're in around the world

      if (this.state.atw) {
        this.props.onATW("d");
      } // Else we're in regular mode
      else {
          // Send out the drop
          accepted = this.props.onPoints(this.state.selected, 'd');
        } // If the drop was not rejected


      if (accepted !== false) {
        // De-select the clutch if there's one selected
        if (this.state.selected) {
          this.resetClutch();
        } // Turn on the active flag


        target.className = 'drop active'; // And set a timeout to turn it off

        setTimeout(function () {
          target.className = 'drop';
        }, 500);
      }
    }
  }, {
    key: "resetClutch",
    value: function resetClutch() {
      // If the mode is selected
      if (this.state.clutchMode == 'select') {
        this.setState({
          "selected": false
        });
      }
    }
  }, {
    key: "pointClick",
    value: function pointClick(ev) {
      // Stop propagation no matter what
      ev.stopPropagation(); // Init the accepted flag

      var accepted = true; // Store the current target

      var target = ev.currentTarget; // Get the class names

      var classNames = target.className.split(' '); // If we're in around the world

      if (this.state.atw) {
        this.props.onATW("0");
      } // Else we're in regular mode
      else {
          // If it's already active, do nothing
          if (classNames[1] && classNames[1] == 'active') {
            return;
          } // If there's a clutch selected


          var accepted = true;

          if (this.state.selected) {
            accepted = this.props.onPoints(true, 0);

            if (accepted !== false) {
              this.resetClutch();
            }
          } else {
            accepted = this.props.onPoints(false, parseInt(target.dataset.value));
          }
        } // If the points were not rejected


      if (accepted !== false) {
        // Turn on the active flag
        target.className = classNames[0] + ' active'; // And set a timeout to turn it off

        setTimeout(function () {
          target.className = classNames[0];
        }, 500);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        className: "board",
        "data-value": 0,
        onClick: this.pointClick
      }, React.createElement("div", {
        className: "clutch left" + (this.state.selected ? ' selected' : ''),
        onClick: this.clutchClick
      }, this.state.atw == 6 && React.createElement("div", {
        className: "atw",
        "data-value": "C",
        onClick: this.atwClick
      })), React.createElement("div", {
        className: "drop",
        onClick: this.dropClick
      }, "DROP"), React.createElement("div", {
        className: "clutch right" + (this.state.selected ? ' selected' : ''),
        onClick: this.clutchClick
      }, this.state.atw == 6 && React.createElement("div", {
        className: "atw",
        "data-value": "C",
        onClick: this.atwClick
      })), React.createElement("div", {
        className: "one",
        "data-value": 1,
        onClick: this.pointClick
      }, this.state.atw == 1 && React.createElement("div", {
        className: "left atw",
        "data-value": "L1",
        onClick: this.atwClick
      }), this.state.atw == 5 && React.createElement("div", {
        className: "right atw",
        "data-value": "R1",
        onClick: this.atwClick
      }), React.createElement("div", {
        className: "three",
        "data-value": 3,
        onClick: this.pointClick
      }, this.state.atw == 2 && React.createElement("div", {
        className: "left atw",
        "data-value": "L3",
        onClick: this.atwClick
      }), this.state.atw == 4 && React.createElement("div", {
        className: "right atw",
        "data-value": "R3",
        onClick: this.atwClick
      }), React.createElement("div", {
        className: "five",
        "data-value": 5,
        onClick: this.pointClick
      }, this.state.atw == 3 && React.createElement("div", {
        className: "atw",
        "data-value": "BE",
        onClick: this.atwClick
      })))));
    }
  }, {
    key: "clutchMode",
    set: function set(mode) {
      // Figure out the selected value
      var selected = null;

      switch (mode) {
        case 'none':
          selected = false;
          break;

        case 'expected':
          selected = true;
          break;

        case 'select':
          selected = this.state.selected;
          break;
      } // Set the new state


      this.setState({
        "clutchMode": mode,
        "selected": selected
      });
    }
  }]);

  return Board;
}(React.Component); // Export the component


module.exports = Board;

/***/ }),

/***/ "./webpack/react/natf/games.jsx":
/*!**************************************!*\
  !*** ./webpack/react/natf/games.jsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Games
 *
 * Fetchs and displays NATF games
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-23
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Hash = __webpack_require__(/*! ../../generic/hash.js */ "./webpack/generic/hash.js"); // Generic components


var _require = __webpack_require__(/*! ../generic/menu.jsx */ "./webpack/react/generic/menu.jsx"),
    Menu = _require.Menu,
    Item = _require.Item; // Games components


var ATW = __webpack_require__(/*! ./gamesATW.jsx */ "./webpack/react/natf/gamesATW.jsx"); // Games component


var Games =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Games, _React$Component);

  function Games(props) {
    var _this;

    _classCallCheck(this, Games);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Games).call(this, props)); // Initialise the state

    _this.state = {
      "which": Hash.get('which', 'atw')
    }; // Bind methods

    _this.whichChange = _this.whichChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Games, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any which hash change events
      Hash.watch('which', this.whichChange);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any which hash change events
      Hash.unwatch('which', this.whichChange); // Remove the which from the hash

      Hash.set('which', null);
    }
  }, {
    key: "whichChange",
    value: function whichChange(which) {
      Hash.set('which', which);
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement(React.Fragment, null, React.createElement(Menu, {
        className: "menu secondary",
        selected: self.state.which,
        onChange: self.whichChange
      }, React.createElement(Item, {
        name: "atw"
      }, "Around The World")), React.createElement("div", {
        id: "content"
      }, React.createElement("div", {
        className: "natf"
      }, self.state.which == 'atw' && React.createElement(ATW, {
        thrower: self.props.thrower
      }))));
    }
  }, {
    key: "whichChange",
    value: function whichChange(which) {
      if (which != this.state.which) {
        if (which == null) {
          which = 'atw';
        }

        this.setState({
          "which": which
        });
      }
    }
  }]);

  return Games;
}(React.Component); // Export the component


module.exports = Games;

/***/ }),

/***/ "./webpack/react/natf/gamesATW.jsx":
/*!*****************************************!*\
  !*** ./webpack/react/natf/gamesATW.jsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Games: Around The World
 *
 * NATF's Around The World Game
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-23
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js"); // Generic components


var Modal = __webpack_require__(/*! ../generic/modal.jsx */ "./webpack/react/generic/modal.jsx"); // Components


var Board = __webpack_require__(/*! ./board.jsx */ "./webpack/react/natf/board.jsx"); // ATW component


var ATW =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ATW, _React$Component);

  function ATW(props) {
    var _this;

    _classCallCheck(this, ATW);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ATW).call(this, props)); // Initialise the state

    _this.state = {
      "overwrite": false,
      "showThrows": false,
      "throws": []
    }; // Bind methods

    _this.atw = _this.atw.bind(_assertThisInitialized(_this));
    _this.overwrite = _this.overwrite.bind(_assertThisInitialized(_this));
    _this.reset = _this.reset.bind(_assertThisInitialized(_this));
    _this.throwsHide = _this.throwsHide.bind(_assertThisInitialized(_this));
    _this.throwsShow = _this.throwsShow.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ATW, [{
    key: "atw",
    value: function atw(value) {
      // Init the new state
      var state = {
        "overwrite": false,
        "throws": this.state["throws"]
      }; // If the overwrite flag is set

      if (this.state.overwrite) {
        // Remove the last item
        state["throws"].pop();
      } // Add to the points list


      state["throws"].push(value); // Set the state

      this.setState(state);
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      // If we have data in local storage
      if ('natf_atw' in localStorage) {
        var new_state = JSON.parse(localStorage['natf_atw']);
        this.setState(new_state, function () {
          // Get the last value that's not a 0
          for (var i = this.state["throws"].length - 1; i >= 0; --i) {
            if (this.state["throws"][i] != '0') {
              this.refs.board.atw(this.state["throws"][i]);
              return;
            }
          } // Or else reset the ATW


          this.refs.board.atw(1);
        });
        delete localStorage['natf_atw'];
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // If we have throws, store them in local storage
      if (this.state["throws"].length) {
        localStorage['natf_atw'] = JSON.stringify(this.state);
      }
    }
  }, {
    key: "overwrite",
    value: function overwrite() {
      // New state
      var state = {
        "overwrite": true // If the last throw was some form of ATW

      };

      if (this.state["throws"][this.state["throws"].length - 1] != "0") {
        this.refs.board.atw(-1);
      } // Set the state


      this.setState(state);
    }
  }, {
    key: "render",
    value: function render() {
      var self = this; // If we have throws

      if (this.state["throws"].length) {
        // Init the last index
        var last = 28; // If we have less than 29

        if (this.state["throws"].length < 29) {
          last = this.state["throws"].length - 1;
        }
      }

      return React.createElement("div", {
        className: "atw"
      }, React.createElement(Board, {
        ref: "board",
        clutchMode: "none",
        atw: true,
        onATW: this.atw
      }), self.state["throws"].length > 0 && React.createElement(React.Fragment, null, React.createElement("div", {
        className: "points"
      }, self.state["throws"].length > 29 && React.createElement("span", {
        key: -1,
        className: "link bold",
        onClick: self.throwsShow
      }, "..."), self.state["throws"].slice(-29).map(function (p, i) {
        if (i == last) {
          return React.createElement("span", {
            key: i,
            className: "last " + (self.state.overwrite ? 'overwrite' : ''),
            onClick: self.overwrite
          }, p);
        } else {
          return React.createElement("span", {
            key: i
          }, p);
        }
      })), React.createElement("div", {
        className: "reset fright",
        onClick: self.reset
      }, "Reset"), self.state.showThrows && React.createElement(Modal, {
        title: "All Throws",
        close: self.throwsHide
      }, React.createElement("div", {
        className: "allPoints"
      }, self.state["throws"].map(function (p, i) {
        return React.createElement("span", {
          key: i
        }, p);
      })))));
    }
  }, {
    key: "reset",
    value: function reset() {
      // Init the reset flag
      var reset = true; // If there's throws

      if (this.state["throws"].length) {
        // Update the flag based on the user's response
        reset = confirm('Are you sure you want to reset Around The World?');
      } // If we can reset


      if (reset) {
        this.setState({
          "overwrite": false,
          "showThrows": false,
          "throws": []
        }); // Reset the board

        this.refs.board.atw(1);
      }
    }
  }, {
    key: "throwsHide",
    value: function throwsHide() {
      this.setState({
        "showThrows": false
      });
    }
  }, {
    key: "throwsShow",
    value: function throwsShow() {
      this.setState({
        "showThrows": true
      });
    }
  }]);

  return ATW;
}(React.Component); // Export the component


module.exports = ATW;

/***/ }),

/***/ "./webpack/react/natf/match.jsx":
/*!**************************************!*\
  !*** ./webpack/react/natf/match.jsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Match
 *
 * Manages creating and playing a standard NATF match
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-26
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Hash = __webpack_require__(/*! ../../generic/hash.js */ "./webpack/generic/hash.js");

var Loader = __webpack_require__(/*! ../../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../../generic/services.js */ "./webpack/generic/services.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Site modules


var TwoWay = __webpack_require__(/*! ../../twoway.js */ "./webpack/twoway.js");

var Utils = __webpack_require__(/*! ../../utils.js */ "./webpack/utils.js"); // React components


var Board = __webpack_require__(/*! ./board.jsx */ "./webpack/react/natf/board.jsx");

var Opponent = __webpack_require__(/*! ../opponent.jsx */ "./webpack/react/opponent.jsx"); // Match Component


var Match =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Match, _React$Component);

  function Match(props) {
    var _this;

    _classCallCheck(this, Match);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Match).call(this, props)); // Initialise the state

    _this.state = {
      "alias": '',
      "bigaxe": false,
      "existing": false,
      "games": false,
      "id": false,
      "loser": false,
      "matchState": false,
      "mode": "opponent",
      "thrower": props.thrower,
      "is": '',
      "winner": false
    }; // Bind methods

    _this.bigaxeFinish = _this.bigaxeFinish.bind(_assertThisInitialized(_this));
    _this.existingContinue = _this.existingContinue.bind(_assertThisInitialized(_this));
    _this.existingDelete = _this.existingDelete.bind(_assertThisInitialized(_this));
    _this.gameFinish = _this.gameFinish.bind(_assertThisInitialized(_this));
    _this.idCallback = _this.idCallback.bind(_assertThisInitialized(_this));
    _this.matchCallback = _this.matchCallback.bind(_assertThisInitialized(_this));
    _this.overwrite = _this.overwrite.bind(_assertThisInitialized(_this));
    _this.points = _this.points.bind(_assertThisInitialized(_this));
    _this.requestCallback = _this.requestCallback.bind(_assertThisInitialized(_this));
    _this.requestCancel = _this.requestCancel.bind(_assertThisInitialized(_this));
    _this.requestCreate = _this.requestCreate.bind(_assertThisInitialized(_this));
    _this.signin = _this.signin.bind(_assertThisInitialized(_this));
    _this.signout = _this.signout.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Match, [{
    key: "bigaxeFinish",
    value: function bigaxeFinish() {
      // Show the loader
      Loader.show(); // If we're in points mode

      var noun = '';

      if (this.state.matchState.mode == 'bigaxe_points') {
        noun = 'match/finish/bigaxe/points';
      } else {
        noun = 'match/finish/bigaxe/target';
      } // Clone the match state


      var ms = this.state.matchState; // Remove the finish and set the waiting

      ms.bigaxe_can_finish = false;
      ms.waiting = true; // Set the new state

      this.setState({
        "matchState": ms
      }); // Let the service know

      Services.update('natf', noun, {
        "id": this.state.id
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "calculateBigAxeFinished",
    value: function calculateBigAxeFinished(type, data) {
      // Make my life easier
      var _throws = data.bigaxe[type]; // If the lengths don't match

      if (_throws['i'].length != _throws['o'].length) {
        // We aren't done
        return false;
      } // If we're checking points


      if (type == 'points') {
        // Loop through till we have no more throws
        for (var i = 0; i < _throws['i'].length; ++i) {
          // Don't overwrite the actual data
          var vals = {
            'i': _throws['i'][i].value,
            'o': _throws['o'][i].value
          }; // If we got a drop, consider it a zero

          if (vals['i'] == 'd') {
            vals['i'] = 0;
          }

          if (vals['o'] == 'd') {
            vals['o'] = 0;
          } // If the values don't match, someone won


          if (vals['i'] != vals['o']) {
            // Allow finishing
            return true;
          }
        }
      } // Else we're checking target
      else {
          // Init consecutive hits
          var iCon = 0; // Loop through till we have no more throws

          for (var i = 0; i < _throws['i'].length; ++i) {
            // If we got double failures
            if ((_throws['i'][i] == 'd' || _throws['i'][i] == 0) && (_throws['o'][i] == 'd' || _throws['o'][i] == 0)) {
              // Reset the consecutive and continue the loop
              iCon = 0;
              continue;
            } // If we got double 1s


            if (_throws['i'][i] == 1 && _throws['o'][i] == 1) {
              // Increase the consecutive
              ++iCon; // If we got 3

              if (iCon == 3) {
                // Allow finishing
                return true;
              } // Continue the loop


              continue;
            } // Looks like someone won


            return true;
          }
        } // Not done yet


      return false;
    }
  }, {
    key: "calculateMatchState",
    value: function calculateMatchState(data) {
      // Init the state
      var state = {
        "game": "1",
        "throw": "1",
        "waiting": false
      }; // Are we opponent or initiator

      var is = this.state.thrower._id == data.initiator ? 'i' : 'o'; // If there's any bigaxe data it's safe to assume we're done with the
      //	regular match

      if (data.bigaxe && !Tools.empty(data.bigaxe)) {
        // Bigaxe throw starts at 0
        state["throw"] = 0; // If we have points

        if (data.bigaxe.points) {
          // Set bigaxe to points
          state.mode = "bigaxe_points"; // Set the throw to the current length of existing throws

          state["throw"] = data.bigaxe.points[is].length; // If we're finished

          if (data.bigaxe.points.finished[is]) {
            state.waiting = true;
            state.bigaxe_can_finish = false;
          } // Do we need to show the finish button?
          else {
              state.bigaxe_can_finish = this.calculateBigAxeFinished('points', data);
            }
        } // Else we're still on target
        else {
            // Set bigaxe to target
            state.mode = "bigaxe_target"; // Set the throw to the current length of existing throws

            state["throw"] = data.bigaxe.target[is].length; // If we're finished

            if (data.bigaxe.target.finished[is]) {
              state.waiting = true;
              state.bigaxe_can_finish = false;
            } // Do we need to show the finish button?
            else {
                state.bigaxe_can_finish = this.calculateBigAxeFinished('target', data);
              }
          }
      } // Else, assume we are in games
      else {
          // Set the mode
          state.mode = "games"; // If we're finished

          if (data.games_finished[is]) {
            state.waiting = true;
          } // Else, go through each game
          else {
              var g = "1";

              for (var _i = 0, _arr = ["1", "2", "3"]; _i < _arr.length; _i++) {
                g = _arr[_i];

                // If it doesn't exist
                if (typeof data.games[g] == 'undefined' || typeof data.games[g][is] == 'undefined' || Tools.empty(data.games[g][is])) {
                  break;
                } // Store the game


                state.game = g; // Go through each throw

                var t = "1";

                for (var _i2 = 0, _arr2 = ["1", "2", "3", "4", "5", "6"]; _i2 < _arr2.length; _i2++) {
                  t = _arr2[_i2];

                  // If it doesn't exist
                  if (typeof data.games[g][is][t] == 'undefined') {
                    break;
                  }
                } // Store the round


                state["throw"] = t;
              }
            }
        } // Return the state


      return state;
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any signin/signout events
      Events.add('signin', this.signin);
      Events.add('signout', this.signout); // Track ID in hash

      Hash.watch('id', this.idCallback); // If we're signed in

      if (this.state.thrower) {
        // If there's an ID in the hash
        var id = Hash.get('id');

        if (id) {
          this.idCallback(id);
        } else {
          this.existingFetch();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any signin/signout events
      Events.remove('signin', this.signin);
      Events.remove('signout', this.signout); // Stop tracking ID in hash and remove it

      Hash.unwatch('id', this.idCallback);
      Hash.set('id', null); // If we're in request mode

      if (this.state.mode == 'request') {
        // Stop tracking the request
        TwoWay.untrack('auth', 'request-' + this.state.id, this.requestCallback);
      } else if (this.state.mode == 'match') {
        // Stop tracking the match
        TwoWay.untrack('natf', 'match-' + this.state.id, this.matchCallback);
      }
    }
  }, {
    key: "existingContinue",
    value: function existingContinue(ev) {
      Hash.set('id', 'm|' + ev.currentTarget.parentNode.dataset.id);
    }
  }, {
    key: "existingDelete",
    value: function existingDelete(ev) {
      var _this2 = this;

      // Show the loader
      Loader.show(); // Store the id

      var id = ev.currentTarget.parentNode.dataset.id; // Notify the service the match won't be completed

      Services["delete"]('natf', 'match', {
        "id": id
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          // If the thrower can't delete that record, or it's finished
          if (res.error.code == 1000) {
            _this2.existingRemove(id);
          } // If it's already deleted
          else if (res.error.code == 1104) {
              _this2.existingRemove(id);
            } // Unknown error
            else {
                Events.trigger('error', JSON.stringify(res.error));
              }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          _this2.existingRemove(id);
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "existingFetch",
    value: function existingFetch() {
      var _this3 = this;

      // Show the loader
      Loader.show(); // Find out if there's any unfinished games associated with this
      //	thrower

      Services.read('natf', 'match/unfinished', {}).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // If there's any
          if (res.data.length) {
            // Set the state
            _this3.setState({
              "mode": "existing",
              "existing": res.data
            });
          }
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "existingRemove",
    value: function existingRemove(id) {
      // Store the existing
      var existing = Tools.clone(this.state.existing); // Go through each one

      for (var i = 0; i < existing.length; ++i) {
        if (existing[i]._id == id) {
          existing.splice(i, 1);
        }
      } // Init the new state


      var state = {
        "existing": existing // If there's no more existing

      };

      if (existing.length == 0) {
        state.mode = 'opponent';
      } // Set the new state


      this.setState(state);
    }
  }, {
    key: "gameFinish",
    value: function gameFinish(ev) {
      // Clone the match state
      var ms = Tools.clone(this.state.matchState); // If we're on game 3

      if (ms.game == "3") {
        // Show the loader
        Loader.show(); // Clone the match state

        var ms = Tools.clone(this.state.matchState); // Set the match state to waiting

        ms.waiting = true;
        this.setState({
          "matchState": ms
        }); // Notify backend the match is over

        Services.update('natf', 'match/finish/games', {
          "id": this.state.id
        }).done(function (res) {
          // If there's an error
          if (res.error && !Utils.serviceError(res.error)) {
            Events.trigger('error', JSON.stringify(res.error));
          } // If there's a warning


          if (res.warning) {
            Events.trigger('warning', JSON.stringify(res.warning));
          }
        }).always(function () {
          // Hide loader
          Loader.hide();
        });
      } // Else, go to the next game
      else {
          // Clone the games
          var games = Tools.clone(this.state.games); // Increase the game and throw in the match state

          ms.game = (parseInt(ms.game) + 1).toString();
          ms["throw"] = "1"; // If we don't have the next game, add it

          if (typeof games[ms.game] == 'undefined') {
            games[ms.game] = {
              "i": {},
              "o": {}
            };
          } // Else if it does exist
          else {
              // If it doesn't have an initiator
              if (typeof games[ms.game]['i'] == 'undefined') {
                games[ms.game]['i'] = {};
              } // If it doesn't have an opponent


              if (typeof games[ms.game]['o'] == 'undefined') {
                games[ms.game]['o'] = {};
              }
            } // Set the new state


          this.setState({
            "games": games,
            "matchState": ms
          });
        }
    }
  }, {
    key: "idCallback",
    value: function idCallback(id) {
      var _this4 = this;

      // If there's an ID
      if (id) {
        // Split the ID
        id = id.split('|'); // If it's a request

        if (id[0] == 'r') {
          // Fetch the match
          Services.read('auth', 'match/request', {
            "id": id[1]
          }).done(function (res) {
            // If there's an error
            if (res.error && !Utils.serviceError(res.error)) {
              // If the match no longer exists
              if (res.error.code == 1104) {
                Events.trigger('error', "This match request no longer exists.");
                Hash.set('id', null);
                return;
              }

              Events.trigger('error', JSON.stringify(res.error));
            } // If there's a warning


            if (res.warning) {
              Events.trigger('warning', JSON.stringify(res.warning));
            } // If there's data


            if (res.data) {
              // Change the mode
              _this4.setState({
                "alias": res.data.alias,
                "id": id[1],
                "mode": "request"
              }); // Listen for an update on the request


              TwoWay.track('auth', 'request-' + id[1], _this4.requestCallback);
            }
          });
        } // Else if it's a match
        else if (id[0] == 'm') {
            // List for an update on the match
            TwoWay.track('natf', 'match-' + id[1], this.matchCallback); // Fetch the match

            Services.read('natf', 'match', {
              "id": id[1]
            }).done(function (res) {
              // If there's an error
              if (res.error && !Utils.serviceError(res.error)) {
                // If the match no longer exists
                if (res.error.code == 1104) {
                  Events.trigger('error', "This match no longer exists.");
                  Hash.set('id', null);
                  return;
                }

                Events.trigger('error', JSON.stringify(res.error));
              } // If there's a warning


              if (res.warning) {
                Events.trigger('warning', JSON.stringify(res.warning));
              } // If there's data


              if (res.data) {
                // If the game is finished
                if (res.data.finished) {
                  Events.trigger('error', "This match is already finished.");
                  Hash.set('id', null);
                  return;
                } // Are we initiator or opponent?


                var t = res.data.initiator == _this4.state.thrower._id ? 'i' : 'o'; // Make sure each game has an intiator and opponent

                for (var k in res.data.games) {
                  for (var _i3 = 0, _arr3 = ['i', 'o']; _i3 < _arr3.length; _i3++) {
                    var w = _arr3[_i3];

                    if (typeof res.data.games[k][w] == 'undefined') {
                      res.data.games[k][w] = {};
                    }
                  }
                } // Calculate the match state


                var ms = _this4.calculateMatchState(res.data); // Store it in the state


                _this4.setState({
                  "alias": t == 'i' ? res.data['opponent_alias'] : res.data['initiator_alias'],
                  "bigaxe": res.data.bigaxe,
                  "games": res.data.games,
                  "id": id[1],
                  "matchState": ms,
                  "mode": "match",
                  "is": t
                }, function () {
                  // If we're in games mode on throw five, or big axe
                  //	points mode, allow clutches
                  if (ms.mode == 'games' && ms["throw"] == '5' || ms.mode == 'bigaxe_points') {
                    this.refs.board.clutchMode = 'select';
                  } else {
                    this.refs.board.clutchMode = 'none';
                  }
                });
              }
            });
          }
      } // Else reset the state
      else {
          this.reset();
        }
    }
  }, {
    key: "matchCallback",
    value: function matchCallback(msg) {
      console.log(msg); // If we got an update on a big axe points throw

      if (msg.type == "bigaxe_points") {
        // If we need to start
        if (msg.subtype == "start") {
          // Clone the match state and bigaxe
          var ms = Tools.clone(this.state.matchState);
          var ba = Tools.clone(this.state.bigaxe); // Set the mode to big axe target and reset the throw to 1

          ms.mode = "bigaxe_points";
          ms["throw"] = 0;
          ms.waiting = false;
          ms.bigaxe_can_finish = false; // Add the points section

          ba['points'] = {
            "i": [],
            "o": [] // Set the board mode

          };
          this.refs.board.clutchMode = 'select'; // Set the new state

          this.setState({
            "bigaxe": ba,
            "matchState": ms
          });
        } // Else if we got a throw
        else if (msg.subtype == "throw") {
            // Clone the bigaxe and match state
            var ba = Tools.clone(this.state.bigaxe);
            var ms = Tools.clone(this.state.matchState); // If points doesn't exist

            if (typeof ba['points'] == 'undefined') {
              ba['points'] = {
                "i": [],
                "o": []
              };
            } // If the thrower doesn't exist


            if (typeof ba['points'][msg.thrower] == 'undefined') {
              ba['points'][msg.thrower] = [];
            } // If the throw doesn't exist


            if (ba['points'][msg.thrower].length == msg["throw"]) {
              ba['points'][msg.thrower].push({
                "clutch": msg.clutch,
                "value": msg.value
              });
            } else {
              ba['points'][msg.thrower][msg["throw"]] = {
                "clutch": msg.clutch,
                "value": msg.value
              };
            } // Calculate the throws so we can know if we're done


            ms.bigaxe_can_finish = this.calculateBigAxeFinished('points', this.state);
            ms.waiting = false; // Set the new state

            this.setState({
              "bigaxe": ba,
              "matchState": ms
            });
          } // Else we aren't actually finished
          else if (msg.subtype == 'notfinished') {
              // Clone the match state
              var ms = Tools.clone(this.state.matchState); // Remove waiting and set to bigaxe points just in case

              ms.mode = 'bigaxe_points';
              ms.waiting = false; // Set the new state

              this.setState({
                "matchState": ms
              });
            }
      } // Else if we got an update on a big axe target throw
      else if (msg.type == "bigaxe_target") {
          // If we need to start
          if (msg.subtype == "start") {
            // Clone the match state
            var ms = Tools.clone(this.state.matchState); // Set the mode to big axe target and reset the throw to 1

            ms.mode = "bigaxe_target";
            ms["throw"] = 0;
            ms.waiting = false; // Set the board mode

            this.refs.board.clutchMode = 'none'; // Set the new state

            this.setState({
              "bigaxe": {
                "target": {
                  "i": [],
                  "o": []
                }
              },
              "matchState": ms
            });
          } // Else if we got a throw
          else if (msg.subtype == "throw") {
              // Clone the bigaxe and match state
              var ba = Tools.clone(this.state.bigaxe);
              var ms = Tools.clone(this.state.matchState); // If it's false or target doesn't exist

              if (!ba || typeof ba['target'] == 'undefined') {
                ba = {
                  "target": {
                    "i": [],
                    "o": []
                  }
                };
              } // If the thrower doesn't exist


              if (typeof ba['target'][msg.thrower] == 'undefined') {
                ba['target'][msg.thrower] = [];
              } // If the throw doesn't exist


              if (ba['target'][msg.thrower].length == msg["throw"]) {
                ba['target'][msg.thrower].push(msg.value);
              } else {
                ba['target'][msg.thrower][msg["throw"]] = msg.value;
              } // Calculate the throws so we can know if we're done


              ms.bigaxe_can_finish = this.calculateBigAxeFinished('target', this.state);
              ms.waiting = false; // Set the new state

              this.setState({
                "bigaxe": ba,
                "matchState": ms
              });
            } // Else we aren't actually finished
            else if (msg.subtype == 'notfinished') {
                // Clone the match state
                var ms = Tools.clone(this.state.matchState); // Remove waiting and set to bigaxe target just in case

                ms.mode = 'bigaxe_target';
                ms.waiting = false; // Set the new state

                this.setState({
                  "matchState": ms
                });
              }
        } // Else if the match was deleted
        else if (msg.type == 'deleted') {
            // Notify the thrower
            Events.trigger('error', this.state.alias + " deleted the match."); // Reset

            this.reset();
          } // Else if we got a message about a new throw in a game
          else if (msg.type == 'games_throw') {
              // Clone the games
              var games = Tools.clone(this.state.games); // Create the game if it doesn't exist

              if (typeof games[msg.game] == 'undefined') {
                games[msg.game] = {
                  "i": {},
                  "o": {}
                };
              } // If the thrower section of the game doesn't exist


              if (typeof games[msg.game][msg.thrower] == 'undefined') {
                games[msg.game][msg.thrower] = {};
              } // Add the throw


              games[msg.game][msg.thrower][msg["throw"]] = msg.value; // Set the new state

              this.setState({
                "games": games
              });
            } // Else if we got a winner
            else if (msg.type == 'winner') {
                // If we're the winner
                if (msg.is == this.state.is) {
                  this.setState({
                    "winner": true
                  });
                } // Else we're the loser
                else {
                    this.setState({
                      "loser": true
                    });
                  } // Set a timeout to reset


                setTimeout(function () {
                  Hash.set("id", null);
                }, 5000);
              }
    }
  }, {
    key: "overwrite",
    value: function overwrite(ev) {
      // Clone the match state
      var ms = Tools.clone(this.state.matchState); // If we're in games mode

      if (ms.mode == 'games') {
        // Change the throw
        ms["throw"] = ev.currentTarget.dataset["throw"]; // Set the board mode

        this.refs.board.clutchMode = ms["throw"] == '5' ? 'select' : 'none';
      } // Else if we're in bigaxe target mode
      else if (ms.mode == "bigaxe_target" || ms.mode == 'bigaxe_points') {
          // Change the throw
          ms["throw"] = parseInt(ev.currentTarget.dataset["throw"]);
        } // Set the new state


      this.setState({
        "matchState": ms,
        "overwrite": true
      });
    }
  }, {
    key: "points",
    value: function points(clutch, value) {
      var _this5 = this;

      // Clone match state
      var ms = Tools.clone(this.state.matchState); // If we're in games mode

      if (ms.mode == "games") {
        // If we're on throw "6", aka, waiting to finish
        if (ms["throw"] == '6') {
          Events.trigger('error', "Go to next game or select a throw to overwrite.");
          return false;
        } // Show the loader


        Loader.show(); // Get the value or value/clutch

        var value = ms["throw"] == '5' ? {
          "clutch": clutch,
          "value": value
        } : value; // Save the value and notify the opponent

        Services.update('natf', 'match/game', {
          "id": this.state.id,
          "game": ms.game,
          "throw": ms["throw"],
          "value": value
        }).done(function (res) {
          // If there's an error
          if (res.error && !Utils.serviceError(res.error)) {
            Events.trigger('error', JSON.stringify(res.error));
          } // If there's a warning


          if (res.warning) {
            Events.trigger('warning', JSON.stringify(res.warning));
          } // If there's data


          if (res.data) {
            // Clone the games state
            var games = Tools.clone(_this5.state.games); // Store the point value

            games[ms.game][_this5.state.is][ms["throw"]] = value; // If the overwrite flag is set

            if (_this5.state.overwrite) {
              var t = "6";

              for (var _i4 = 0, _arr4 = ["1", "2", "3", "4", "5", "6"]; _i4 < _arr4.length; _i4++) {
                t = _arr4[_i4];

                if (typeof games[ms.game][_this5.state.is][t] == 'undefined') {
                  break;
                }
              }

              ms["throw"] = t;
            } else {
              ms["throw"] = (parseInt(ms["throw"]) + 1).toString();
            } // Set the board mode


            _this5.refs.board.clutchMode = ms["throw"] == '5' ? 'select' : 'none'; // Update the state

            _this5.setState({
              "games": games,
              "matchState": ms,
              "overwrite": false
            });
          }
        }).always(function () {
          // Hide the loader
          Loader.hide();
        });
      } // Else we're in a bigaxe mode
      else {
          // Clone the bigaxe state
          var bigaxe = this.state.bigaxe; // Opponent is opposite of thrower

          var sO = this.state.is == 'i' ? 'o' : 'i'; // If we're in target

          if (ms.mode == "bigaxe_target") {
            // If the value is 1, 3, or 5, it's considered a 1
            if ([1, 3, 5].indexOf(value) > 0) {
              value = 1;
            } // If there's no target


            if (typeof bigaxe['target'] == 'undefined') {
              bigaxe['target'] = {
                "finished": 0,
                "i": [],
                "o": []
              };
            } // If the length of this throwers throws is not equal or 1 less
            //	than the opponents, we can't accept this throw


            if (!this.state.overwrite && bigaxe['target'][this.state.is].length > bigaxe['target'][sO].length) {
              Events.trigger('error', "Please wait for " + this.state.alias + " to make their throw.");
              return false;
            } // Show the loader


            Loader.show(); // If the value doesn't exist yet, push it

            if (bigaxe['target'][this.state.is].length == ms["throw"]) {
              bigaxe['target'][this.state.is].push(value);
            } // Else, overwrite it
            else {
                bigaxe['target'][this.state.is][ms["throw"]] = value;
              } // Save the value and notify the opponent


            Services.update('natf', 'match/bigaxe/target', {
              "id": this.state.id,
              "throw": ms["throw"],
              "value": value
            }).done(function (res) {
              // If there's an error
              if (res.error && !Utils.serviceError(res.error)) {
                Events.trigger('error', JSON.stringify(res.error));
              } // If there's a warning


              if (res.warning) {
                Events.trigger('warning', JSON.stringify(res.warning));
              } // If there's data


              if (res.data) {
                // If the overwrite flag is set
                if (_this5.state.overwrite) {
                  var t = 0;

                  for (; true; ++t) {
                    if (typeof bigaxe['target'][_this5.state.is][t] == 'undefined') {
                      break;
                    }
                  }

                  ms["throw"] = t;
                } else {
                  ms["throw"] += 1;
                } // Calculate the throws so we can know if we're done


                ms.bigaxe_can_finish = _this5.calculateBigAxeFinished('target', _this5.state); // Set the new state

                _this5.setState({
                  "bigaxe": bigaxe,
                  "matchState": ms,
                  "overwrite": false
                });
              }
            }).always(function () {
              // Hide loader
              Loader.hide();
            });
          } // Else we're in points
          else {
              // If there's no points
              if (typeof bigaxe['points'] == 'undefined') {
                bigaxe['points'] = {
                  "finished": 0,
                  "i": [],
                  "o": []
                };
              } // If the length of this throwers throws is not equal or 1 less
              //	than the opponents, we can't accept this throw


              if (!this.state.overwrite && bigaxe['points'][this.state.is].length > bigaxe['points'][sO].length) {
                Events.trigger('error', "Please wait for " + this.state.alias + " to make their throw.");
                return false;
              } // Show the loader


              Loader.show(); // If the value doesn't exist yet, push it

              if (bigaxe['points'][this.state.is].length == ms["throw"]) {
                bigaxe['points'][this.state.is].push(value);
              } // Else, overwrite it
              else {
                  bigaxe['points'][this.state.is][ms["throw"]] = value;
                } // Save the value and notify the opponent


              Services.update('natf', 'match/bigaxe/points', {
                "id": this.state.id,
                "throw": ms["throw"],
                "clutch": clutch,
                "value": value
              }).done(function (res) {
                // If there's an error
                if (res.error && !Utils.serviceError(res.error)) {
                  Events.trigger('error', JSON.stringify(res.error));
                } // If there's a warning


                if (res.warning) {
                  Events.trigger('warning', JSON.stringify(res.warning));
                } // If there's data


                if (res.data) {
                  // If the overwrite flag is set
                  if (_this5.state.overwrite) {
                    var t = 0;

                    for (; true; ++t) {
                      if (typeof bigaxe['points'][_this5.state.is][t] == 'undefined') {
                        break;
                      }
                    }

                    ms["throw"] = t;
                  } else {
                    ms["throw"] += 1;
                  } // Calculate the throws so we can know if we're done


                  ms.bigaxe_can_finish = _this5.calculateBigAxeFinished('points', _this5.state); // Set the new state

                  _this5.setState({
                    "bigaxe": bigaxe,
                    "matchState": ms,
                    "overwrite": false
                  });
                }
              }).always(function () {
                // Hide loader
                Loader.hide();
              });
            }
        }
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement("div", {
        className: "natf"
      }, self.state.mode == 'opponent' && React.createElement(Opponent, {
        thrower: self.state.thrower,
        onSelect: self.requestCreate
      }), self.state.mode == 'request' && React.createElement("div", {
        className: "acenter"
      }, React.createElement("div", {
        className: "existing"
      }, React.createElement("p", null, "Waiting for ", self.state.alias, " to accept your match request"), React.createElement("button", {
        onClick: self.requestCancel
      }, "Cancel Request"))), self.state.mode == 'existing' && React.createElement("div", {
        className: "acenter"
      }, self.state.existing.map(function (m, i) {
        return React.createElement("div", {
          key: i,
          "data-id": m._id,
          className: "existing"
        }, React.createElement("p", null, "You have an existing match with ", m.alias, ", do you wish to continue?"), React.createElement("button", {
          onClick: self.existingDelete
        }, "Delete"), React.createElement("button", {
          onClick: self.existingContinue
        }, "Continue"));
      })), self.state.mode == 'match' && React.createElement("div", {
        className: "actual"
      }, React.createElement(Board, {
        ref: "board",
        clutchMode: "none",
        onPoints: self.points
      }), React.createElement("div", {
        className: "stats"
      }, self.renderPrimary(), self.renderSecondary()), React.createElement("div", {
        className: "overlay",
        style: {
          "display": self.state.matchState.waiting ? 'block' : 'none'
        }
      }, React.createElement("div", null, React.createElement("span", null, "Waiting for ", self.state.alias))), this.state.winner && React.createElement("div", {
        className: "fireworks"
      }, React.createElement("div", {
        className: "overlay"
      }, React.createElement("div", null, React.createElement("span", {
        className: "winner"
      }, "YOU WON!"))), React.createElement("div", {
        className: "pyro"
      }, React.createElement("div", {
        className: "before"
      }), React.createElement("div", {
        className: "after"
      }))), this.state.loser && React.createElement("div", {
        className: "overlay"
      }, React.createElement("div", null, React.createElement("span", {
        className: "loser"
      }, "Sadly, you lost. Better luck next time.")))));
    }
  }, {
    key: "renderBigAxe",
    value: function renderBigAxe() {
      var self = this; // Init the rows

      var rows = []; // Opponent is opposite of thrower

      var sO = this.state.is == 'i' ? 'o' : 'i'; // If we have a target section

      var add_to_points = 0;

      if (this.state.bigaxe.target) {
        var target = this.state.bigaxe.target;

        for (var i = 0; true; ++i) {
          if (target[this.state.is].length <= i && target[sO].length <= i) {
            add_to_points = i;
            break;
          }

          var columns = ['', ''];

          if (typeof target[this.state.is][i] != 'undefined') {
            columns[0] = target[this.state.is][i];
          }

          if (typeof target[sO][i] != 'undefined') {
            columns[1] = target[sO][i];
          } // Add the row


          rows.push(React.createElement("tr", null, React.createElement("td", null, i + 1), React.createElement("td", {
            className: this.state.overwrite && this.state.matchState.mode == 'bigaxe_target' && this.state.matchState["throw"] == i ? 'overwrite' : '',
            "data-throw": i,
            onClick: this.overwrite
          }, columns[0]), React.createElement("td", null, columns[1])));
        }
      } // If we have a points section


      if (this.state.bigaxe.points) {
        var points = this.state.bigaxe.points;

        for (var i = 0; true; ++i) {
          if (points[this.state.is].length <= i && points[sO].length <= i) {
            add_to_points = i;
            break;
          }

          var columns = ['', ''];

          if (typeof points[this.state.is][i] != 'undefined') {
            columns[0] = points[this.state.is][i];
          }

          if (typeof points[sO][i] != 'undefined') {
            columns[1] = points[sO][i];
          } // Add the row


          rows.push(React.createElement("tr", null, React.createElement("td", null, add_to_points + i + 1), React.createElement("td", {
            className: this.state.overwrite && this.state.matchState["throw"] == i ? 'overwrite' : columns[0].clutch ? 'clutch' : '',
            "data-throw": i,
            onClick: this.overwrite
          }, columns[0].value), React.createElement("td", {
            className: columns[1].clutch ? 'clutch' : ''
          }, columns[1].value)));
        }
      }

      return React.createElement("div", {
        className: "bigaxe"
      }, React.createElement("table", null, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "B"), React.createElement("th", null, this.state.thrower.alias), React.createElement("th", null, this.state.alias))), React.createElement("tbody", null, rows)), this.state.matchState.bigaxe_can_finish && React.createElement("button", {
        onClick: this.bigaxeFinish
      }, "Finished"));
    }
  }, {
    key: "renderGame",
    value: function renderGame() {
      // Opponent is opposite of thrower
      var sO = this.state.is == 'i' ? 'o' : 'i'; // What game are we in?

      var g = this.state.games[this.state.matchState.game];
      return React.createElement("div", {
        className: "game"
      }, React.createElement("table", null, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "T"), React.createElement("th", null, this.state.thrower.alias), React.createElement("th", null, this.state.alias))), React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, "1"), this.renderGameThrow("1"), React.createElement("td", null, g[sO]["1"])), React.createElement("tr", null, React.createElement("td", null, "2"), this.renderGameThrow("2"), React.createElement("td", null, g[sO]["2"])), React.createElement("tr", null, React.createElement("td", null, "3"), this.renderGameThrow("3"), React.createElement("td", null, g[sO]["3"])), React.createElement("tr", null, React.createElement("td", null, "4"), this.renderGameThrow("4"), React.createElement("td", null, g[sO]["4"])), React.createElement("tr", null, React.createElement("td", null, "5"), this.renderGameThrow("5"), React.createElement("td", {
        className: g[sO]["5"] && g[sO]["5"].clutch ? 'clutch' : ''
      }, g[sO]["5"] ? g[sO]["5"].value : '')))), this.state.matchState["throw"] == '6' && React.createElement("button", {
        onClick: this.gameFinish
      }, this.state.matchState.game == "3" ? "Finish" : "Next Game"));
    }
  }, {
    key: "renderGameThrow",
    value: function renderGameThrow(t) {
      // The game
      var g = this.state.matchState.game; // The value of the throw

      var v = null;

      if (this.state.games[g] && _typeof(this.state.games[g][this.state.is])) {
        v = this.state.games[g][this.state.is][t];
      } // If we're working on 5


      if (t == '5') {
        // If the value exists
        if (typeof v != 'undefined') {
          return React.createElement("td", {
            className: this.state.overwrite && this.state.matchState["throw"] == t ? 'overwrite' : v.clutch ? 'clutch' : '',
            "data-throw": t,
            onClick: this.overwrite
          }, v.value);
        } // Else, there's no value
        else {
            return React.createElement("td", null);
          }
      } // Else it's 1 to 4
      else {
          // If the value exists
          if (typeof v != 'undefined') {
            return React.createElement("td", {
              className: this.state.overwrite && this.state.matchState["throw"] == t ? 'overwrite' : '',
              "data-throw": t,
              onClick: this.overwrite
            }, v);
          } // Else, there's no value
          else {
              return React.createElement("td", null);
            }
        }
    }
  }, {
    key: "renderPrimary",
    value: function renderPrimary() {
      // Init the points per game
      var oPoints = {
        "i": [0, 0, 0],
        "o": [0, 0, 0] // Opponent is opposite of thrower

      };
      var sO = this.state.is == 'i' ? 'o' : 'i'; // Calculate the points

      for (var _i5 = 0, _arr5 = ["1", "2", "3"]; _i5 < _arr5.length; _i5++) {
        var g = _arr5[_i5];
        var iG = parseInt(g) - 1;

        if (this.state.games[g]) {
          for (var _i6 = 0, _arr6 = ["1", "2", "3", "4", "5"]; _i6 < _arr6.length; _i6++) {
            var t = _arr6[_i6];

            if (this.state.games[g]['i'][t]) {
              if (t == '5') {
                oPoints['i'][iG] += this.state.games[g]['i'][t].value == 'd' ? 0 : this.state.games[g]['i'][t].value;
              } else {
                oPoints['i'][iG] += this.state.games[g]['i'][t] == 'd' ? 0 : this.state.games[g]['i'][t];
              }
            }

            if (this.state.games[g]['o'][t]) {
              if (t == '5') {
                oPoints['o'][iG] += this.state.games[g]['o'][t].value == 'd' ? 0 : this.state.games[g]['o'][t].value;
              } else {
                oPoints['o'][iG] += this.state.games[g]['o'][t] == 'd' ? 0 : this.state.games[g]['o'][t];
              }
            }
          }
        }
      }

      return React.createElement("div", {
        className: "overall"
      }, React.createElement("table", null, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "G"), React.createElement("th", null, this.state.thrower.alias), React.createElement("th", null, this.state.alias))), React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, "1"), React.createElement("td", null, oPoints[this.state.is][0]), React.createElement("td", null, oPoints[sO][0])), React.createElement("tr", null, React.createElement("td", null, "2"), React.createElement("td", null, oPoints[this.state.is][1]), React.createElement("td", null, oPoints[sO][1])), React.createElement("tr", null, React.createElement("td", null, "3"), React.createElement("td", null, oPoints[this.state.is][2]), React.createElement("td", null, oPoints[sO][2])))));
    }
  }, {
    key: "renderSecondary",
    value: function renderSecondary() {
      // If we're in games mode
      if (this.state.matchState.mode == "games") {
        return this.renderGame();
      } // Else we're in a bigaxe mode
      else {
          return this.renderBigAxe();
        }
    }
  }, {
    key: "requestCallback",
    value: function requestCallback(msg) {
      // If the match was accepted
      if (msg.type == 'accepted') {
        Hash.set('id', 'm|' + msg.match);
      } // Else if it was rejected
      else if (msg.type == 'rejected') {
          this.requestReset();
        }
    }
  }, {
    key: "requestCancel",
    value: function requestCancel() {
      var _this6 = this;

      if (this.state.mode == 'request') {
        // Show the loader
        Loader.show(); // Cancel the match request

        Services["delete"]('auth', 'match/request', {
          "id": this.state.id
        }).done(function (res) {
          // If there's an error
          if (res.error && !Utils.serviceError(res.error)) {
            // If it's already deleted
            if (res.error.code != 1104) {
              _this6.requestReset();
            } else {
              Events.trigger('error', JSON.stringify(res.error));
            }
          } // If there's a warning


          if (res.warning) {
            Events.trigger('warning', JSON.stringify(res.warning));
          } // If there's data


          if (res.data) {
            _this6.requestReset();
          }
        }).always(function () {
          // Hide the loader
          Loader.hide();
        });
      }
    }
  }, {
    key: "requestCreate",
    value: function requestCreate(opponent) {
      // Show the loader
      Loader.show(); // Make a match request for this opponent

      Services.create('auth', 'match/request', {
        "opponent": opponent._id,
        "org": "NATF"
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Set the hash
          Hash.set('id', 'r|' + res.data);
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "requestReset",
    value: function requestReset() {
      // Stop listening for an update on the request
      TwoWay.untrack('auth', 'request-' + this.state.id, this.requestCallback); // Remove the ID from the hash

      Hash.set('id', null); // Change the mode

      this.setState({
        "id": false,
        "mode": "opponent"
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this.setState({
        "alias": '',
        "bigaxe": false,
        "existing": false,
        "games": false,
        "id": false,
        "loser": false,
        "matchState": false,
        "mode": "opponent",
        "is": '',
        "winner": false
      });
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      // Set state
      this.setState({
        "thrower": thrower
      }); // If there's an ID in the hash

      var id = Hash.get('id');

      if (id) {
        this.idCallback(id);
      } else {
        this.existingFetch();
      }
    }
  }, {
    key: "signout",
    value: function signout() {
      // Set state
      this.setState({
        "thrower": false
      }); // Remove the ID from the hash

      Hash.set('id', null);
    }
  }]);

  return Match;
}(React.Component); // Export the component


module.exports = Match;

/***/ }),

/***/ "./webpack/react/natf/pieClutch.jsx":
/*!******************************************!*\
  !*** ./webpack/react/natf/pieClutch.jsx ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Pie: Clutch
 *
 * Shows the pie chart for clutch throws
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-15
 */
// Clutch component
var PieClutch =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PieClutch, _React$Component);

  function PieClutch(props) {
    var _this;

    _classCallCheck(this, PieClutch);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(PieClutch).call(this, props)); // Initialise the state

    _this.state = {}; // Pie

    _this.pie = null; // Titles

    _this.titles = ["Hits", "Misses", "Drops"];
    return _this;
  }

  _createClass(PieClutch, [{
    key: "calculateTitles",
    value: function calculateTitles() {
      var ret = [];
      var sum = this.props.data.reduce(function (p, i) {
        return p + i;
      });

      for (var i = 0; i < 3; ++i) {
        ret.push(this.titles[i] + ' ' + (sum == 0 ? '0.0' : (this.props.data[i] / sum * 100.0).toFixed(1)) + '% ');
      }

      return ret;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.pie = new Chart(this.refs.pie.getContext('2d'), {
        "type": "pie",
        "data": {
          "labels": this.calculateTitles(),
          "datasets": [{
            "data": this.props.data,
            "backgroundColor": ["rgb(0,255,0,0.9)", "rgb(100,100,100,0.5)", "rgb(200,200,200,0.5)"]
          }]
        },
        "options": {
          "layout": {
            "padding": 0
          },
          "legend": {
            "display": false
          },
          "maintainAspectRatio": false,
          "responsive": true
        }
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.pie.data.datasets[0].data = this.props.data;
      this.pie.update();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ref = _this$props.ref,
          data = _this$props.data,
          rest = _objectWithoutProperties(_this$props, ["ref", "data"]);

      return React.createElement("canvas", _extends({}, rest, {
        ref: "pie"
      }));
    }
  }]);

  return PieClutch;
}(React.Component); // Export the component


module.exports = PieClutch;

/***/ }),

/***/ "./webpack/react/natf/piePaint.jsx":
/*!*****************************************!*\
  !*** ./webpack/react/natf/piePaint.jsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Pie: Paint
 *
 * Shows the pie chart for big axe throws in the paint
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-15
 */
// Paint component
var PiePaint =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PiePaint, _React$Component);

  function PiePaint(props) {
    var _this;

    _classCallCheck(this, PiePaint);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(PiePaint).call(this, props)); // Initialise the state

    _this.state = {}; // Pie

    _this.pie = null; // Titles

    _this.titles = ["Hits", "Misses", "Drops"];
    return _this;
  }

  _createClass(PiePaint, [{
    key: "calculateTitles",
    value: function calculateTitles() {
      var ret = [];
      var sum = this.props.data.reduce(function (p, i) {
        return p + i;
      });

      for (var i = 0; i < 3; ++i) {
        ret.push(this.titles[i] + ' ' + (sum == 0 ? '0.0' : (this.props.data[i] / sum * 100.0).toFixed(1)) + '% ');
      }

      return ret;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.pie = new Chart(this.refs.pie.getContext('2d'), {
        "type": "pie",
        "data": {
          "labels": this.calculateTitles(),
          "datasets": [{
            "data": this.props.data,
            "backgroundColor": ["rgb(0,0,0,0.9)", "rgb(100,100,100,0.5)", "rgb(200,200,200,0.5)"]
          }]
        },
        "options": {
          "layout": {
            "padding": 0
          },
          "legend": {
            "display": false
          },
          "maintainAspectRatio": false,
          "responsive": true
        }
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.pie.data.datasets[0].data = this.props.data;
      this.pie.update();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ref = _this$props.ref,
          data = _this$props.data,
          rest = _objectWithoutProperties(_this$props, ["ref", "data"]);

      return React.createElement("canvas", _extends({}, rest, {
        ref: "pie"
      }));
    }
  }]);

  return PiePaint;
}(React.Component); // Export the component


module.exports = PiePaint;

/***/ }),

/***/ "./webpack/react/natf/pieRegular.jsx":
/*!*******************************************!*\
  !*** ./webpack/react/natf/pieRegular.jsx ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Pie: Regular
 *
 * Shows the pie chart for regular (target) throws
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-15
 */
// Regular component
var PieRegular =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PieRegular, _React$Component);

  function PieRegular(props) {
    var _this;

    _classCallCheck(this, PieRegular);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(PieRegular).call(this, props)); // Initialise the state

    _this.state = {}; // Pie

    _this.pie = null; // Titles

    _this.titles = ["Fives", "Threes", "Ones", "Zeros", "Drops"];
    return _this;
  }

  _createClass(PieRegular, [{
    key: "calculateTitles",
    value: function calculateTitles() {
      var ret = [];
      var sum = this.props.data.reduce(function (p, i) {
        return p + i;
      });

      for (var i = 0; i < 5; ++i) {
        ret.push(this.titles[i] + ' ' + (sum == 0 ? '0.0' : (this.props.data[i] / sum * 100.0).toFixed(1)) + '% ');
      }

      return ret;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.pie = new Chart(this.refs.pie.getContext('2d'), {
        "type": "pie",
        "data": {
          "labels": this.calculateTitles(),
          "datasets": [{
            "data": this.props.data,
            "backgroundColor": ["rgb(0,0,0,0.9)", "rgb(255,0,0,0.9)", "rgb(0,0,255,0.9)", "rgb(100,100,100,0.5)", "rgb(200,200,200,0.5)"]
          }]
        },
        "options": {
          "layout": {
            "padding": 0
          },
          "legend": {
            "display": false
          },
          "maintainAspectRatio": false,
          "responsive": true
        }
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.pie.data.datasets[0].data = this.props.data;
      this.pie.update();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ref = _this$props.ref,
          data = _this$props.data,
          rest = _objectWithoutProperties(_this$props, ["ref", "data"]);

      return React.createElement("canvas", _extends({}, rest, {
        ref: "pie"
      }));
    }
  }]);

  return PieRegular;
}(React.Component); // Export the component


module.exports = PieRegular;

/***/ }),

/***/ "./webpack/react/natf/practice.jsx":
/*!*****************************************!*\
  !*** ./webpack/react/natf/practice.jsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Practice
 *
 * Manages tracking and storing practice on an NATF board
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-20
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Loader = __webpack_require__(/*! ../../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../../generic/services.js */ "./webpack/generic/services.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Site modules


var Utils = __webpack_require__(/*! ../../utils.js */ "./webpack/utils.js"); // Base components


var Forms = __webpack_require__(/*! ../base/forms.jsx */ "./webpack/react/base/forms.jsx"); // React components


var Modal = __webpack_require__(/*! ../generic/modal.jsx */ "./webpack/react/generic/modal.jsx");

var Board = __webpack_require__(/*! ./board.jsx */ "./webpack/react/natf/board.jsx"); // Pattern component


var Pattern =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Pattern, _React$Component);

  function Pattern(props) {
    var _this;

    _classCallCheck(this, Pattern);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pattern).call(this, props)); // Initialise the state

    _this.state = {
      "descr": props.descr || '',
      "throws": props["throws"] || [{
        "bigaxe": false,
        "clutch": false
      }, {
        "bigaxe": false,
        "clutch": false
      }],
      "title": props.title || '' // Bind methods

    };
    _this.countChange = _this.countChange.bind(_assertThisInitialized(_this));
    _this.descrChange = _this.descrChange.bind(_assertThisInitialized(_this));
    _this.radioClick = _this.radioClick.bind(_assertThisInitialized(_this));
    _this.titleChange = _this.titleChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Pattern, [{
    key: "countChange",
    value: function countChange(ev) {
      // Pull out the count
      var count = parseInt(ev.currentTarget.value); // If the value is more than

      if (count > this.state["throws"].length) {
        for (var i = this.state["throws"].length; i < count; ++i) {
          this.state["throws"].push({
            "bigaxe": false,
            "clutch": false
          });
        }
      } // Else if it's less
      else if (count < this.state["throws"].length) {
          this.state["throws"].splice(count, this.state["throws"].length - count);
        } // Set the new state


      this.setState({
        "throws": this.state["throws"]
      });
    }
  }, {
    key: "errors",
    value: function errors(errs) {
      for (var k in errs) {
        Forms.errorAdd(this.refs[k]);
      }
    }
  }, {
    key: "descrChange",
    value: function descrChange(ev) {
      this.setState({
        "descr": ev.currentTarget.value
      });
    }
  }, {
    key: "titleChange",
    value: function titleChange(ev) {
      this.setState({
        "title": ev.currentTarget.value
      });
    }
  }, {
    key: "radioClick",
    value: function radioClick(ev) {
      // Pull out the index and type
      var name = ev.currentTarget.name.split('.');
      var index = parseInt(name[1]);
      var type = name[0];
      var value = ev.currentTarget.value == 'true'; // Set the state

      this.state["throws"][index][type] = value;
      this.setState({
        "throws": this.state["throws"]
      });
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement("div", {
        className: "pattern form"
      }, React.createElement("p", null, React.createElement("input", {
        ref: "title",
        type: "text",
        title: "Pattern Title",
        placeholder: "Pattern Title",
        value: this.state.title,
        onChange: this.titleChange,
        onClick: Forms.errorFocus
      })), React.createElement("p", null, React.createElement("textarea", {
        ref: "descr",
        title: "Pattern Description",
        placeholder: "Pattern Description",
        value: this.state.descr,
        onChange: this.descrChange,
        onClick: Forms.errorFocus
      })), React.createElement("p", null, React.createElement("select", {
        value: this.state["throws"].length,
        onChange: this.countChange
      }, React.createElement("option", {
        value: 2
      }, "2"), React.createElement("option", {
        value: 3
      }, "3"), React.createElement("option", {
        value: 4
      }, "4"), React.createElement("option", {
        value: 5
      }, "5"), React.createElement("option", {
        value: 6
      }, "6"), React.createElement("option", {
        value: 7
      }, "7"), React.createElement("option", {
        value: 8
      }, "8"), React.createElement("option", {
        value: 9
      }, "9"), React.createElement("option", {
        value: 10
      }, "10"), React.createElement("option", {
        value: 11
      }, "11"), React.createElement("option", {
        value: 12
      }, "12"), React.createElement("option", {
        value: 13
      }, "13"), React.createElement("option", {
        value: 14
      }, "14"), React.createElement("option", {
        value: 15
      }, "15"), React.createElement("option", {
        value: 16
      }, "16"), React.createElement("option", {
        value: 17
      }, "17"), React.createElement("option", {
        value: 18
      }, "18"), React.createElement("option", {
        value: 19
      }, "19"), React.createElement("option", {
        value: 20
      }, "20"), React.createElement("option", {
        value: 21
      }, "21"), React.createElement("option", {
        value: 22
      }, "22"), React.createElement("option", {
        value: 23
      }, "23"), React.createElement("option", {
        value: 24
      }, "24"), React.createElement("option", {
        value: 25
      }, "25"), React.createElement("option", {
        value: 26
      }, "26"), React.createElement("option", {
        value: 27
      }, "27"), React.createElement("option", {
        value: 28
      }, "28"), React.createElement("option", {
        value: 29
      }, "29"), React.createElement("option", {
        value: 30
      }, "30"))), this.state["throws"].map(function (t, i) {
        return React.createElement("div", {
          key: i,
          className: "throw"
        }, React.createElement("h3", null, "Throw #" + (i + 1)), React.createElement("p", null, React.createElement("span", null, "Big Axe: "), React.createElement("label", null, React.createElement("input", {
          type: "radio",
          name: "bigaxe." + i,
          value: "true",
          checked: t.bigaxe,
          onClick: self.radioClick
        }), " True"), React.createElement("label", null, React.createElement("input", {
          type: "radio",
          name: "bigaxe." + i,
          value: "false",
          checked: !t.bigaxe,
          onClick: self.radioClick
        }), " False")), React.createElement("p", null, React.createElement("span", null, "Clutch: "), React.createElement("label", null, React.createElement("input", {
          type: "radio",
          name: "clutch." + i,
          value: "true",
          checked: t.clutch,
          onClick: self.radioClick
        }), " True"), React.createElement("label", null, React.createElement("input", {
          type: "radio",
          name: "clutch." + i,
          value: "false",
          checked: !t.clutch,
          onClick: self.radioClick
        }), " False")));
      }));
    }
  }, {
    key: "pattern",
    get: function get() {
      return this.state;
    }
  }]);

  return Pattern;
}(React.Component); // Practice Component


var Practice =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(Practice, _React$Component2);

  function Practice(props) {
    var _this2;

    _classCallCheck(this, Practice);

    // Call the parent constructor
    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Practice).call(this, props)); // Initialise the state

    _this2.state = {
      "bigaxe": false,
      "clutch": 'select',
      "clutchAttempts": 0,
      "clutchHits": 0,
      "mode": null,
      "modeThrows": false,
      "pattern": false,
      "patterns": false,
      "points": [],
      "showPoints": false,
      "thrower": props.thrower,
      "totalPoints": 0
    }; // Bind methods

    _this2.bigaxe = _this2.bigaxe.bind(_assertThisInitialized(_this2));
    _this2.modeSelect = _this2.modeSelect.bind(_assertThisInitialized(_this2));
    _this2.overwrite = _this2.overwrite.bind(_assertThisInitialized(_this2));
    _this2.patternClose = _this2.patternClose.bind(_assertThisInitialized(_this2));
    _this2.patternCreate = _this2.patternCreate.bind(_assertThisInitialized(_this2));
    _this2.patternDelete = _this2.patternDelete.bind(_assertThisInitialized(_this2));
    _this2.patternEdit = _this2.patternEdit.bind(_assertThisInitialized(_this2));
    _this2.patternNew = _this2.patternNew.bind(_assertThisInitialized(_this2));
    _this2.patternUpdate = _this2.patternUpdate.bind(_assertThisInitialized(_this2));
    _this2.points = _this2.points.bind(_assertThisInitialized(_this2));
    _this2.pointsHide = _this2.pointsHide.bind(_assertThisInitialized(_this2));
    _this2.pointsShow = _this2.pointsShow.bind(_assertThisInitialized(_this2));
    _this2.reset = _this2.reset.bind(_assertThisInitialized(_this2));
    _this2.save = _this2.save.bind(_assertThisInitialized(_this2));
    _this2.signin = _this2.signin.bind(_assertThisInitialized(_this2));
    _this2.signout = _this2.signout.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  _createClass(Practice, [{
    key: "bigaxe",
    value: function bigaxe(ev) {
      ev.stopPropagation();
      this.setState({
        "bigaxe": !this.state.bigaxe
      });
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any signin/signout events
      Events.add('signin', this.signin);
      Events.add('signout', this.signout); // If we have data in local storage

      if ('natf_practice' in localStorage) {
        var new_state = JSON.parse(localStorage['natf_practice']);
        new_state.thrower = this.state.thrower;
        this.setState(new_state);
        delete localStorage['natf_practice'];
      } // If there's a thrower


      if (this.state.thrower) {
        // Get the custom practice patterns
        this.patternFetch();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any signin/signout events
      Events.remove('signin', this.signin);
      Events.remove('signout', this.signout); // If we have points, store them in local storage

      if (this.state.points.length) {
        localStorage['natf_practice'] = JSON.stringify(this.state);
      }
    }
  }, {
    key: "modeSelect",
    value: function modeSelect(ev) {
      // If it's custom
      var mode = ev.currentTarget.dataset.mode.split(':');
      var _throws = false;

      if (mode[0] == 'custom') {
        _throws = Tools.afindo(this.state.patterns, '_id', mode[1])["throws"];
      } // New state


      var state = {
        "mode": mode[0],
        "modeThrows": _throws // If custom

      };

      if (state.mode == 'custom') {
        state.bigaxe = state.modeThrows[0].bigaxe;
        state.clutch = state.modeThrows[0].clutch ? 'expected' : 'none';
      } else {
        state.bigaxe = false;

        switch (state.mode) {
          case 'clutch':
          case 'darkunicorn':
            state.clutch = 'expected';
            break;

          case 'free':
            state.clutch = 'select';
            break;

          case 'supernatural':
            state.clutch = 'none';
            break;
        }
      } // Set the state


      this.setState(state);
    }
  }, {
    key: "overwrite",
    value: function overwrite(ev) {
      // New state
      var state = {
        "overwrite": true // If we're in custom

      };
      var i = 0;

      if (this.state.mode == 'custom') {
        // Which throw is it?
        i = this.state.points.length % this.state.modeThrows.length - 1;

        if (i == -1) {
          i += this.state.modeThrows.length;
        } // Is it big axe?


        state.bigaxe = this.state.modeThrows[i].bigaxe; // Is it clutch

        state.clutch = this.state.modeThrows[i].clutch ? 'expected' : 'none';
      } // Else, predefined mode
      else {
          switch (this.state.mode) {
            case 'darkunicorn':
              state.clutch = this.state.points.length % 5 == 0 ? 'none' : 'expected';
              break;

            case 'free':
              state.clutch = 'select';
              break;

            case 'supernatural':
              state.clutch = this.state.points.length % 5 == 0 ? 'expected' : 'none';
              break;
          }
        } // Set the state


      this.setState(state);
    }
  }, {
    key: "patternClose",
    value: function patternClose() {
      this.setState({
        "pattern": false
      });
    }
  }, {
    key: "patternCreate",
    value: function patternCreate() {
      var _this3 = this;

      // Show the loader
      Loader.show(); // Generate the pattern object

      pattern = this.refs.pattern.pattern; // Send the data to the service

      Services.create('natf', 'practice/pattern', pattern).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          if (res.error.code == 1001) {
            _this3.refs.pattern.errors(res.error.msg);
          } else {
            Events.trigger('error', JSON.stringify(res.error));
          }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Add the pattern to the state
          pattern._id = res.data;

          _this3.state.patterns.push(pattern);

          _this3.setState({
            "pattern": false,
            "patterns": _this3.state.patterns
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "patternDelete",
    value: function patternDelete(id, ev) {
      var _this4 = this;

      ev.stopPropagation(); // Confirm

      if (confirm("Are you sure you want to delete this practice pattern?")) {
        // Show the loader
        Loader.show(); // Delete it

        Services["delete"]('natf', 'practice/pattern', {
          "id": id
        }).done(function (res) {
          // If there's an error
          if (res.error && !Utils.serviceError(res.error)) {
            Events.trigger('error', JSON.stringify(res.error));
          } // If there's a warning


          if (res.warning) {
            Events.trigger('warning', JSON.stringify(res.warning));
          } // If there's data


          if (res.data) {
            // Remove the pattern deleted
            _this4.state.patterns.splice(Tools.afindi(_this4.state.patterns, '_id', id), 1); // Set the state


            _this4.setState({
              "patterns": _this4.state.patterns
            });
          }
        }).always(function () {
          // Hide the loader
          Loader.hide();
        });
      }
    }
  }, {
    key: "patternEdit",
    value: function patternEdit(id, ev) {
      ev.stopPropagation();
      this.setState({
        "pattern": Tools.afindo(this.state.patterns, '_id', id)
      });
    }
  }, {
    key: "patternFetch",
    value: function patternFetch() {
      var _this5 = this;

      // Show the loader
      Loader.show(); // Fetch the patterns from the service

      Services.read('natf', 'practice/patterns', {}).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          _this5.setState({
            "patterns": res.data
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "patternNew",
    value: function patternNew() {
      this.setState({
        "pattern": true
      });
    }
  }, {
    key: "patternUpdate",
    value: function patternUpdate() {
      var _this6 = this;

      // Show the loader
      Loader.show(); // Generate the pattern object

      pattern = this.refs.pattern.pattern;
      pattern._id = this.state.pattern._id; // Send the data to the service

      Services.update('natf', 'practice/pattern', pattern).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Find the pattern
          var i = Tools.afindi(_this6.state.patterns, '_id', pattern._id); // Update it

          _this6.state.patterns[i] = pattern; // Set the state

          _this6.setState({
            "pattern": false,
            "patterns": _this6.state.patterns
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "points",
    value: function points(clutch, value) {
      // Init the new state
      var state = {
        "clutchAttempts": this.state.clutchAttempts,
        "clutchHits": this.state.clutchHits,
        "overwrite": false,
        "points": this.state.points,
        "totalPoints": this.state.totalPoints
      }; // Get the int version of the value

      var v = parseInt(value); // If the overwrite flag is set

      if (this.state.overwrite) {
        // Grab the last value
        var last = this.state.points[this.state.points.length - 1]; // Backtrack the clutch stats

        if (last[1]) {
          state.clutchAttempts -= 1;

          if (last[2] == 7) {
            state.clutchHits -= 1;
          }
        } // Backtrack the points stats


        if (last[2] != 'd') {
          state.totalPoints -= last[1];
        } // Remove the last item


        state.points.pop();
      } // Add to the points list


      state.points.push([this.state.bigaxe, clutch, value == 'd' ? 'd' : v]); // If we got a clutch attempt

      if (clutch) {
        state.clutchAttempts += 1;

        if (value == 7) {
          state.clutchHits += 1;
        }
      } // If we got a value


      if (v > 0) {
        state.totalPoints += v;
      } // If we're in custom mode


      if (this.state.mode == 'custom') {
        // Which throw are we
        var i = state.points.length % this.state.modeThrows.length; // If it's bigaxe

        state.bigaxe = this.state.modeThrows[i].bigaxe; // If it's clutch

        state.clutch = this.state.modeThrows[i].clutch ? 'expected' : 'none';
      } // Else if we're in dark unicorn mode
      else if (this.state.mode == 'darkunicorn') {
          state.clutch = state.points.length % 5 == 4 ? 'none' : 'expected';
        } // Else if we're in supernatural mode
        else if (this.state.mode == 'supernatural') {
            state.clutch = state.points.length % 5 == 4 ? 'expected' : 'none';
          } // Set the state


      this.setState(state);
    }
  }, {
    key: "pointsClass",
    value: function pointsClass(d) {
      var l = [];
      if (d[0]) l.push('bigaxe');
      if (d[1]) l.push('clutch');
      return l.join(' ');
    }
  }, {
    key: "pointsHide",
    value: function pointsHide() {
      this.setState({
        "showPoints": false
      });
    }
  }, {
    key: "pointsShow",
    value: function pointsShow() {
      this.setState({
        "showPoints": true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var self = this; // If we have points

      if (this.state.points.length) {
        // Init the last index
        var last = 28; // If we have less than 29

        if (this.state.points.length < 29) {
          last = this.state.points.length - 1;
        }
      }

      return React.createElement("div", {
        className: "natf"
      }, !this.state.mode && React.createElement(React.Fragment, null, this.state.thrower && React.createElement("div", {
        className: "aright"
      }, React.createElement("i", {
        "class": "fas fa-plus",
        onClick: this.patternNew
      })), React.createElement("dl", {
        className: "select"
      }, this.state.patterns && this.state.patterns.map(function (p, i) {
        return React.createElement(React.Fragment, {
          key: i
        }, React.createElement("dt", {
          "data-mode": "custom:" + p._id,
          onClick: self.modeSelect
        }, React.createElement("div", {
          className: "fright"
        }, React.createElement("i", {
          "class": "fas fa-edit",
          title: "Edit Pattern",
          onClick: self.patternEdit.bind(self, p._id)
        }), React.createElement("i", {
          "class": "far fa-trash-alt",
          title: "Delete Pattern",
          onClick: self.patternDelete.bind(self, p._id)
        })), React.createElement("span", null, p.title)), React.createElement("dd", null, p.descr));
      }), React.createElement("dt", {
        "data-mode": "free",
        onClick: this.modeSelect
      }, "Free Practice"), React.createElement("dd", null, "Anything is avaialble at any time, you must select the clutch to score it."), React.createElement("dt", {
        "data-mode": "supernatural",
        onClick: this.modeSelect
      }, "81s / Supernaturals / Unicorns"), React.createElement("dd", null, "Every fifth throw is for clutch, and it will be pre-selected for you on those turns."), React.createElement("dt", {
        "data-mode": "darkunicorn",
        onClick: this.modeSelect
      }, "Gretzky / Dark Unicorns"), React.createElement("dd", null, "Four clutches and a bullseye."), React.createElement("dt", {
        "data-mode": "clutch",
        onClick: this.modeSelect
      }, "Clutch"), React.createElement("dd", null, "Every throw is for the clutch and it's pre-selected every throw.")), Tools.isObject(this.state.pattern) && React.createElement(Modal, {
        buttons: [{
          "name": "update pattern",
          "callback": this.patternUpdate
        }],
        close: this.patternClose,
        title: "Edit Pattern",
        width: "95%"
      }, React.createElement(Pattern, {
        descr: this.state.pattern.descr,
        ref: "pattern",
        "throws": this.state.pattern["throws"],
        title: this.state.pattern.title
      })), this.state.pattern === true && React.createElement(Modal, {
        buttons: [{
          "name": "create pattern",
          "callback": this.patternCreate
        }],
        close: this.patternClose,
        title: "New Pattern",
        width: "95%"
      }, React.createElement(Pattern, {
        ref: "pattern"
      }))), this.state.mode && React.createElement(React.Fragment, null, React.createElement(Board, {
        ref: "board",
        clutchMode: self.state.clutch,
        onPoints: self.points
      }), React.createElement("div", {
        className: "bigaxe" + (this.state.bigaxe ? ' on' : ''),
        onClick: this.bigaxe
      }, "BA"), self.state.points.length > 0 && React.createElement(React.Fragment, null, React.createElement("div", {
        className: "averages"
      }, React.createElement("span", {
        className: "clutches fright"
      }, React.createElement("b", null, "Clutch %: "), React.createElement("span", null, self.state.clutchAttempts == 0 ? "0.0" : (self.state.clutchHits / self.state.clutchAttempts * 100.0).toFixed(1))), React.createElement("span", {
        className: "average fleft"
      }, React.createElement("b", null, "Avg Throw: "), React.createElement("span", null, (self.state.totalPoints / self.state.points.length).toFixed(2))), React.createElement("br", null)), React.createElement("div", {
        className: "points"
      }, self.state.points.length > 29 && React.createElement("span", {
        key: -1,
        className: "link bold",
        onClick: self.pointsShow
      }, "..."), self.state.points.slice(-29).map(function (p, i) {
        if (i == last) {
          return React.createElement("span", {
            key: i,
            className: "last " + (self.state.overwrite ? 'overwrite' : self.pointsClass(p)),
            onClick: self.overwrite
          }, p[2]);
        } else {
          return React.createElement("span", {
            key: i,
            className: self.pointsClass(p)
          }, p[2]);
        }
      }))), React.createElement("div", {
        className: "reset fright",
        onClick: self.reset
      }, "Reset"), this.state.thrower && this.state.points.length > 0 && React.createElement("div", {
        className: "save fleft",
        onClick: self.save
      }, "Save & Reset"), self.state.showPoints && React.createElement(Modal, {
        title: "All points this practice",
        close: self.pointsHide
      }, React.createElement("div", {
        className: "allPoints"
      }, self.state.points.map(function (p, i) {
        return React.createElement("span", {
          key: i,
          className: self.pointsClass(p)
        }, p[2]);
      })))));
    }
  }, {
    key: "reset",
    value: function reset() {
      // Init the reset flag
      var reset = true; // If there's points

      if (this.state.points.length) {
        // Update the flag based on the user's response
        reset = confirm('Are you sure you want to reset your practice?');
      } // If we can reset


      if (reset) {
        this.setState({
          "clutchAttempts": 0,
          "clutchHits": 0,
          "mode": null,
          "points": [],
          "showPoints": false,
          "totalPoints": 0
        });
      }
    }
  }, {
    key: "save",
    value: function save(ev) {
      var _this7 = this;

      // Show loader
      Loader.show(); // Send the practice to the NATF service

      Services.create('natf', 'practice', {
        "points": this.state.points
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Notify
          Events.trigger('success', 'Practice saved!'); // Reset

          _this7.setState({
            "clutchAttempts": 0,
            "clutchHits": 0,
            "mode": null,
            "points": [],
            "showPoints": false,
            "totalPoints": 0
          });
        }
      }).always(function () {
        // Hide loader
        Loader.hide();
      });
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      // Set the thrower
      this.setState({
        "thrower": thrower
      }); // Get the custom practice patterns

      this.patternFetch();
    }
  }, {
    key: "signout",
    value: function signout() {
      // Remove the thrower and patterns
      this.setState({
        "patterns": false,
        "thrower": false
      });
    }
  }]);

  return Practice;
}(React.Component); // Export the component


module.exports = Practice;

/***/ }),

/***/ "./webpack/react/natf/stats.jsx":
/*!**************************************!*\
  !*** ./webpack/react/natf/stats.jsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Stats
 *
 * Fetchs and displays NATF stats for practice and matches
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-25
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Hash = __webpack_require__(/*! ../../generic/hash.js */ "./webpack/generic/hash.js"); // Generic components


var _require = __webpack_require__(/*! ../generic/menu.jsx */ "./webpack/react/generic/menu.jsx"),
    Menu = _require.Menu,
    Item = _require.Item; // Stats components


var Match = __webpack_require__(/*! ./statsMatch.jsx */ "./webpack/react/natf/statsMatch.jsx");

var Practice = __webpack_require__(/*! ./statsPractice.jsx */ "./webpack/react/natf/statsPractice.jsx"); // Stats component


var Stats =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Stats, _React$Component);

  function Stats(props) {
    var _this;

    _classCallCheck(this, Stats);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stats).call(this, props)); // Initialise the state

    _this.state = {
      "which": Hash.get('which', 'practice')
    }; // Bind methods

    _this.whichChange = _this.whichChange.bind(_assertThisInitialized(_this));
    _this.whichHash = _this.whichHash.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Stats, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any which hash change events
      Hash.watch('which', this.whichHash);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any which hash change events
      Hash.unwatch('which', this.whichHash); // Remove the which from the hash

      Hash.set('which', null);
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement(React.Fragment, null, React.createElement(Menu, {
        className: "menu secondary",
        selected: self.state.which,
        onChange: self.whichChange
      }, React.createElement(Item, {
        name: "practice"
      }, "Practice"), React.createElement(Item, {
        name: "match"
      }, "Matches")), React.createElement("div", {
        id: "content"
      }, React.createElement("div", {
        className: "natf"
      }, self.state.which == 'practice' && React.createElement(Practice, {
        thrower: self.props.thrower
      }), self.state.which == 'match' && React.createElement(Match, {
        thrower: self.props.thrower
      }))));
    }
  }, {
    key: "whichChange",
    value: function whichChange(which) {
      Hash.set('which', which);
    }
  }, {
    key: "whichHash",
    value: function whichHash(which) {
      if (which != this.state.which) {
        if (which == null) {
          which = 'practice';
        }

        this.setState({
          "which": which
        });
      }
    }
  }]);

  return Stats;
}(React.Component); // Export the component


module.exports = Stats;

/***/ }),

/***/ "./webpack/react/natf/statsMatch.jsx":
/*!*******************************************!*\
  !*** ./webpack/react/natf/statsMatch.jsx ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Stats: Match
 *
 * Fetchs and displays NATF stats for matches
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-15
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Loader = __webpack_require__(/*! ../../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../../generic/services.js */ "./webpack/generic/services.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Site modules


var Utils = __webpack_require__(/*! ../../utils.js */ "./webpack/utils.js"); // Components


var PieClutch = __webpack_require__(/*! ./pieClutch.jsx */ "./webpack/react/natf/pieClutch.jsx");

var PiePaint = __webpack_require__(/*! ./piePaint.jsx */ "./webpack/react/natf/piePaint.jsx");

var PieRegular = __webpack_require__(/*! ./pieRegular.jsx */ "./webpack/react/natf/pieRegular.jsx"); // StatsMatch component


var StatsMatch =
/*#__PURE__*/
function (_React$Component) {
  _inherits(StatsMatch, _React$Component);

  function StatsMatch(props) {
    var _this;

    _classCallCheck(this, StatsMatch);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatsMatch).call(this, props)); // Initialise the state

    _this.state = {
      "data": null,
      "thrower": props.thrower // Bind methods

    };
    _this.signin = _this.signin.bind(_assertThisInitialized(_this));
    _this.signout = _this.signout.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(StatsMatch, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track signin / signout
      Events.add('signin', this.signin);
      Events.add('signout', this.signout); // If someone is logged in

      if (this.state.thrower) {
        // Fetch the match stats
        this.fetch();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking signin / signout
      Events.remove('signin', this.signin);
      Events.remove('signout', this.signout);
    }
  }, {
    key: "fetch",
    value: function fetch() {
      var _this2 = this;

      // Show the loader
      Loader.show(); // Fetch the match stats

      Services.read('natf', 'match/stats', {}).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Add the stats to the state
          _this2.setState({
            "data": res.data
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "render",
    value: function render() {
      var match = this.state.data; // If there's data

      if (match) {
        return React.createElement("div", {
          className: "match"
        }, React.createElement("h2", null, "Regulation"), React.createElement("div", {
          className: "mwl"
        }, React.createElement("div", null, "Matches"), React.createElement("div", null, "Wins"), React.createElement("div", null, "Losses")), React.createElement("div", {
          className: "mwl"
        }, React.createElement("div", null, match.matches), React.createElement("div", {
          className: "win"
        }, match.wins), React.createElement("div", {
          className: "loss"
        }, match.losses)), React.createElement("div", {
          className: "esnu"
        }, React.createElement("div", null, "81s"), React.createElement("div", null, "Supers"), React.createElement("div", null, "Naturals"), React.createElement("div", null, "Unnaturals")), React.createElement("div", {
          className: "esnu"
        }, React.createElement("div", null, match.eightyones), React.createElement("div", null, match.supernaturals), React.createElement("div", null, match.naturals), React.createElement("div", null, match.unnaturals)), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, "Regular"), React.createElement("div", null, "Clutches")), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, match.regular.attempts), React.createElement("div", null, match.clutches.attempts)), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, React.createElement(PieRegular, {
          height: "150px",
          data: [match.regular.fives, match.regular.threes, match.regular.ones, match.regular.zeros, match.regular.drops]
        })), React.createElement("div", null, React.createElement(PieClutch, {
          height: "150px",
          data: [match.clutches.hits, match.clutches.attempts - (match.clutches.hits + match.clutches.drops), match.clutches.drops]
        }))), React.createElement("h2", null, "Big Axe"), React.createElement("div", {
          className: "mwl"
        }, React.createElement("div", null, "Matches"), React.createElement("div", null, "Wins"), React.createElement("div", null, "Losses")), React.createElement("div", {
          className: "mwl"
        }, React.createElement("div", null, match.bigaxe.matches), React.createElement("div", {
          className: "win"
        }, match.bigaxe.wins), React.createElement("div", {
          className: "loss"
        }, match.bigaxe.losses)), React.createElement("div", {
          className: "bigaxe"
        }, React.createElement("div", null, "Paint"), React.createElement("div", null, "Regular"), React.createElement("div", null, "Clutches")), React.createElement("div", {
          className: "bigaxe"
        }, React.createElement("div", null, match.bigaxe.paint.attempts), React.createElement("div", null, match.bigaxe.points.regular.attempts), React.createElement("div", null, match.bigaxe.points.clutches.attempts)), React.createElement("div", {
          className: "bigaxe"
        }, React.createElement("div", null, React.createElement(PiePaint, {
          height: "150px",
          data: [match.bigaxe.paint.hits, match.bigaxe.paint.attempts - (match.bigaxe.paint.hits + match.bigaxe.paint.drops), match.bigaxe.paint.drops]
        })), React.createElement("div", null, React.createElement(PieRegular, {
          height: "150px",
          data: [match.bigaxe.points.regular.fives, match.bigaxe.points.regular.threes, match.bigaxe.points.regular.ones, match.bigaxe.points.regular.zeros, match.bigaxe.points.regular.drops]
        })), React.createElement("div", null, React.createElement(PieClutch, {
          height: "150px",
          data: [match.bigaxe.points.clutches.hits, match.bigaxe.points.clutches.attempts - (match.bigaxe.points.clutches.hits + match.bigaxe.points.clutches.drops), match.bigaxe.points.clutches.drops]
        }))));
      } else {
        return React.createElement("div", null);
      }
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      // Set the thrower
      this.setState({
        "thrower": thrower
      }); // Fetch the match stats

      this.fetch();
    }
  }, {
    key: "signout",
    value: function signout() {
      this.setState({
        "thrower": false
      });
    }
  }]);

  return StatsMatch;
}(React.Component); // Export the component


module.exports = StatsMatch;

/***/ }),

/***/ "./webpack/react/natf/statsPractice.jsx":
/*!**********************************************!*\
  !*** ./webpack/react/natf/statsPractice.jsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * NATF Stats: Practice
 *
 * Fetchs and displays NATF stats for practices
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-15
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Loader = __webpack_require__(/*! ../../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../../generic/services.js */ "./webpack/generic/services.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Site modules


var Utils = __webpack_require__(/*! ../../utils.js */ "./webpack/utils.js"); // Generic Components


var Graph = __webpack_require__(/*! ../generic/graph.jsx */ "./webpack/react/generic/graph.jsx");

var Modal = __webpack_require__(/*! ../generic/modal.jsx */ "./webpack/react/generic/modal.jsx"); // Components


var PieClutch = __webpack_require__(/*! ./pieClutch.jsx */ "./webpack/react/natf/pieClutch.jsx");

var PieRegular = __webpack_require__(/*! ./pieRegular.jsx */ "./webpack/react/natf/pieRegular.jsx"); // Practice component


var Practice =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Practice, _React$Component);

  function Practice(props) {
    _classCallCheck(this, Practice);

    // Call the parent constructor
    return _possibleConstructorReturn(this, _getPrototypeOf(Practice).call(this, props));
  }

  _createClass(Practice, [{
    key: "pointsClass",
    value: function pointsClass(d) {
      var l = [];
      if (d.bigaxe) l.push('bigaxe');
      if (d.clutch) l.push('clutch');
      return l.join(' ');
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      var data = this.props.data;
      return React.createElement(React.Fragment, null, React.createElement("h2", null, "All Throws"), React.createElement("div", {
        className: "allPoints"
      }, data.data.map(function (p, i) {
        return React.createElement("span", {
          key: i,
          className: self.pointsClass(p)
        }, "" + p.value);
      })), React.createElement("br", null), React.createElement("h2", null, "Hatchet"), React.createElement("div", {
        className: "throws"
      }, React.createElement("div", null, "Target"), React.createElement("div", null, "Clutches")), React.createElement("div", {
        className: "throws"
      }, React.createElement("div", null, data.stats.standard.regular.attempts), React.createElement("div", null, data.stats.standard.clutches.attempts)), React.createElement("div", {
        className: "throws"
      }, React.createElement("div", null, React.createElement(PieRegular, {
        height: "150px",
        data: [data.stats.standard.regular.fives, data.stats.standard.regular.threes, data.stats.standard.regular.ones, data.stats.standard.regular.zeros, data.stats.standard.regular.drops]
      })), React.createElement("div", null, React.createElement(PieClutch, {
        height: "150px",
        data: [data.stats.standard.clutches.hits, data.stats.standard.clutches.attempts - (data.stats.standard.clutches.hits + data.stats.standard.clutches.drops), data.stats.standard.clutches.drops]
      }))), React.createElement("h2", null, "Big Axe"), React.createElement("div", {
        className: "throws"
      }, React.createElement("div", null, "Target"), React.createElement("div", null, "Clutches")), React.createElement("div", {
        className: "throws"
      }, React.createElement("div", null, data.stats.bigaxe.regular.attempts), React.createElement("div", null, data.stats.bigaxe.clutches.attempts)), React.createElement("div", {
        className: "throws"
      }, React.createElement("div", null, React.createElement(PieRegular, {
        height: "150px",
        data: [data.stats.bigaxe.regular.fives, data.stats.bigaxe.regular.threes, data.stats.bigaxe.regular.ones, data.stats.bigaxe.regular.zeros, data.stats.bigaxe.regular.drops]
      })), React.createElement("div", null, React.createElement(PieClutch, {
        height: "150px",
        data: [data.stats.bigaxe.clutches.hits, data.stats.bigaxe.clutches.attempts - (data.stats.bigaxe.clutches.hits + data.stats.bigaxe.clutches.drops), data.stats.bigaxe.clutches.drops]
      }))));
    }
  }]);

  return Practice;
}(React.Component); // StatsPractice component


var StatsPractice =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(StatsPractice, _React$Component2);

  function StatsPractice(props) {
    var _this;

    _classCallCheck(this, StatsPractice);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatsPractice).call(this, props)); // Initialise the state

    _this.state = {
      "all": false,
      "graphs": false,
      "one": false,
      "overall": null,
      "practices": [],
      "thrower": props.thrower
    }; // Bind methods

    _this.one = _this.one.bind(_assertThisInitialized(_this));
    _this.oneHide = _this.oneHide.bind(_assertThisInitialized(_this));
    _this.all = _this.all.bind(_assertThisInitialized(_this));
    _this.signin = _this.signin.bind(_assertThisInitialized(_this));
    _this.signout = _this.signout.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(StatsPractice, [{
    key: "all",
    value: function all() {
      this.fetch(true);
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track signin / signout
      Events.add('signin', this.signin);
      Events.add('signout', this.signout); // If someone is logged in

      if (this.state.thrower) {
        // Fetch the practice stats
        this.fetch();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking signin / signout
      Events.remove('signin', this.signin);
      Events.remove('signout', this.signout);
    }
  }, {
    key: "fetch",
    value: function fetch(all) {
      var _this2 = this;

      // If All is not passed
      if (typeof all == 'undefined') {
        all = false;
      } // Show the loader


      Loader.show(); // Fetch the practice stats

      Services.read('natf', 'practice/stats', {
        "all": all
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Add the stats to the state
          _this2.setState({
            "graphs": _this2.processGraphs(res.data.graphs),
            "overall": res.data.overall,
            "practices": res.data.practices
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "one",
    value: function one(ev) {
      var _this3 = this;

      // Get the ID
      var id = ev.currentTarget.value; // If it's -1, do nothing

      if (id == '-1') {
        return;
      } // Show the loader


      Loader.show(); // Fetch the practice data

      Services.read('natf', 'practice/data', {
        "id": id
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Add the stats to the state
          _this3.setState({
            "one": res.data
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "oneHide",
    value: function oneHide() {
      this.setState({
        "one": false
      });
    }
  }, {
    key: "processGraphs",
    value: function processGraphs(data) {
      // Init the return data
      var ret = {
        "standard": {
          "regular": {
            "labels": [],
            "datasets": [{
              "label": "Fives",
              "data": [],
              "fill": false,
              "borderColor": "rgb(0,0,0,0.9)",
              "lineTension": 0.1
            }, {
              "label": "Threes",
              "data": [],
              "fill": false,
              "borderColor": "rgb(255,0,0,0.9)",
              "lineTension": 0.1
            }, {
              "label": "Ones",
              "data": [],
              "fill": false,
              "borderColor": "rgb(0,0,255,0.9)",
              "lineTension": 0.1
            }, {
              "label": "Zeros",
              "data": [],
              "fill": false,
              "borderColor": "rgb(100,100,100,0.5)",
              "lineTension": 0.1
            }, {
              "label": "Drops",
              "data": [],
              "fill": false,
              "borderColor": "rgb(200,200,200,0.5)",
              "lineTension": 0.1
            }]
          },
          "clutches": {
            "labels": [],
            "datasets": [{
              "label": "Hits",
              "data": [],
              "fill": false,
              "borderColor": "rgb(0,255,0,0.9)",
              "lineTension": 0.1
            }, {
              "label": "Misses",
              "data": [],
              "fill": false,
              "borderColor": "rgb(100,100,100,0.5)",
              "lineTension": 0.1
            }, {
              "label": "Drops",
              "data": [],
              "fill": false,
              "borderColor": "rgb(200,200,200,0.5)",
              "lineTension": 0.1
            }]
          }
        },
        "bigaxe": {
          "regular": {
            "labels": [],
            "datasets": [{
              "label": "Fives",
              "data": [],
              "fill": false,
              "borderColor": "rgb(0,0,0,0.9)",
              "lineTension": 0.1
            }, {
              "label": "Threes",
              "data": [],
              "fill": false,
              "borderColor": "rgb(255,0,0,0.9)",
              "lineTension": 0.1
            }, {
              "label": "Ones",
              "data": [],
              "fill": false,
              "borderColor": "rgb(0,0,255,0.9)",
              "lineTension": 0.1
            }, {
              "label": "Zeros",
              "data": [],
              "fill": false,
              "borderColor": "rgb(100,100,100,0.5)",
              "lineTension": 0.1
            }, {
              "label": "Drops",
              "data": [],
              "fill": false,
              "borderColor": "rgb(200,200,200,0.5)",
              "lineTension": 0.1
            }]
          },
          "clutches": {
            "labels": [],
            "datasets": [{
              "label": "Hits",
              "data": [],
              "fill": false,
              "borderColor": "rgb(0,255,0,0.9)",
              "lineTension": 0.1
            }, {
              "label": "Misses",
              "data": [],
              "fill": false,
              "borderColor": "rgb(100,100,100,0.5)",
              "lineTension": 0.1
            }, {
              "label": "Drops",
              "data": [],
              "fill": false,
              "borderColor": "rgb(200,200,200,0.5)",
              "lineTension": 0.1
            }]
          }
        } // Go through each set of stats backwards

      };

      for (var i = data.length - 1; i >= 0; --i) {
        // Add the labels
        var ts = Utils.date(data[i]._created);
        ret.standard.regular.labels.push(ts);
        ret.standard.clutches.labels.push(ts);
        ret.bigaxe.regular.labels.push(ts);
        ret.bigaxe.clutches.labels.push(ts); // Calculate the hatchet target percentages

        if (data[i].stats.standard.regular.attempts == 0) {
          ret.standard.regular.datasets[0].data.push(0.0);
          ret.standard.regular.datasets[1].data.push(0.0);
          ret.standard.regular.datasets[2].data.push(0.0);
          ret.standard.regular.datasets[3].data.push(0.0);
          ret.standard.regular.datasets[4].data.push(0.0);
        } else {
          ret.standard.regular.datasets[0].data.push((data[i].stats.standard.regular.fives / data[i].stats.standard.regular.attempts * 100.0).toFixed(1));
          ret.standard.regular.datasets[1].data.push((data[i].stats.standard.regular.threes / data[i].stats.standard.regular.attempts * 100.0).toFixed(1));
          ret.standard.regular.datasets[2].data.push((data[i].stats.standard.regular.ones / data[i].stats.standard.regular.attempts * 100.0).toFixed(1));
          ret.standard.regular.datasets[3].data.push((data[i].stats.standard.regular.zeros / data[i].stats.standard.regular.attempts * 100.0).toFixed(1));
          ret.standard.regular.datasets[4].data.push((data[i].stats.standard.regular.drops / data[i].stats.standard.regular.attempts * 100.0).toFixed(1));
        } // Calculate the hatchet clutch percentages


        if (data[i].stats.standard.clutches.attempts == 0) {
          ret.standard.clutches.datasets[0].data.push(0.0);
          ret.standard.clutches.datasets[1].data.push(0.0);
          ret.standard.clutches.datasets[2].data.push(0.0);
        } else {
          ret.standard.clutches.datasets[0].data.push((data[i].stats.standard.clutches.hits / data[i].stats.standard.clutches.attempts * 100.0).toFixed(1));
          ret.standard.clutches.datasets[1].data.push(((data[i].stats.standard.clutches.attempts - (data[i].stats.standard.clutches.drops + data[i].stats.standard.clutches.hits)) / data[i].stats.standard.clutches.attempts * 100.0).toFixed(1));
          ret.standard.clutches.datasets[2].data.push((data[i].stats.standard.clutches.drops / data[i].stats.standard.clutches.attempts * 100.0).toFixed(1));
        } // Calculate the bigaxe target percentages


        if (data[i].stats.bigaxe.regular.attempts == 0) {
          ret.bigaxe.regular.datasets[0].data.push(0.0);
          ret.bigaxe.regular.datasets[1].data.push(0.0);
          ret.bigaxe.regular.datasets[2].data.push(0.0);
          ret.bigaxe.regular.datasets[3].data.push(0.0);
          ret.bigaxe.regular.datasets[4].data.push(0.0);
        } else {
          ret.bigaxe.regular.datasets[0].data.push((data[i].stats.bigaxe.regular.fives / data[i].stats.bigaxe.regular.attempts * 100.0).toFixed(1));
          ret.bigaxe.regular.datasets[1].data.push((data[i].stats.bigaxe.regular.threes / data[i].stats.bigaxe.regular.attempts * 100.0).toFixed(1));
          ret.bigaxe.regular.datasets[2].data.push((data[i].stats.bigaxe.regular.ones / data[i].stats.bigaxe.regular.attempts * 100.0).toFixed(1));
          ret.bigaxe.regular.datasets[3].data.push((data[i].stats.bigaxe.regular.zeros / data[i].stats.bigaxe.regular.attempts * 100.0).toFixed(1));
          ret.bigaxe.regular.datasets[4].data.push((data[i].stats.bigaxe.regular.drops / data[i].stats.bigaxe.regular.attempts * 100.0).toFixed(1));
        } // Calculate the bigaxe clutch percentages


        if (data[i].stats.bigaxe.clutches.attempts == 0) {
          ret.bigaxe.clutches.datasets[0].data.push(0.0);
          ret.bigaxe.clutches.datasets[1].data.push(0.0);
          ret.bigaxe.clutches.datasets[2].data.push(0.0);
        } else {
          ret.bigaxe.clutches.datasets[0].data.push((data[i].stats.bigaxe.clutches.hits / data[i].stats.bigaxe.clutches.attempts * 100.0).toFixed(1));
          ret.bigaxe.clutches.datasets[1].data.push(((data[i].stats.bigaxe.clutches.attempts - (data[i].stats.bigaxe.clutches.drops + data[i].stats.bigaxe.clutches.hits)) / data[i].stats.bigaxe.clutches.attempts * 100.0).toFixed(1));
          ret.bigaxe.clutches.datasets[2].data.push((data[i].stats.bigaxe.clutches.drops / data[i].stats.bigaxe.clutches.attempts * 100.0).toFixed(1));
        }
      } // Return the processed data


      return ret;
    }
  }, {
    key: "render",
    value: function render() {
      var overall = this.state.overall; // If there's data

      if (overall) {
        return React.createElement("div", {
          className: "practice"
        }, React.createElement("h2", null, "View Specific Practice"), React.createElement("div", {
          className: "gap large"
        }, React.createElement("p", null, React.createElement("select", {
          onChange: this.one
        }, React.createElement("option", {
          value: "-1"
        }, "Select a Practice"), this.state.practices.map(function (p, i) {
          return React.createElement("option", {
            value: p['_id']
          }, Utils.datetime(p['_created']));
        })))), React.createElement("h2", null, "Hatchet"), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, "Target"), React.createElement("div", null, "Clutches")), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, overall.standard.regular.attempts), React.createElement("div", null, overall.standard.clutches.attempts)), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, React.createElement(PieRegular, {
          height: "150px",
          data: [overall.standard.regular.fives, overall.standard.regular.threes, overall.standard.regular.ones, overall.standard.regular.zeros, overall.standard.regular.drops]
        })), React.createElement("div", null, React.createElement(PieClutch, {
          height: "150px",
          data: [overall.standard.clutches.hits, overall.standard.clutches.attempts - (overall.standard.clutches.hits + overall.standard.clutches.drops), overall.standard.clutches.drops]
        }))), React.createElement("div", {
          className: "title"
        }, "Target"), React.createElement("div", {
          className: "gap small"
        }, React.createElement(Graph, {
          data: this.state.graphs.standard.regular
        })), React.createElement("div", {
          className: "title"
        }, "Clutches"), React.createElement("div", {
          className: "gap large"
        }, React.createElement(Graph, {
          data: this.state.graphs.standard.clutches
        })), React.createElement("h2", null, "Big Axe"), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, "Target"), React.createElement("div", null, "Clutches")), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, overall.bigaxe.regular.attempts), React.createElement("div", null, overall.bigaxe.clutches.attempts)), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, React.createElement(PieRegular, {
          height: "150px",
          data: [overall.bigaxe.regular.fives, overall.bigaxe.regular.threes, overall.bigaxe.regular.ones, overall.bigaxe.regular.zeros, overall.bigaxe.regular.drops]
        })), React.createElement("div", null, React.createElement(PieClutch, {
          height: "150px",
          data: [overall.bigaxe.clutches.hits, overall.bigaxe.clutches.attempts - (overall.bigaxe.clutches.hits + overall.bigaxe.clutches.drops), overall.bigaxe.clutches.drops]
        }))), React.createElement("div", {
          className: "title"
        }, "Target"), React.createElement("div", {
          className: "gap small"
        }, React.createElement(Graph, {
          data: this.state.graphs.bigaxe.regular
        })), React.createElement("div", {
          className: "title"
        }, "Clutches"), React.createElement("div", {
          className: "gap large"
        }, React.createElement(Graph, {
          data: this.state.graphs.bigaxe.clutches
        })), this.state.one && React.createElement(Modal, {
          title: "Practice Throws",
          close: this.oneHide
        }, React.createElement(Practice, {
          data: this.state.one
        })));
      } else {
        return React.createElement("div", null);
      }
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      // Set the thrower
      this.setState({
        "thrower": thrower
      }); // Fetch the practice stats

      this.fetch();
    }
  }, {
    key: "signout",
    value: function signout() {
      this.setState({
        "thrower": false
      });
    }
  }]);

  return StatsPractice;
}(React.Component); // Export the component


module.exports = StatsPractice;

/***/ }),

/***/ "./webpack/react/opponent.jsx":
/*!************************************!*\
  !*** ./webpack/react/opponent.jsx ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Opponent
 *
 * A component for selecting an opponent via favourites or search
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-27
 */
// Generic modules
var Events = __webpack_require__(/*! ../generic/events.js */ "./webpack/generic/events.js");

var Loader = __webpack_require__(/*! ../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../generic/services.js */ "./webpack/generic/services.js"); // Site modules


var Utils = __webpack_require__(/*! ../utils.js */ "./webpack/utils.js"); // Elements


var InputEnter = __webpack_require__(/*! ./generic/inputEnter.jsx */ "./webpack/react/generic/inputEnter.jsx"); // Sort favourites


function aliasSort(a, b) {
  return a.alias.localeCompare(b.alias);
}

var OpponentRow =
/*#__PURE__*/
function (_React$Component) {
  _inherits(OpponentRow, _React$Component);

  function OpponentRow(props) {
    var _this;

    _classCallCheck(this, OpponentRow);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(OpponentRow).call(this, props)); // Initialise the state

    _this.state = {
      "favourite": props.favourite,
      "thrower": props.thrower // Bind method

    };
    _this.add = _this.add.bind(_assertThisInitialized(_this));
    _this.remove = _this.remove.bind(_assertThisInitialized(_this));
    _this.selected = _this.selected.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(OpponentRow, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.thrower._id != this.props.thrower._id) {
        this.setState({
          "favourite": this.props.favourite,
          "thrower": this.props.thrower
        });
      }
    }
  }, {
    key: "add",
    value: function add(ev) {
      var _this2 = this;

      // Stop any further events
      ev.stopPropagation(); // Show the loader

      Loader.show(); // Call the service to add the favourite

      Services.create('auth', 'favourite', {
        "id": this.state.thrower._id
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          _this2.setState({
            "favourite": true
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "remove",
    value: function remove(ev) {
      var _this3 = this;

      // Stop any further events
      ev.stopPropagation(); // Show the loader

      Loader.show(); // Call the service to add the favourite

      Services["delete"]('auth', 'favourite', {
        "id": this.state.thrower._id
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          _this3.setState({
            "favourite": false
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("tr", {
        onClick: this.selected
      }, React.createElement("td", null, this.state.thrower.alias), React.createElement("td", null, this.state.favourite ? React.createElement("i", {
        className: "fas fa-user-times",
        style: {
          color: "red"
        },
        onClick: this.remove
      }) : React.createElement("i", {
        className: "fas fa-user-plus",
        style: {
          color: "green"
        },
        onClick: this.add
      })));
    }
  }, {
    key: "selected",
    value: function selected(ev) {
      ev.stopPropagation();
      this.props.selected(this.state.thrower);
    }
  }]);

  return OpponentRow;
}(React.Component); // Opponent Component


var Opponent =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(Opponent, _React$Component2);

  function Opponent(props) {
    var _this4;

    _classCallCheck(this, Opponent);

    // Call the parent constructor
    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Opponent).call(this, props)); // Initialise the state

    _this4.state = {
      "favourites": [],
      "mode": "favourites",
      "search": [],
      "thrower": props.thrower
    }; // Bind methods

    _this4.favouriteShow = _this4.favouriteShow.bind(_assertThisInitialized(_this4));
    _this4.search = _this4.search.bind(_assertThisInitialized(_this4));
    _this4.searchShow = _this4.searchShow.bind(_assertThisInitialized(_this4));
    _this4.selected = _this4.selected.bind(_assertThisInitialized(_this4));
    _this4.signin = _this4.signin.bind(_assertThisInitialized(_this4));
    return _this4;
  }

  _createClass(Opponent, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      Events.add('signin', this.signin); // If someone is logged in

      if (this.state.thrower) {
        this.favourites();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      Events.remove('signin', this.signin);
    }
  }, {
    key: "favourites",
    value: function favourites() {
      var _this5 = this;

      // Show the loader
      Loader.show(); // Call the service to get the favourites

      Services.read('auth', 'favourites', {}).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Sort the data
          res.data.sort(aliasSort); // Store the favourites

          _this5.setState({
            "favourites": res.data
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "favouriteShow",
    value: function favouriteShow() {
      this.setState({
        "mode": "favourites"
      });
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement(React.Fragment, null, self.state.mode == 'favourites' ? React.createElement("div", {
        className: "acenter"
      }, React.createElement("span", null, "Favorites"), " | ", React.createElement("span", {
        className: "link",
        onClick: self.searchShow
      }, "Search")) : React.createElement(React.Fragment, null, React.createElement("div", {
        className: "acenter"
      }, React.createElement("span", {
        className: "link",
        onClick: self.favouriteShow
      }, "Favorites"), " | ", React.createElement("span", null, "Search")), React.createElement("div", {
        className: "form"
      }, React.createElement("p", null, React.createElement(InputEnter, {
        onEnter: self.search,
        placeholder: "Search by alias"
      })))), React.createElement("table", null, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "Alias"), React.createElement("th", null, "Favorite"))), React.createElement("tbody", null, self.state.mode == 'favourites' ? self.state.favourites.map(function (t, i) {
        return React.createElement(OpponentRow, {
          key: i,
          thrower: t,
          favourite: true,
          selected: self.selected
        });
      }) : self.state.search.map(function (t, i) {
        return React.createElement(OpponentRow, {
          key: i,
          thrower: t,
          favourite: false,
          selected: self.selected
        });
      }))));
    }
  }, {
    key: "search",
    value: function search(q) {
      var _this6 = this;

      // If there's no query, do nothing
      if (q.length == 0) {
        return;
      } // Show the loader


      Loader.show(); // Call the service to get the search results

      Services.read('auth', 'search', {
        "q": q
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Sort the data
          res.data.sort(aliasSort); // Store the favourites

          _this6.setState({
            "search": res.data
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "searchShow",
    value: function searchShow() {
      this.setState({
        "mode": "search"
      });
    }
  }, {
    key: "selected",
    value: function selected(thrower) {
      if (typeof this.props.onSelect == 'function') {
        this.props.onSelect(thrower);
      }
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      this.favourites();
    }
  }]);

  return Opponent;
}(React.Component); // Export the component


module.exports = Opponent;

/***/ }),

/***/ "./webpack/react/practice.jsx":
/*!************************************!*\
  !*** ./webpack/react/practice.jsx ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Pracitce
 *
 * Displays the appropriate practice based on what org mode we're in
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-26
 */
// Generic modules
var Hash = __webpack_require__(/*! ../generic/hash.js */ "./webpack/generic/hash.js"); // Site components


var Natf = __webpack_require__(/*! ./natf/practice.jsx */ "./webpack/react/natf/practice.jsx");

var Watl = __webpack_require__(/*! ./watl/practice.jsx */ "./webpack/react/watl/practice.jsx"); // Practice component


var Practice =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Practice, _React$Component);

  function Practice(props) {
    var _this;

    _classCallCheck(this, Practice);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Practice).call(this, props)); // Initialise the state

    _this.state = {
      "org": Hash.get('org', _this.props.thrower.org || 'natf')
    }; // Bind methods

    _this.orgHash = _this.orgHash.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Practice, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any org hash change events
      Hash.watch('org', this.orgHash);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any org hash change events
      Hash.unwatch('org', this.orgHash);
    }
  }, {
    key: "menuChange",
    value: function menuChange(org) {
      Hash.set('org', org);
    }
  }, {
    key: "orgHash",
    value: function orgHash(org) {
      if (org != this.state.org) {
        if (org == null) {
          org = this.props.thrower.org || 'natf';
        }

        this.setState({
          "org": org
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        id: "practice"
      }, React.createElement("div", {
        id: "content"
      }, React.createElement("div", null, this.state.org == 'natf' && React.createElement(Natf, {
        thrower: this.props.thrower
      }), this.state.org == 'watl' && React.createElement(Watl, {
        thrower: this.props.thrower
      }))));
    }
  }]);

  return Practice;
}(React.Component); // Export the component


module.exports = Practice;

/***/ }),

/***/ "./webpack/react/site.jsx":
/*!********************************!*\
  !*** ./webpack/react/site.jsx ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Site
 *
 * Primary component for the entire site
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-20
 */
// Generic modules
var Events = __webpack_require__(/*! ../generic/events.js */ "./webpack/generic/events.js");

var Hash = __webpack_require__(/*! ../generic/hash.js */ "./webpack/generic/hash.js"); // Generic components


var _require = __webpack_require__(/*! ./generic/menu.jsx */ "./webpack/react/generic/menu.jsx"),
    Menu = _require.Menu,
    Item = _require.Item;

var Messages = __webpack_require__(/*! ./generic/messages.jsx */ "./webpack/react/generic/messages.jsx");

var Popups = __webpack_require__(/*! ./generic/popups.jsx */ "./webpack/react/generic/popups.jsx"); // Site components


var Header = __webpack_require__(/*! ./header.jsx */ "./webpack/react/header.jsx");

var Games = __webpack_require__(/*! ./games.jsx */ "./webpack/react/games.jsx");

var Match = __webpack_require__(/*! ./match.jsx */ "./webpack/react/match.jsx");

var Practice = __webpack_require__(/*! ./practice.jsx */ "./webpack/react/practice.jsx");

var Stats = __webpack_require__(/*! ./stats.jsx */ "./webpack/react/stats.jsx"); // Site component


var Site =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Site, _React$Component);

  function Site(props) {
    var _this;

    _classCallCheck(this, Site);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Site).call(this, props)); // Init the hash module and watch for org and page changes

    Hash.init();
    Hash.watch('org', _this.orgHash.bind(_assertThisInitialized(_this)));
    Hash.watch('page', _this.pageHash.bind(_assertThisInitialized(_this))); // Track any signin/signout events

    Events.add('signin', _this.signin.bind(_assertThisInitialized(_this)));
    Events.add('signout', _this.signout.bind(_assertThisInitialized(_this))); // Initialise the state

    _this.state = {
      "org": Hash.get('org', 'natf'),
      "page": Hash.get('page', 'home'),
      "thrower": false
    }; // Bind methods

    _this.pageChange = _this.pageChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Site, [{
    key: "orgHash",
    value: function orgHash(org) {
      // If the org has changed
      if (org != this.state.org) {
        this.setState({
          "org": org || 'natf'
        });
      }
    }
  }, {
    key: "pageHash",
    value: function pageHash(page) {
      // If the page has changed
      if (page != this.state.page) {
        this.setState({
          "page": page || "home"
        });
        this.refs.menu.selected = page;
      }
    }
  }, {
    key: "pageChange",
    value: function pageChange(name) {
      Hash.set("page", name);
    }
  }, {
    key: "render",
    value: function render() {
      // Stupid react
      var items = []; // If we're in natf mode

      if (this.state.org == 'natf') {
        items.push(React.createElement(Item, {
          key: 0,
          name: "games"
        }, "Games"));
      } // Everyone has practice


      items.push(React.createElement(Item, {
        key: 1,
        name: "practice"
      }, "Practice")); // If we have a thrower

      if (this.state.thrower) {
        items.push(React.createElement(Item, {
          key: 2,
          name: "match"
        }, "Match"));
        items.push(React.createElement(Item, {
          key: 3,
          name: "stats"
        }, "Stats"));
      }

      return React.createElement("div", {
        id: "site"
      }, React.createElement(Header, {
        thrower: this.state.thrower
      }), React.createElement(Menu, {
        ref: "menu",
        className: "menu primary",
        selected: this.state.page,
        onChange: this.pageChange
      }, items), this.state.page == 'home' && React.createElement("div", {
        className: "content"
      }, React.createElement("div", null, React.createElement("dl", {
        id: "home"
      }, React.createElement("dt", null, "v1.8.0"), React.createElement("dd", null, React.createElement("ul", {
        className: "fa-ul"
      }, React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Added WATL match and match stats."))), React.createElement("dt", null, "v1.7.0"), React.createElement("dd", null, React.createElement("ul", {
        className: "fa-ul"
      }, React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Moved organisation choice into header to save space."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Added percentages to all pie charts (NATF & WATL)."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Added throw percentage graphing of last ten sessions to practice stats (NATF & WATL)."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Added NATF games section with Around The World."))), React.createElement("dt", null, "v1.6.0"), React.createElement("dd", null, React.createElement("ul", {
        className: "fa-ul"
      }, React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "WATL Practice mode now availble, including practice patterns and stats."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Can now choose your preferred organisation, NATF or WATL, in account (", React.createElement("i", {
        className: "fas fa-user color-five"
      }), ") page."))), React.createElement("dt", null, "v1.5.0"), React.createElement("dd", null, React.createElement("ul", {
        className: "fa-ul"
      }, React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Big axe mode now available in NATF practice."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Can now create custom practice patterns in NATF practice. When signed in, click on the ", React.createElement("i", {
        "class": "fas fa-plus color-one"
      }), " to add your own."))), React.createElement("dt", null, "v1.4.0"), React.createElement("dd", null, React.createElement("ul", {
        className: "fa-ul"
      }, React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Now storing overall NATF practice stats instead of generating them every time. Stats page loads faster."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Started generating stats for NATF matches. Takes about a minute after a match is finished to update."))), React.createElement("dt", null, "v1.3.0"), React.createElement("dd", null, React.createElement("ul", {
        className: "fa-ul"
      }, React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Added \"Forgot Password\" link on sign in window. Please note, you can not change your password in this way if you do not have an e-mail address associated with your account."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Account icon (", React.createElement("i", {
        className: "fas fa-user color-five"
      }), ") now works and through it you can change your alias, your e-mail, and your password."))), React.createElement("dt", null, "v1.2.0"), React.createElement("dd", null, React.createElement("ul", {
        className: "fa-ul"
      }, React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "NATF Matches now available. Find other signed up throwers and challenge them to a 3 game match."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Throwers can be added to your favorites list for easy match starting by clicking on the green icon beside their name."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Match stats are not yet available, but fear not, the stats will not be lost, and any matches played now will still show up in stats once the feature is completed."))), React.createElement("dt", null, "v1.1.0"), React.createElement("dd", null, React.createElement("ul", {
        className: "fa-ul"
      }, React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Can now fetch all practice stats instead of just the last five."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Clicking on any row in stats will bring up all throws in that practice session."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Fixed a bug that didn't allow you to sign up with an e-mail."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "Fixed a bug that caused sign in not to be recognised after sign up."))), React.createElement("dt", null, "v1.0.0"), React.createElement("dd", null, React.createElement("ul", {
        className: "fa-ul"
      }, React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "NATF practice is available, no sign in required."), React.createElement("li", null, React.createElement("i", {
        className: "fa-li fas fa-angle-double-right"
      }), "With an account you can save your practice session and keep track of your over all progress in the Stats menu.")))))), this.state.page == 'games' && React.createElement(Games, {
        thrower: this.state.thrower
      }), this.state.page == 'practice' && React.createElement(Practice, {
        thrower: this.state.thrower
      }), this.state.page == 'match' && React.createElement(Match, {
        thrower: this.state.thrower
      }), this.state.page == 'stats' && React.createElement(Stats, {
        thrower: this.state.thrower
      }), React.createElement(Popups, null), React.createElement(Messages, null));
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      this.setState({
        "thrower": thrower
      });
    }
  }, {
    key: "signout",
    value: function signout() {
      // If the page needs to be signed in
      if (['practice'].indexOf(this.state.page) == -1) {
        Hash.set('page', null);
      } // Remove the thrower flag


      this.setState({
        "thrower": false
      });
    }
  }]);

  return Site;
}(React.Component); // Export the component


module.exports = Site;

/***/ }),

/***/ "./webpack/react/stats.jsx":
/*!*********************************!*\
  !*** ./webpack/react/stats.jsx ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Stats
 *
 * Displays the appropriate stats based on what org mode we're in
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-26
 */
// Generic modules
var Hash = __webpack_require__(/*! ../generic/hash.js */ "./webpack/generic/hash.js"); // Site components


var Natf = __webpack_require__(/*! ./natf/stats.jsx */ "./webpack/react/natf/stats.jsx");

var Watl = __webpack_require__(/*! ./watl/stats.jsx */ "./webpack/react/watl/stats.jsx"); // Stats component


var Stats =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Stats, _React$Component);

  function Stats(props) {
    var _this;

    _classCallCheck(this, Stats);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stats).call(this, props)); // Initialise the state

    _this.state = {
      "org": Hash.get('org', _this.props.thrower.org || 'natf')
    }; // Bind methods

    _this.orgHash = _this.orgHash.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Stats, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any org hash change events
      Hash.watch('org', this.orgHash);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any org hash change events
      Hash.unwatch('org', this.orgHash);
    }
  }, {
    key: "menuChange",
    value: function menuChange(org) {
      Hash.set('org', org);
    }
  }, {
    key: "orgHash",
    value: function orgHash(org) {
      if (org != this.state.org) {
        if (org == null) {
          org = this.props.thrower.org || 'natf';
        }

        this.setState({
          "org": org
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        id: "stats"
      }, React.createElement("div", null, this.state.org == 'natf' && React.createElement(Natf, {
        thrower: this.props.thrower
      }), this.state.org == 'watl' && React.createElement(Watl, {
        thrower: this.props.thrower
      })));
    }
  }]);

  return Stats;
}(React.Component); // Export the component


module.exports = Stats;

/***/ }),

/***/ "./webpack/react/thrower.jsx":
/*!***********************************!*\
  !*** ./webpack/react/thrower.jsx ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Thrower
 *
 * Manages editing details for the currently logged in thrower
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-25
 */
// Components
var Forms = __webpack_require__(/*! ./base/forms.jsx */ "./webpack/react/base/forms.jsx"); // Generic modules


var Events = __webpack_require__(/*! ../generic/events.js */ "./webpack/generic/events.js");

var Loader = __webpack_require__(/*! ../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../generic/services.js */ "./webpack/generic/services.js"); // Site modules


var Utils = __webpack_require__(/*! ../utils.js */ "./webpack/utils.js"); // Thrower component


var Thrower =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Thrower, _React$Component);

  function Thrower(props) {
    var _this;

    _classCallCheck(this, Thrower);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Thrower).call(this, props)); // Initialise the state

    _this.state = {
      "thrower": props.thrower
    }; // Bind methods

    _this.alias = _this.alias.bind(_assertThisInitialized(_this));
    _this.email = _this.email.bind(_assertThisInitialized(_this));
    _this.password = _this.password.bind(_assertThisInitialized(_this));
    _this.org = _this.org.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Thrower, [{
    key: "alias",
    value: function alias() {
      var _this2 = this;

      // Get the alias
      var alias = this.refs.alias.value.trim(); // If the alias is not long enough

      if (alias.length < 3 || alias.length > 32) {
        Forms.errorAdd(this.refs.alias);
        Events.trigger('error', 'Alias must be between 3 and 32 characters');
        return;
      } // Show the loader


      Loader.show(); // Update the alias

      Services.update('auth', 'thrower/alias', {
        "alias": alias
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          var error = ' ';

          switch (res.error.code) {
            case 1001:
              Forms.errorAdd(_this2.refs.alias);
              break;

            case 1200:
              Forms.errorAdd(_this2.refs.alias);
              Events.trigger('error', 'Alias is already in use');
              break;

            default:
              Events.trigger('error', JSON.stringify(res.error));
              break;
          }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If we got success


        if (res.data) {
          // Notify
          Events.trigger('success', 'Successfully changed your alias.'); // Let everyone know the alias changed

          _this2.state.thrower.alias = alias;
          Events.trigger('signin', _this2.state.thrower);
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "email",
    value: function email() {
      var _this3 = this;

      // Show the loader
      Loader.show(); // Update the email

      Services.update('auth', 'thrower/email', {
        "email": this.refs.email.value.trim(),
        "email_passwd": this.refs.email_passwd.value
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          var error = ' ';

          switch (res.error.code) {
            case 1001:
              Forms.errorAdd(_this3.refs.email);
              break;

            case 1206:
              Forms.errorAdd(_this3.refs['email']);
              Events.trigger('error', 'E-mail already in use');
              break;

            default:
              Events.trigger('error', JSON.stringify(res.error));
              break;
          }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If we got success


        if (res.data) {
          // Notify
          Events.trigger('success', 'Successfully changed your email.'); // Reset password

          _this3.refs.email_passwd.value = '';
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "org",
    value: function org() {
      var _this4 = this;

      // Save the org
      var org = this.refs.org.value; // Show the loader

      Loader.show(); // Update the org

      Services.update('auth', 'thrower/org', {
        "org": org
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          var error = ' ';

          switch (res.error.code) {
            case 1001:
              Forms.errorAdd(_this4.refs.org);
              break;

            default:
              Events.trigger('error', JSON.stringify(res.error));
              break;
          }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If we got success


        if (res.data) {
          // Let everyone know the org changed
          _this4.state.thrower.org = org;

          _this4.setState({
            "thrower": _this4.state.thrower
          });

          Events.trigger('signin', _this4.state.thrower);
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "password",
    value: function password() {
      var _this5 = this;

      // If the passwords don't match
      if (this.refs.new_passwd.value != this.refs.repeat_passwd.value) {
        Forms.errorAdd(this.refs.repeat_passwd);
        Events.trigger('error', 'Passwords do not match');
        return;
      } // Show loader


      Loader.show(); // Send the old and new password

      Services.update('auth', 'thrower/passwd', {
        "passwd": this.refs.passwd.value,
        "new_passwd": this.refs.new_passwd.value
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          var error = ' ';

          switch (res.error.code) {
            case 1001:
              Forms.errorAdd(_this5.refs.passwd);
              Events.trigger('error', 'Invalid password');
              break;

            case 1204:
              Forms.errorAdd(_this5.refs.new_passwd);
              Events.trigger('error', 'New password not strong enough');
              break;

            default:
              Events.trigger('error', JSON.stringify(res.error));
              break;
          }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If we got success


        if (res.data) {
          // Notify
          Events.trigger('success', 'Successfully changed your password.');
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(React.Fragment, null, React.createElement("div", {
        className: "form"
      }, React.createElement("h3", null, "Change Alias"), React.createElement("p", null, React.createElement("input", {
        ref: "alias",
        type: "text",
        title: "Alias",
        placeholder: "Alias",
        defaultValue: this.state.thrower.alias,
        onFocus: Forms.errorFocus
      })), React.createElement("p", {
        className: "aright"
      }, React.createElement("button", {
        onClick: this.alias
      }, "Change Alias"))), React.createElement("div", {
        className: "form"
      }, React.createElement("h3", null, "Change Email"), React.createElement("p", null, React.createElement("input", {
        ref: "email",
        type: "text",
        title: "E-mail",
        placeholder: "New e-mail",
        onFocus: Forms.errorFocus,
        autocomplete: "new-email"
      })), React.createElement("p", null, React.createElement("input", {
        ref: "email_passwd",
        type: "password",
        title: "Password",
        placeholder: "Your password",
        onFocus: Forms.errorFocus,
        autocomplete: "new-email-password"
      })), React.createElement("p", {
        className: "aright"
      }, React.createElement("button", {
        onClick: this.email
      }, "Change E-mail"))), React.createElement("div", {
        className: "form"
      }, React.createElement("h3", null, "Change Password"), React.createElement("p", null, React.createElement("input", {
        ref: "passwd",
        type: "password",
        title: "Old password",
        placeholder: "Old password",
        onFocus: Forms.errorFocus,
        style: {
          marginBottom: "10px"
        }
      })), React.createElement("p", null, React.createElement("input", {
        ref: "new_passwd",
        type: "password",
        title: "New password",
        placeholder: "Enter your new password",
        onFocus: Forms.errorFocus,
        autocomplete: "new-password"
      })), React.createElement("p", null, React.createElement("input", {
        ref: "repeat_passwd",
        type: "password",
        title: "Repeat new password",
        placeholder: "Repeat your new password",
        onFocus: Forms.errorFocus,
        autocomplete: "repeat-password"
      })), React.createElement("p", {
        className: "aright"
      }, React.createElement("button", {
        onClick: this.password
      }, "Change Password"))), React.createElement("div", {
        className: "form"
      }, React.createElement("h3", null, "Change preferred organisation"), React.createElement("p", null, React.createElement("select", {
        ref: "org",
        value: this.state.thrower.org,
        onChange: this.org
      }, React.createElement("option", {
        value: "natf"
      }, "NATF"), React.createElement("option", {
        value: "watl"
      }, "WATL")))));
    }
  }]);

  return Thrower;
}(React.Component); // Export the component


module.exports = Thrower;

/***/ }),

/***/ "./webpack/react/watl/board.jsx":
/*!**************************************!*\
  !*** ./webpack/react/watl/board.jsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * WATL Board
 *
 * Manages a standard WATL board
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-19
 */
// Board component
var Board =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Board, _React$Component);

  function Board(props) {
    var _this;

    _classCallCheck(this, Board);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // If there's no onPoints prop

    if (!props.onPoints) {
      throw 'must specify onPoints property for WATL Board';
    } // Init the killshot flag


    var killshot = false;

    switch (props.mode) {
      case 'expected_left':
        killshot = 'L';
        break;

      case 'expected_right':
        killshot = 'R';
        break;

      case 'expected':
        killshot = 'B';
        break;
    } // Initialise the state


    _this.state = {
      "mode": props.mode,
      "killshot": killshot
    }; // Bind methods

    _this.ksLeftClick = _this.ksLeftClick.bind(_assertThisInitialized(_this));
    _this.ksRightClick = _this.ksRightClick.bind(_assertThisInitialized(_this));
    _this.dropClick = _this.dropClick.bind(_assertThisInitialized(_this));
    _this.pointClick = _this.pointClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Board, [{
    key: "ksLeftClick",
    value: function ksLeftClick(ev) {
      // Stop propagation no matter what
      ev.stopPropagation(); // If clutches are not allowed

      if (this.state.mode == 'none' || this.state.mode == 'expected_right') {
        // Store the current target
        var target = ev.currentTarget; // Get the class name

        var className = target.className; // Set the invalid class

        target.className = className + ' invalid'; // And set a timeout to turn it off

        setTimeout(function () {
          target.className = className;
        }, 500); // Don't count the click

        return;
      } // Else if killshot right already selected
      else if (this.state.killshot == 'R') {
          // Switch which is selected
          this.setState({
            "killshot": 'L'
          });
        } else {
          if (this.state.killshot == 'L' || this.state.killshot == 'B') {
            if (this.props.onPoints('L', 8) !== false) {
              if (this.state.mode == 'select') {
                this.setState({
                  "killshot": false
                });
              }
            }
          } else {
            this.setState({
              "killshot": 'L'
            });
          }
        }
    }
  }, {
    key: "ksRightClick",
    value: function ksRightClick(ev) {
      // Stop propagation no matter what
      ev.stopPropagation(); // If clutches are not allowed

      if (this.state.mode == 'none' || this.state.mode == 'expected_left') {
        // Store the current target
        var target = ev.currentTarget; // Get the class name

        var className = target.className; // Set the invalid class

        target.className = className + ' invalid'; // And set a timeout to turn it off

        setTimeout(function () {
          target.className = className;
        }, 500); // Don't count the click

        return;
      } // Else if killshot right already selected
      else if (this.state.killshot == 'L') {
          // Switch which is selected
          this.setState({
            "killshot": 'R'
          });
        } else {
          if (this.state.killshot == 'R' || this.state.killshot == 'B') {
            if (this.props.onPoints('R', 8) !== false) {
              if (this.state.mode == 'select') {
                this.setState({
                  "killshot": false
                });
              }
            }
          } else {
            this.setState({
              "killshot": 'R'
            });
          }
        }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.mode != this.props.mode) {
        this.mode = this.props.mode;
      }
    }
  }, {
    key: "dropClick",
    value: function dropClick(ev) {
      // Stop propagation no matter what
      ev.stopPropagation(); // Store the current target

      var target = ev.currentTarget; // Send out the drop

      if (this.props.onPoints(this.state.killshot ? this.state.killshot : '0', 'd') !== false) {
        // De-select the killshots
        if (this.state.killshot) {
          this.setState({
            "killshot": false
          });
        } // Turn on the active flag


        target.className = 'drop active'; // And set a timeout to turn it off

        setTimeout(function () {
          target.className = 'drop';
        }, 500);
      }
    }
  }, {
    key: "pointClick",
    value: function pointClick(ev) {
      // Stop propagation no matter what
      ev.stopPropagation(); // Store the current target

      var target = ev.currentTarget; // Get the class names

      var classNames = target.className.split(' '); // If it's already active, do nothing

      if (classNames[1] && classNames[1] == 'active') {
        return;
      } // If there's a clutch selected


      var accepted = true;

      if (this.state.killshot) {
        accepted = this.props.onPoints(this.state.killshot, 0);

        if (accepted !== false) {
          if (this.state.mode == 'select') {
            this.setState({
              "killshot": false
            });
          }
        }
      } else {
        accepted = this.props.onPoints('0', parseInt(target.dataset.value));
      } // If the points were not rejected accepted


      if (accepted !== false) {
        // Turn on the active flag
        target.className = classNames[0] + ' active'; // And set a timeout to turn it off

        setTimeout(function () {
          target.className = classNames[0];
        }, 500);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", {
        className: "board",
        "data-value": 0,
        onClick: this.pointClick
      }, React.createElement("div", {
        className: "drop",
        onClick: this.dropClick
      }, "DROP"), React.createElement("div", {
        className: "one",
        "data-value": 1,
        onClick: this.pointClick
      }, React.createElement("div", {
        className: "killshot left" + (['L', 'B'].indexOf(this.state.killshot) != -1 ? ' selected' : ''),
        onClick: this.ksLeftClick
      }), React.createElement("div", {
        className: "two",
        "data-value": 2,
        onClick: this.pointClick
      }, React.createElement("div", {
        className: "three",
        "data-value": 3,
        onClick: this.pointClick
      }, React.createElement("div", {
        className: "four",
        "data-value": 4,
        onClick: this.pointClick
      }, React.createElement("div", {
        className: "six",
        "data-value": 6,
        onClick: this.pointClick
      })))), React.createElement("div", {
        className: "killshot right" + (['R', 'B'].indexOf(this.state.killshot) != -1 ? ' selected' : ''),
        onClick: this.ksRightClick
      })));
    }
  }, {
    key: "mode",
    set: function set(mode) {
      // Figure out the killshot value
      var killshot = false;

      switch (mode) {
        case 'none':
          killshot = false;
          break;

        case 'expected_left':
          killshot = 'L';
          break;

        case 'expected_right':
          killshot = 'R';
          break;

        case 'expected':
          killshot = 'B';
          break;

        case 'select':
          killshot = this.state.killshot;
          break;
      } // Set the new state


      this.setState({
        "mode": mode,
        "killshot": killshot
      });
    }
  }]);

  return Board;
}(React.Component); // Export the component


module.exports = Board;

/***/ }),

/***/ "./webpack/react/watl/match.jsx":
/*!**************************************!*\
  !*** ./webpack/react/watl/match.jsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * WATL Match
 *
 * Manages creating and playing a standard WATL match
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-25
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Hash = __webpack_require__(/*! ../../generic/hash.js */ "./webpack/generic/hash.js");

var Loader = __webpack_require__(/*! ../../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../../generic/services.js */ "./webpack/generic/services.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Site modules


var TwoWay = __webpack_require__(/*! ../../twoway.js */ "./webpack/twoway.js");

var Utils = __webpack_require__(/*! ../../utils.js */ "./webpack/utils.js"); // React components


var Board = __webpack_require__(/*! ./board.jsx */ "./webpack/react/watl/board.jsx");

var Opponent = __webpack_require__(/*! ../opponent.jsx */ "./webpack/react/opponent.jsx"); // Match Component


var Match =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Match, _React$Component);

  function Match(props) {
    var _this;

    _classCallCheck(this, Match);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Match).call(this, props)); // Initialise the state

    _this.state = {
      "alias": '',
      "overtime": false,
      "existing": false,
      "game": false,
      "id": false,
      "loser": false,
      "match": false,
      "mode": "opponent",
      "points": {},
      "thrower": props.thrower,
      "is": '',
      "winner": false
    }; // Bind methods

    _this.overtimeFinish = _this.overtimeFinish.bind(_assertThisInitialized(_this));
    _this.existingContinue = _this.existingContinue.bind(_assertThisInitialized(_this));
    _this.existingDelete = _this.existingDelete.bind(_assertThisInitialized(_this));
    _this.gameFinish = _this.gameFinish.bind(_assertThisInitialized(_this));
    _this.idCallback = _this.idCallback.bind(_assertThisInitialized(_this));
    _this.matchCallback = _this.matchCallback.bind(_assertThisInitialized(_this));
    _this.overwrite = _this.overwrite.bind(_assertThisInitialized(_this));
    _this.points = _this.points.bind(_assertThisInitialized(_this));
    _this.requestCallback = _this.requestCallback.bind(_assertThisInitialized(_this));
    _this.requestCancel = _this.requestCancel.bind(_assertThisInitialized(_this));
    _this.requestCreate = _this.requestCreate.bind(_assertThisInitialized(_this));
    _this.signin = _this.signin.bind(_assertThisInitialized(_this));
    _this.signout = _this.signout.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Match, [{
    key: "overtimeFinish",
    value: function overtimeFinish() {
      // Show the loader
      Loader.show(); // Clone the match state

      var ms = this.state.match; // Remove the finish and set the waiting

      ms.overtime_can_finish = false;
      ms.waiting = true; // Set the new state

      this.setState({
        "match": ms
      }); // Let the service know

      Services.update('watl', 'match/finish/overtime', {
        "id": this.state.id
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "calculateOvertimeFinished",
    value: function calculateOvertimeFinished(data) {
      // If the lengths don't match
      if (data.overtime['i'].length != data.overtime['o'].length) {
        // We aren't done
        return false;
      } // Loop through till we have no more throws


      for (var i = 0; i < data.overtime['i'].length; ++i) {
        // Don't overwrite the actual data
        var vals = {
          'i': data.overtime['i'][i],
          'o': data.overtime['o'][i]
        }; // If we got a drop, consider it a zero

        if (vals['i'] == 'd') {
          vals['i'] = 0;
        }

        if (vals['o'] == 'd') {
          vals['o'] = 0;
        } // If the values don't match, someone won


        if (vals['i'] != vals['o']) {
          // Allow finishing
          return true;
        }
      } // Not done yet


      return false;
    }
  }, {
    key: "calculateMatchState",
    value: function calculateMatchState(data) {
      // Init the state
      var state = {
        "throw": "1",
        "waiting": false
      }; // Are we opponent or initiator

      var is = this.state.thrower._id == data.initiator ? 'i' : 'o'; // If there's any overtime data it's safe to assume we're done with the
      //	regular match

      if (data.overtime && !Tools.empty(data.overtime)) {
        // Set mode
        state.mode = "overtime"; // Set the throw to the current length of existing throws

        state["throw"] = data.overtime[is].length; // If we're finished

        if (data.overtime.finished[is]) {
          state.waiting = true;
          state.overtime_can_finish = false;
        } // Do we need to show the finish button?
        else {
            state.overtime_can_finish = this.calculateOvertimeFinished(data);
          }
      } // Else, assume we are in game
      else {
          // Set the mode
          state.mode = "game"; // If we're finished

          if (data.game_finished[is]) {
            state.waiting = true;
          } // Else, go through each game
          else {
              // Go through each throw
              var t = "1";

              for (var _i = 0, _arr = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"]; _i < _arr.length; _i++) {
                t = _arr[_i];

                // If it doesn't exist
                if (typeof data.game[is][t] == 'undefined') {
                  break;
                }
              } // Store the round


              state["throw"] = t;
            }
        } // Return the state


      return state;
    }
  }, {
    key: "calculatePoints",
    value: function calculatePoints(g) {
      // Init the return
      oPoints = {
        'i': 0,
        'o': 0
      }; // Calculate the points

      for (var _i2 = 0, _arr2 = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]; _i2 < _arr2.length; _i2++) {
        var t = _arr2[_i2];

        if (g['i'][t]) {
          if (['5', '10'].indexOf(t) != -1) {
            oPoints['i'] += g['i'][t].value == 'd' ? 0 : g['i'][t].value;
          } else {
            oPoints['i'] += g['i'][t] == 'd' ? 0 : g['i'][t];
          }
        }

        if (g['o'][t]) {
          if (['5', '10'].indexOf(t) != -1) {
            oPoints['o'] += g['o'][t].value == 'd' ? 0 : g['o'][t].value;
          } else {
            oPoints['o'] += g['o'][t] == 'd' ? 0 : g['o'][t];
          }
        }
      }

      return oPoints;
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any signin/signout events
      Events.add('signin', this.signin);
      Events.add('signout', this.signout); // Track ID in hash

      Hash.watch('id', this.idCallback); // If we're signed in

      if (this.state.thrower) {
        // If there's an ID in the hash
        var id = Hash.get('id');

        if (id) {
          this.idCallback(id);
        } else {
          this.existingFetch();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any signin/signout events
      Events.remove('signin', this.signin);
      Events.remove('signout', this.signout); // Stop tracking ID in hash and remove it

      Hash.unwatch('id', this.idCallback);
      Hash.set('id', null); // If we're in request mode

      if (this.state.mode == 'request') {
        // Stop tracking the request
        TwoWay.untrack('auth', 'request-' + this.state.id, this.requestCallback);
      } else if (this.state.mode == 'match') {
        // Stop tracking the match
        TwoWay.untrack('watl', 'match-' + this.state.id, this.matchCallback);
      }
    }
  }, {
    key: "existingContinue",
    value: function existingContinue(ev) {
      Hash.set('id', 'm|' + ev.currentTarget.parentNode.dataset.id);
    }
  }, {
    key: "existingDelete",
    value: function existingDelete(ev) {
      var _this2 = this;

      // Show the loader
      Loader.show(); // Store the id

      var id = ev.currentTarget.parentNode.dataset.id; // Notify the service the match won't be completed

      Services["delete"]('watl', 'match', {
        "id": id
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          // If the thrower can't delete that record, or it's finished
          if (res.error.code == 1000) {
            _this2.existingRemove(id);
          } // If it's already deleted
          else if (res.error.code == 1104) {
              _this2.existingRemove(id);
            } // Unknown error
            else {
                Events.trigger('error', JSON.stringify(res.error));
              }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          _this2.existingRemove(id);
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "existingFetch",
    value: function existingFetch() {
      var _this3 = this;

      // Show the loader
      Loader.show(); // Find out if there's any unfinished games associated with this
      //	thrower

      Services.read('watl', 'match/unfinished', {}).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // If there's any
          if (res.data.length) {
            // Set the state
            _this3.setState({
              "mode": "existing",
              "existing": res.data
            });
          }
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "existingRemove",
    value: function existingRemove(id) {
      // Store the existing
      var existing = Tools.clone(this.state.existing); // Go through each one

      for (var i = 0; i < existing.length; ++i) {
        if (existing[i]._id == id) {
          existing.splice(i, 1);
        }
      } // Init the new state


      var state = {
        "existing": existing // If there's no more existing

      };

      if (existing.length == 0) {
        state.mode = 'opponent';
      } // Set the new state


      this.setState(state);
    }
  }, {
    key: "gameFinish",
    value: function gameFinish(ev) {
      // Clone the match state
      var ms = Tools.clone(this.state.match); // Show the loader

      Loader.show(); // Clone the match state

      var ms = Tools.clone(this.state.match); // Set the match state to waiting

      ms.waiting = true;
      this.setState({
        "match": ms
      }); // Notify backend the match is over

      Services.update('watl', 'match/finish/game', {
        "id": this.state.id
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        }
      }).always(function () {
        // Hide loader
        Loader.hide();
      });
    }
  }, {
    key: "idCallback",
    value: function idCallback(id) {
      var _this4 = this;

      // If there's an ID
      if (id) {
        // Split the ID
        id = id.split('|'); // If it's a request

        if (id[0] == 'r') {
          // Fetch the match
          Services.read('auth', 'match/request', {
            "id": id[1]
          }).done(function (res) {
            // If there's an error
            if (res.error && !Utils.serviceError(res.error)) {
              // If the match no longer exists
              if (res.error.code == 1104) {
                Events.trigger('error', "This match request no longer exists.");
                Hash.set('id', null);
                return;
              }

              Events.trigger('error', JSON.stringify(res.error));
            } // If there's a warning


            if (res.warning) {
              Events.trigger('warning', JSON.stringify(res.warning));
            } // If there's data


            if (res.data) {
              // Change the mode
              _this4.setState({
                "alias": res.data.alias,
                "id": id[1],
                "mode": "request"
              }); // Listen for an update on the request


              TwoWay.track('auth', 'request-' + id[1], _this4.requestCallback);
            }
          });
        } // Else if it's a match
        else if (id[0] == 'm') {
            // List for an update on the match
            TwoWay.track('watl', 'match-' + id[1], this.matchCallback); // Fetch the match

            Services.read('watl', 'match', {
              "id": id[1]
            }).done(function (res) {
              // If there's an error
              if (res.error && !Utils.serviceError(res.error)) {
                // If the match no longer exists
                if (res.error.code == 1104) {
                  Events.trigger('error', "This match no longer exists.");
                  Hash.set('id', null);
                  return;
                }

                Events.trigger('error', JSON.stringify(res.error));
              } // If there's a warning


              if (res.warning) {
                Events.trigger('warning', JSON.stringify(res.warning));
              } // If there's data


              if (res.data) {
                // If the game is finished
                if (res.data.finished) {
                  Events.trigger('error', "This match is already finished.");
                  Hash.set('id', null);
                  return;
                } // Calculate the match state


                var ms = _this4.calculateMatchState(res.data); // Are we initiator or opponent?


                var t = res.data.initiator == _this4.state.thrower._id ? 'i' : 'o'; // Store it in the state

                _this4.setState({
                  "alias": t == 'i' ? res.data['opponent_alias'] : res.data['initiator_alias'],
                  "overtime": res.data.overtime,
                  "game": res.data.game,
                  "id": id[1],
                  "match": ms,
                  "mode": "match",
                  "points": _this4.calculatePoints(res.data.game),
                  "is": t
                }, function () {
                  // If we're in game mode on throw five/ten
                  if (ms.mode == 'game') {
                    if (['5', '10'].indexOf(ms["throw"]) != -1) {
                      this.refs.board.mode = 'select';
                    } else {
                      this.refs.board.mode = 'none';
                    }
                  } else {
                    this.refs.board.mode = 'expected';
                  }
                });
              }
            });
          }
      } // Else reset the state
      else {
          this.reset();
        }
    }
  }, {
    key: "matchCallback",
    value: function matchCallback(msg) {
      // If we got an update on a big axe points throw
      if (msg.type == "overtime") {
        // If we need to start
        if (msg.subtype == "start") {
          // Clone the match state
          var ms = Tools.clone(this.state.match); // Set the mode to big axe target and reset the throw to 1

          ms.mode = "overtime";
          ms["throw"] = 0;
          ms.waiting = false;
          ms.overtime_can_finish = false; // Set the board mode

          this.refs.board.mode = 'expected'; // Set the new state

          this.setState({
            "overtime": {
              "i": [],
              "o": []
            },
            "match": ms
          });
        } // Else if we got a throw
        else if (msg.subtype == "throw") {
            // Clone the overtime and match state
            var ms = Tools.clone(this.state.match);
            var ot = Tools.clone(this.state.overtime); // If it's false

            if (!ot || typeof ot == 'undefined') {
              ot = {
                "finished": {
                  "i": false,
                  "o": false
                },
                "i": [],
                "o": []
              };
            } // If the thrower doesn't exist


            if (typeof ot[msg.thrower] == 'undefined') {
              ot[msg.thrower] = [];
            } // If the throw doesn't exist


            if (ot[msg.thrower].length == msg["throw"]) {
              ot[msg.thrower].push(msg.value);
            } else {
              ot[msg.thrower][msg["throw"]] = msg.value;
            } // Calculate the throws so we can know if we're done


            ms.overtime_can_finish = this.calculateOvertimeFinished(this.state);
            ms.waiting = false; // Set the new state

            this.setState({
              "match": ms,
              "overtime": ot
            });
          } // Else we aren't actually finished
          else if (msg.subtype == 'notfinished') {
              // Clone the match state
              var ms = Tools.clone(this.state.match); // Remove waiting and set to bigaxe target just in case

              ms.mode = 'overtime';
              ms.waiting = false; // Set the new state

              this.setState({
                "match": ms
              });
            }
      } // Else if the match was deleted
      else if (msg.type == 'deleted') {
          // Notify the thrower
          Events.trigger('error', this.state.alias + " deleted the match."); // Reset

          this.reset();
        } // Else if we got a message about a new throw in a game
        else if (msg.type == 'throw') {
            // Clone the game and match state
            var game = Tools.clone(this.state.game);
            var ms = Tools.clone(this.state.match); // Create the game if it doesn't exist

            if (typeof game == 'undefined') {
              game = {
                "i": {},
                "o": {}
              };
            } // If the thrower section of the game doesn't exist


            if (typeof game[msg.thrower] == 'undefined') {
              game[msg.thrower] = {};
            } // Add the throw


            game[msg.thrower][msg["throw"]] = msg.value; // Set the new state

            this.setState({
              "game": game,
              "points": this.calculatePoints(game)
            });
          } // Else if we got a winner
          else if (msg.type == 'winner') {
              // If we're the winner
              if (msg.is == this.state.is) {
                this.setState({
                  "winner": true
                });
              } // Else we're the loser
              else {
                  this.setState({
                    "loser": true
                  });
                } // Set a timeout to reset


              setTimeout(function () {
                Hash.set("id", null);
              }, 5000);
            }
    }
  }, {
    key: "overwrite",
    value: function overwrite(ev) {
      // Clone the match state
      var ms = Tools.clone(this.state.match); // If we're in game mode

      if (ms.mode == 'game') {
        // Change the throw
        ms["throw"] = ev.currentTarget.dataset["throw"]; // Set the board mode

        this.refs.board.mode = ['5', '10'].indexOf(ms["throw"]) != -1 ? 'select' : 'none';
      } // Else if we're in overtime mode
      else if (ms.mode == "overtime") {
          // Change the throw
          ms["throw"] = parseInt(ev.currentTarget.dataset["throw"]);
        } // Set the new state


      this.setState({
        "match": ms,
        "overwrite": true
      });
    }
  }, {
    key: "points",
    value: function points(killshot, value) {
      var _this5 = this;

      // Clone match state
      var ms = Tools.clone(this.state.match); // If we're in game

      if (ms.mode == "game") {
        // If we're on throw "11", aka, waiting to finish
        if (ms["throw"] == '11') {
          Events.trigger('error', "Finish the game or select a throw to overwrite.");
          return false;
        } // Show the loader


        Loader.show(); // Get the value or value/killshot

        var value = ['5', '10'].indexOf(ms["throw"]) != -1 ? {
          "killshot": killshot,
          "value": value
        } : value; // Save the value and notify the opponent

        Services.update('watl', 'match/game', {
          "id": this.state.id,
          "throw": ms["throw"],
          "value": value
        }).done(function (res) {
          // If there's an error
          if (res.error && !Utils.serviceError(res.error)) {
            Events.trigger('error', JSON.stringify(res.error));
          } // If there's a warning


          if (res.warning) {
            Events.trigger('warning', JSON.stringify(res.warning));
          } // If there's data


          if (res.data) {
            // Clone the game state
            var game = Tools.clone(_this5.state.game); // Store the point value

            game[_this5.state.is][ms["throw"]] = value; // If the overwrite flag is set

            if (_this5.state.overwrite) {
              var t = "11";

              for (var _i3 = 0, _arr3 = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"]; _i3 < _arr3.length; _i3++) {
                t = _arr3[_i3];

                if (typeof game[_this5.state.is][t] == 'undefined') {
                  break;
                }
              }

              ms["throw"] = t;
            } else {
              ms["throw"] = (parseInt(ms["throw"]) + 1).toString();
            } // Set the board mode


            _this5.refs.board.mode = ['5', '10'].indexOf(ms["throw"]) != -1 ? 'select' : 'none'; // Update the state

            _this5.setState({
              "game": game,
              "match": ms,
              "overwrite": false,
              "points": _this5.calculatePoints(game)
            });
          }
        }).always(function () {
          // Hide the loader
          Loader.hide();
        });
      } // Else we're in a overtime mode
      else {
          // Clone the overtime state
          var overtime = this.state.overtime; // Opponent is opposite of thrower

          var sO = this.state.is == 'i' ? 'o' : 'i'; // If there's no points

          if (typeof overtime == 'undefined') {
            overtime = {
              "finished": 0,
              "i": [],
              "o": []
            };
          } // If the length of this throwers throws is not equal or 1 less
          //	than the opponents, we can't accept this throw


          if (!this.state.overwrite && overtime[this.state.is].length > overtime[sO].length) {
            Events.trigger('error', "Please wait for " + this.state.alias + " to make their throw.");
            return false;
          } // Killshots count, anything else fails


          value = value == 8 ? 1 : 0; // Show the loader

          Loader.show(); // If the value doesn't exist yet, push it

          if (overtime[this.state.is].length == ms["throw"]) {
            overtime[this.state.is].push(value);
          } // Else, overwrite it
          else {
              overtime[this.state.is][ms["throw"]] = value;
            } // Save the value and notify the opponent


          Services.update('watl', 'match/overtime', {
            "id": this.state.id,
            "throw": ms["throw"],
            "value": value
          }).done(function (res) {
            // If there's an error
            if (res.error && !Utils.serviceError(res.error)) {
              Events.trigger('error', JSON.stringify(res.error));
            } // If there's a warning


            if (res.warning) {
              Events.trigger('warning', JSON.stringify(res.warning));
            } // If there's data


            if (res.data) {
              // If the overwrite flag is set
              if (_this5.state.overwrite) {
                var t = 0;

                for (; true; ++t) {
                  if (typeof overtime[_this5.state.is][t] == 'undefined') {
                    break;
                  }
                }

                ms["throw"] = t;
              } else {
                ms["throw"] += 1;
              } // Calculate the throws so we can know if we're done


              ms.overtime_can_finish = _this5.calculateOvertimeFinished(_this5.state); // Set the new state

              _this5.setState({
                "overtime": overtime,
                "match": ms,
                "overwrite": false
              });
            }
          }).always(function () {
            // Hide loader
            Loader.hide();
          });
        }
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement("div", {
        className: "watl"
      }, self.state.mode == 'opponent' && React.createElement(Opponent, {
        thrower: self.state.thrower,
        onSelect: self.requestCreate
      }), self.state.mode == 'request' && React.createElement("div", {
        className: "acenter"
      }, React.createElement("div", {
        className: "existing"
      }, React.createElement("p", null, "Waiting for ", self.state.alias, " to accept your match request"), React.createElement("button", {
        onClick: self.requestCancel
      }, "Cancel Request"))), self.state.mode == 'existing' && React.createElement("div", {
        className: "acenter"
      }, self.state.existing.map(function (m, i) {
        return React.createElement("div", {
          key: i,
          "data-id": m._id,
          className: "existing"
        }, React.createElement("p", null, "You have an existing match with ", m.alias, ", do you wish to continue?"), React.createElement("button", {
          onClick: self.existingDelete
        }, "Delete"), React.createElement("button", {
          onClick: self.existingContinue
        }, "Continue"));
      })), self.state.mode == 'match' && React.createElement("div", {
        className: "actual"
      }, React.createElement(Board, {
        ref: "board",
        clutchMode: "none",
        onPoints: self.points
      }), React.createElement("div", {
        className: "stats"
      }, self.renderGame()), React.createElement("div", {
        className: "overlay",
        style: {
          "display": self.state.match.waiting ? 'block' : 'none'
        }
      }, React.createElement("div", null, React.createElement("span", null, "Waiting for ", self.state.alias))), this.state.winner && React.createElement("div", {
        className: "fireworks"
      }, React.createElement("div", {
        className: "overlay"
      }, React.createElement("div", null, React.createElement("span", {
        className: "winner"
      }, "YOU WON!"))), React.createElement("div", {
        className: "pyro"
      }, React.createElement("div", {
        className: "before"
      }), React.createElement("div", {
        className: "after"
      }))), this.state.loser && React.createElement("div", {
        className: "overlay"
      }, React.createElement("div", null, React.createElement("span", {
        className: "loser"
      }, "Sadly, you lost. Better luck next time.")))));
    }
  }, {
    key: "renderGame",
    value: function renderGame() {
      // Opponent is opposite of thrower
      var sT = this.state.is;
      var sO = this.state.is == 'i' ? 'o' : 'i'; // Regulation or overtime

      var title = '';
      var cname = ''; // Init the rows for each thrower

      var oRows = {
        "i": [],
        "o": [] // If we're in game mode

      };

      if (this.state.match.mode == 'game') {
        // Go through each regulation throw
        for (var _i4 = 0, _arr4 = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]; _i4 < _arr4.length; _i4++) {
          var t = _arr4[_i4];

          if (typeof this.state.game[sT][t] != 'undefined') {
            if (['5', '10'].indexOf(t) != -1) {
              oRows[sT].push(this.renderGameThrow(t));
            } else {
              oRows[sT].push(this.renderGameThrow(t));
            }
          } else {
            oRows[sT].push(React.createElement("span", null, " "));
          }

          if (typeof this.state.game[sO][t] != 'undefined') {
            if (['5', '10'].indexOf(t) != -1) {
              oRows[sO].push(React.createElement("span", {
                className: this.state.game[sO][t] && this.state.game[sO][t].killshot != '0' ? 'killshot' : ''
              }, this.state.game[sO][t] ? this.state.game[sO][t].value : ''));
            } else {
              oRows[sO].push(React.createElement("span", null, this.state.game[sO][t]));
            }
          } else {
            oRows[sO].push(React.createElement("span", null, " "));
          }
        } // Store the title and class name


        title = 'Regulation';
        cname = 'throws';
      } // Else we're in overtime
      else {
          // Go through each overtime throw
          for (var i = 0; true; ++i) {
            if (this.state.overtime['i'].length <= i && this.state.overtime['o'].length <= i) {
              break;
            }

            var columns = ['', ''];

            if (typeof this.state.overtime[sT][i] != 'undefined') {
              oRows[sT].push(React.createElement("span", {
                className: this.state.overwrite && this.state.match["throw"] == i ? 'overwrite' : '',
                "data-throw": i,
                onClick: this.overwrite
              }, this.state.overtime[sT][i]));
            }

            if (typeof this.state.overtime[sO][i] != 'undefined') {
              oRows[sO].push(React.createElement("span", null, this.state.overtime[sO][i]));
            }
          } // Store the title


          title = 'Overtime';
          cname = 'overtime';
        }

      return React.createElement("div", {
        className: "game"
      }, React.createElement("div", {
        className: "thrower"
      }, React.createElement("div", {
        className: "overall"
      }, React.createElement("p", null, this.state.thrower.alias), React.createElement("div", null, this.state.points[sT])), React.createElement("div", {
        className: cname
      }, React.createElement("p", null, title), React.createElement("div", null, oRows[sT]))), React.createElement("div", {
        className: "thrower"
      }, React.createElement("div", {
        className: "overall"
      }, React.createElement("p", null, this.state.alias), React.createElement("div", null, this.state.points[sO])), React.createElement("div", {
        className: cname
      }, React.createElement("p", null, title), React.createElement("div", null, oRows[sO]))), this.state.match.mode == 'game' && this.state.match["throw"] == '11' && React.createElement("button", {
        onClick: this.gameFinish
      }, "Finish"), this.state.match.overtime_can_finish && React.createElement("button", {
        onClick: this.overtimeFinish
      }, "Finish"));
    }
  }, {
    key: "renderGameThrow",
    value: function renderGameThrow(t) {
      // The value of the throw
      var v = this.state.game[this.state.is][t]; // If we're working on 5 or 10

      if (['5', '10'].indexOf(t) != -1) {
        // If the value exists
        if (typeof v != 'undefined') {
          return React.createElement("span", {
            className: this.state.overwrite && this.state.match["throw"] == t ? 'overwrite' : v.killshot != '0' ? 'killshot' : '',
            "data-throw": t,
            onClick: this.overwrite
          }, v.value);
        } // Else, there's no value
        else {
            return React.createElement("span", null);
          }
      } // Else it's 1-4 or 6-9
      else {
          // If the value exists
          if (typeof v != 'undefined') {
            return React.createElement("span", {
              className: this.state.overwrite && this.state.match["throw"] == t ? 'overwrite' : '',
              "data-throw": t,
              onClick: this.overwrite
            }, v);
          } // Else, there's no value
          else {
              return React.createElement("span", null);
            }
        }
    }
  }, {
    key: "requestCallback",
    value: function requestCallback(msg) {
      // If the match was accepted
      if (msg.type == 'accepted') {
        Hash.set('id', 'm|' + msg.match);
      } // Else if it was rejected
      else if (msg.type == 'rejected') {
          this.requestReset();
        }
    }
  }, {
    key: "requestCancel",
    value: function requestCancel() {
      var _this6 = this;

      if (this.state.mode == 'request') {
        // Show the loader
        Loader.show(); // Cancel the match request

        Services["delete"]('auth', 'match/request', {
          "id": this.state.id
        }).done(function (res) {
          // If there's an error
          if (res.error && !Utils.serviceError(res.error)) {
            // If it's already deleted
            if (res.error.code != 1104) {
              _this6.requestReset();
            } else {
              Events.trigger('error', JSON.stringify(res.error));
            }
          } // If there's a warning


          if (res.warning) {
            Events.trigger('warning', JSON.stringify(res.warning));
          } // If there's data


          if (res.data) {
            _this6.requestReset();
          }
        }).always(function () {
          // Hide the loader
          Loader.hide();
        });
      }
    }
  }, {
    key: "requestCreate",
    value: function requestCreate(opponent) {
      // Show the loader
      Loader.show(); // Make a match request for this opponent

      Services.create('auth', 'match/request', {
        "opponent": opponent._id,
        "org": "WATL"
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Set the hash
          Hash.set('id', 'r|' + res.data);
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "requestReset",
    value: function requestReset() {
      // Stop listening for an update on the request
      TwoWay.untrack('auth', 'request-' + this.state.id, this.requestCallback); // Remove the ID from the hash

      Hash.set('id', null); // Change the mode

      this.setState({
        "id": false,
        "mode": "opponent"
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this.setState({
        "alias": '',
        "overtime": false,
        "existing": false,
        "game": false,
        "id": false,
        "loser": false,
        "match": false,
        "mode": "opponent",
        "is": '',
        "winner": false
      });
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      // Set state
      this.setState({
        "thrower": thrower
      }); // If there's an ID in the hash

      var id = Hash.get('id');

      if (id) {
        this.idCallback(id);
      } else {
        this.existingFetch();
      }
    }
  }, {
    key: "signout",
    value: function signout() {
      // Set state
      this.setState({
        "thrower": false
      }); // Remove the ID from the hash

      Hash.set('id', null);
    }
  }]);

  return Match;
}(React.Component); // Export the component


module.exports = Match;

/***/ }),

/***/ "./webpack/react/watl/pieKillshot.jsx":
/*!********************************************!*\
  !*** ./webpack/react/watl/pieKillshot.jsx ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * WATL Chart: Killshot
 *
 * Shows the chart for killshot throws
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-18
 */
// Killshot component
var ChartKillshot =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ChartKillshot, _React$Component);

  function ChartKillshot(props) {
    var _this;

    _classCallCheck(this, ChartKillshot);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChartKillshot).call(this, props)); // Initialise the state

    _this.state = {}; // Chart

    _this.chart = null; // Titles

    _this.titles = ["Hits", "Misses", "Drops"];
    return _this;
  }

  _createClass(ChartKillshot, [{
    key: "calculateTitles",
    value: function calculateTitles() {
      var ret = [];
      var sum = this.props.data.reduce(function (p, i) {
        return p + i;
      });

      for (var i = 0; i < 3; ++i) {
        ret.push(this.titles[i] + ' ' + (sum == 0 ? '0.0' : (this.props.data[i] / sum * 100.0).toFixed(1)) + '% ');
      }

      return ret;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.chart = new Chart(this.refs.chart.getContext('2d'), {
        "type": "pie",
        "data": {
          "labels": this.calculateTitles(),
          "datasets": [{
            "data": this.props.data,
            "backgroundColor": ["rgb(0,0,255,0.9)", "rgb(100,100,100,0.5)", "rgb(200,200,200,0.5)"]
          }]
        },
        "options": {
          "layout": {
            "padding": 0
          },
          "legend": {
            "display": false
          },
          "maintainAspectRatio": false,
          "responsive": true
        }
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.chart.data.datasets[0].data = this.props.data;
      this.chart.update();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ref = _this$props.ref,
          data = _this$props.data,
          rest = _objectWithoutProperties(_this$props, ["ref", "data"]);

      return React.createElement("canvas", _extends({}, rest, {
        ref: "chart"
      }));
    }
  }]);

  return ChartKillshot;
}(React.Component); // Export the component


module.exports = ChartKillshot;

/***/ }),

/***/ "./webpack/react/watl/pieRegular.jsx":
/*!*******************************************!*\
  !*** ./webpack/react/watl/pieRegular.jsx ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * WATL Chart: Regular
 *
 * Shows the chart for regular (target) throws
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-18
 */
// Regular component
var ChartRegular =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ChartRegular, _React$Component);

  function ChartRegular(props) {
    var _this;

    _classCallCheck(this, ChartRegular);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChartRegular).call(this, props)); // Initialise the state

    _this.state = {}; // Chart

    _this.chart = null; // Titles

    _this.titles = ["Sixes", "Fours", "Threes", "Twos", "Ones", "Zeros", "Drops"];
    return _this;
  }

  _createClass(ChartRegular, [{
    key: "calculateTitles",
    value: function calculateTitles() {
      var ret = [];
      var sum = this.props.data.reduce(function (p, i) {
        return p + i;
      });

      for (var i = 0; i < 7; ++i) {
        ret.push(this.titles[i] + ' ' + (sum == 0 ? '0.0' : (this.props.data[i] / sum * 100.0).toFixed(1)) + '% ');
      }

      return ret;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.chart = new Chart(this.refs.chart.getContext('2d'), {
        "type": "pie",
        "data": {
          "labels": this.calculateTitles(),
          "datasets": [{
            "data": this.props.data,
            "backgroundColor": ["rgb(255,0,0,0.9)", "rgb(30,30,30,0.9)", "rgb(60,60,60,0.9)", "rgb(90,90,90,0.9)", "rgb(120,120,120,0.9)", "rgb(150,150,150,0.5)", "rgb(200,200,200,0.5)"]
          }]
        },
        "options": {
          "layout": {
            "padding": 0
          },
          "legend": {
            "display": false
          },
          "maintainAspectRatio": false,
          "responsive": true
        }
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.chart.data.datasets[0].data = this.props.data;
      this.chart.update();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ref = _this$props.ref,
          data = _this$props.data,
          rest = _objectWithoutProperties(_this$props, ["ref", "data"]);

      return React.createElement("canvas", _extends({}, rest, {
        ref: "chart"
      }));
    }
  }]);

  return ChartRegular;
}(React.Component); // Export the component


module.exports = ChartRegular;

/***/ }),

/***/ "./webpack/react/watl/practice.jsx":
/*!*****************************************!*\
  !*** ./webpack/react/watl/practice.jsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * WATL Practice
 *
 * Manages tracking and storing practice on an WATL board
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-18
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Loader = __webpack_require__(/*! ../../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../../generic/services.js */ "./webpack/generic/services.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Site modules


var Utils = __webpack_require__(/*! ../../utils.js */ "./webpack/utils.js"); // Base components


var Forms = __webpack_require__(/*! ../base/forms.jsx */ "./webpack/react/base/forms.jsx"); // React components


var Modal = __webpack_require__(/*! ../generic/modal.jsx */ "./webpack/react/generic/modal.jsx");

var Board = __webpack_require__(/*! ./board.jsx */ "./webpack/react/watl/board.jsx"); // Pattern component


var Pattern =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Pattern, _React$Component);

  function Pattern(props) {
    var _this;

    _classCallCheck(this, Pattern);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pattern).call(this, props)); // Initialise the state

    _this.state = {
      "descr": props.descr || '',
      "throws": props["throws"] || ["0", "0"],
      "title": props.title || '' // Bind methods

    };
    _this.countChange = _this.countChange.bind(_assertThisInitialized(_this));
    _this.descrChange = _this.descrChange.bind(_assertThisInitialized(_this));
    _this.selectClick = _this.selectClick.bind(_assertThisInitialized(_this));
    _this.titleChange = _this.titleChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Pattern, [{
    key: "countChange",
    value: function countChange(ev) {
      // Pull out the count
      var count = parseInt(ev.currentTarget.value); // If the value is more than

      if (count > this.state["throws"].length) {
        for (var i = this.state["throws"].length; i < count; ++i) {
          this.state["throws"].push("0");
        }
      } // Else if it's less
      else if (count < this.state["throws"].length) {
          this.state["throws"].splice(count, this.state["throws"].length - count);
        } // Set the new state


      this.setState({
        "throws": this.state["throws"]
      });
    }
  }, {
    key: "errors",
    value: function errors(errs) {
      for (var k in errs) {
        Forms.errorAdd(this.refs[k]);
      }
    }
  }, {
    key: "descrChange",
    value: function descrChange(ev) {
      this.setState({
        "descr": ev.currentTarget.value
      });
    }
  }, {
    key: "titleChange",
    value: function titleChange(ev) {
      this.setState({
        "title": ev.currentTarget.value
      });
    }
  }, {
    key: "selectClick",
    value: function selectClick(ev) {
      // Pull out the index and type
      var name = ev.currentTarget.name.split('.');
      var index = parseInt(name[1]); // Set the state

      this.state["throws"][index] = ev.currentTarget.value;
      this.setState({
        "throws": this.state["throws"]
      });
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement("div", {
        className: "pattern form"
      }, React.createElement("p", null, React.createElement("input", {
        ref: "title",
        type: "text",
        title: "Pattern Title",
        placeholder: "Pattern Title",
        value: this.state.title,
        onChange: this.titleChange,
        onClick: Forms.errorFocus
      })), React.createElement("p", null, React.createElement("textarea", {
        ref: "descr",
        title: "Pattern Description",
        placeholder: "Pattern Description",
        value: this.state.descr,
        onChange: this.descrChange,
        onClick: Forms.errorFocus
      })), React.createElement("p", null, React.createElement("select", {
        value: this.state["throws"].length,
        onChange: this.countChange
      }, React.createElement("option", {
        value: 2
      }, "2"), React.createElement("option", {
        value: 3
      }, "3"), React.createElement("option", {
        value: 4
      }, "4"), React.createElement("option", {
        value: 5
      }, "5"), React.createElement("option", {
        value: 6
      }, "6"), React.createElement("option", {
        value: 7
      }, "7"), React.createElement("option", {
        value: 8
      }, "8"), React.createElement("option", {
        value: 9
      }, "9"), React.createElement("option", {
        value: 10
      }, "10"), React.createElement("option", {
        value: 11
      }, "11"), React.createElement("option", {
        value: 12
      }, "12"), React.createElement("option", {
        value: 13
      }, "13"), React.createElement("option", {
        value: 14
      }, "14"), React.createElement("option", {
        value: 15
      }, "15"), React.createElement("option", {
        value: 16
      }, "16"), React.createElement("option", {
        value: 17
      }, "17"), React.createElement("option", {
        value: 18
      }, "18"), React.createElement("option", {
        value: 19
      }, "19"), React.createElement("option", {
        value: 20
      }, "20"), React.createElement("option", {
        value: 21
      }, "21"), React.createElement("option", {
        value: 22
      }, "22"), React.createElement("option", {
        value: 23
      }, "23"), React.createElement("option", {
        value: 24
      }, "24"), React.createElement("option", {
        value: 25
      }, "25"), React.createElement("option", {
        value: 26
      }, "26"), React.createElement("option", {
        value: 27
      }, "27"), React.createElement("option", {
        value: 28
      }, "28"), React.createElement("option", {
        value: 29
      }, "29"), React.createElement("option", {
        value: 30
      }, "30"))), this.state["throws"].map(function (t, i) {
        return React.createElement("div", {
          key: i,
          className: "throw"
        }, React.createElement("h3", null, "Throw #" + (i + 1)), React.createElement("p", null, React.createElement("span", null, "Killshot: "), React.createElement("select", {
          name: "throw." + i,
          value: t,
          onChange: self.selectClick
        }, React.createElement("option", {
          value: "0"
        }, "None"), React.createElement("option", {
          value: "L"
        }, "Left"), React.createElement("option", {
          value: "R"
        }, "Right"))));
      }));
    }
  }, {
    key: "pattern",
    get: function get() {
      return this.state;
    }
  }]);

  return Pattern;
}(React.Component); // Practice Component


var Practice =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(Practice, _React$Component2);

  function Practice(props) {
    var _this2;

    _classCallCheck(this, Practice);

    // Call the parent constructor
    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Practice).call(this, props)); // Initialise the state

    _this2.state = {
      "killshot": 'select',
      "kslAttempts": 0,
      "kslHits": 0,
      "ksrAttempts": 0,
      "ksrHits": 0,
      "mode": null,
      "modeThrows": false,
      "pattern": false,
      "patterns": false,
      "points": [],
      "showPoints": false,
      "thrower": props.thrower,
      "totalPoints": 0 // Bind methods

    };
    _this2.modeSelect = _this2.modeSelect.bind(_assertThisInitialized(_this2));
    _this2.overwrite = _this2.overwrite.bind(_assertThisInitialized(_this2));
    _this2.patternClose = _this2.patternClose.bind(_assertThisInitialized(_this2));
    _this2.patternCreate = _this2.patternCreate.bind(_assertThisInitialized(_this2));
    _this2.patternDelete = _this2.patternDelete.bind(_assertThisInitialized(_this2));
    _this2.patternEdit = _this2.patternEdit.bind(_assertThisInitialized(_this2));
    _this2.patternNew = _this2.patternNew.bind(_assertThisInitialized(_this2));
    _this2.patternUpdate = _this2.patternUpdate.bind(_assertThisInitialized(_this2));
    _this2.points = _this2.points.bind(_assertThisInitialized(_this2));
    _this2.pointsHide = _this2.pointsHide.bind(_assertThisInitialized(_this2));
    _this2.pointsShow = _this2.pointsShow.bind(_assertThisInitialized(_this2));
    _this2.reset = _this2.reset.bind(_assertThisInitialized(_this2));
    _this2.save = _this2.save.bind(_assertThisInitialized(_this2));
    _this2.signin = _this2.signin.bind(_assertThisInitialized(_this2));
    _this2.signout = _this2.signout.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  _createClass(Practice, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any signin/signout events
      Events.add('signin', this.signin);
      Events.add('signout', this.signout); // If we have data in local storage

      if ('watl_practice' in localStorage) {
        var new_state = JSON.parse(localStorage['watl_practice']);
        new_state.thrower = this.state.thrower;
        this.setState(new_state);
        delete localStorage['watl_practice'];
      } // If there's a thrower


      if (this.state.thrower) {
        // Get the custom practice patterns
        this.patternFetch();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any signin/signout events
      Events.remove('signin', this.signin);
      Events.remove('signout', this.signout); // If we have points, store them in local storage

      if (this.state.points.length) {
        localStorage['watl_practice'] = JSON.stringify(this.state);
      }
    }
  }, {
    key: "modeSelect",
    value: function modeSelect(ev) {
      // If it's custom
      var mode = ev.currentTarget.dataset.mode.split(':');
      var _throws = false;

      if (mode[0] == 'custom') {
        _throws = Tools.afindo(this.state.patterns, '_id', mode[1])["throws"];
      } // New state


      var state = {
        "mode": mode[0],
        "modeThrows": _throws // If custom

      };

      if (state.mode == 'custom') {
        if (state.modeThrows[0] == 'L') {
          state.killshot = 'expected_left';
        } else if (state.modeThrows[0] == 'R') {
          state.killshot = 'expected_right';
        } else {
          state.killshot = 'none';
        }
      } else {
        switch (state.mode) {
          case 'free':
            state.killshot = 'select';
            break;

          case 'perfect_left':
          case 'perfect_right':
            state.killshot = 'none';
            break;
        }
      } // Set the state


      this.setState(state);
    }
  }, {
    key: "overwrite",
    value: function overwrite(ev) {
      // New state
      var state = {
        "overwrite": true // If we're in custom

      };
      var i = 0;

      if (this.state.mode == 'custom') {
        // Which throw is it?
        i = this.state.points.length % this.state.modeThrows.length - 1;

        if (i == -1) {
          i += this.state.modeThrows.length;
        } // Is there a killshot


        if (this.state.modeThrows[i] == 'L') {
          state.killshot = 'expected_left';
        } else if (this.state.modeThrows[i] == 'R') {
          state.killshot = 'expected_right';
        } else {
          state.killshot = 'none';
        }
      } // Else, predefined mode
      else {
          var i = this.state.points.length % 10;

          switch (this.state.mode) {
            case 'perfect_left':
              if (i == 5) {
                state.killshot = 'expected_left';
              } else if (i == 0) {
                state.killshot = 'expected_right';
              } else {
                state.killshot = 'none';
              }

              break;

            case 'perfect_right':
              if (i == 0) {
                state.killshot = 'expected_left';
              } else if (i == 5) {
                state.killshot = 'expected_right';
              } else {
                state.killshot = 'none';
              }

              break;
          }
        } // Set the state


      this.setState(state);
    }
  }, {
    key: "patternClose",
    value: function patternClose() {
      this.setState({
        "pattern": false
      });
    }
  }, {
    key: "patternCreate",
    value: function patternCreate() {
      var _this3 = this;

      // Show the loader
      Loader.show(); // Generate the pattern object

      pattern = this.refs.pattern.pattern; // Send the data to the service

      Services.create('watl', 'practice/pattern', pattern).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          if (res.error.code == 1001) {
            _this3.refs.pattern.errors(res.error.msg);
          } else {
            Events.trigger('error', JSON.stringify(res.error));
          }
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Add the pattern to the state
          pattern._id = res.data;

          _this3.state.patterns.push(pattern);

          _this3.setState({
            "pattern": false,
            "patterns": _this3.state.patterns
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "patternDelete",
    value: function patternDelete(id, ev) {
      var _this4 = this;

      ev.stopPropagation(); // Confirm

      if (confirm("Are you sure you want to delete this practice pattern?")) {
        // Show the loader
        Loader.show(); // Delete it

        Services["delete"]('watl', 'practice/pattern', {
          "id": id
        }).done(function (res) {
          // If there's an error
          if (res.error && !Utils.serviceError(res.error)) {
            Events.trigger('error', JSON.stringify(res.error));
          } // If there's a warning


          if (res.warning) {
            Events.trigger('warning', JSON.stringify(res.warning));
          } // If there's data


          if (res.data) {
            // Remove the pattern deleted
            _this4.state.patterns.splice(Tools.afindi(_this4.state.patterns, '_id', id), 1); // Set the state


            _this4.setState({
              "patterns": _this4.state.patterns
            });
          }
        }).always(function () {
          // Hide the loader
          Loader.hide();
        });
      }
    }
  }, {
    key: "patternEdit",
    value: function patternEdit(id, ev) {
      ev.stopPropagation();
      this.setState({
        "pattern": Tools.afindo(this.state.patterns, '_id', id)
      });
    }
  }, {
    key: "patternFetch",
    value: function patternFetch() {
      var _this5 = this;

      // Show the loader
      Loader.show(); // Fetch the patterns from the service

      Services.read('watl', 'practice/patterns', {}).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          _this5.setState({
            "patterns": res.data
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "patternNew",
    value: function patternNew() {
      this.setState({
        "pattern": true
      });
    }
  }, {
    key: "patternUpdate",
    value: function patternUpdate() {
      var _this6 = this;

      // Show the loader
      Loader.show(); // Generate the pattern object

      pattern = this.refs.pattern.pattern;
      pattern._id = this.state.pattern._id; // Send the data to the service

      Services.update('watl', 'practice/pattern', pattern).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Find the pattern
          var i = Tools.afindi(_this6.state.patterns, '_id', pattern._id); // Update it

          _this6.state.patterns[i] = pattern; // Set the state

          _this6.setState({
            "pattern": false,
            "patterns": _this6.state.patterns
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "points",
    value: function points(killshot, value) {
      // Init the new state
      var state = {
        "kslAttempts": this.state.kslAttempts,
        "kslHits": this.state.kslHits,
        "ksrAttempts": this.state.ksrAttempts,
        "ksrHits": this.state.ksrHits,
        "overwrite": false,
        "points": this.state.points,
        "totalPoints": this.state.totalPoints
      }; // Get the int version of the value

      var v = parseInt(value); // If the overwrite flag is set

      if (this.state.overwrite) {
        // Grab the last value
        var last = this.state.points[this.state.points.length - 1]; // Backtrack the killshot stats

        if (last[0] == 'L') {
          state.kslAttempts -= 1;

          if (last[1] == 8) {
            state.kslHits -= 1;
          }
        } else if (last[0] == 'R') {
          state.ksrAttempts -= 1;

          if (last[1] == 8) {
            state.ksrHits -= 1;
          }
        } // Backtrack the points stats


        if (last[1] != 'd') {
          state.totalPoints -= last[1];
        } // Remove the last item


        state.points.pop();
      } // Add to the points list


      state.points.push([killshot, value == 'd' ? 'd' : v]); // If we got a killshot attempt

      if (killshot == 'L') {
        state.kslAttempts += 1;

        if (value == 8) {
          state.kslHits += 1;
        }
      } else if (killshot == 'R') {
        state.ksrAttempts += 1;

        if (value == 8) {
          state.ksrHits += 1;
        }
      } // If we got a value


      if (v > 0) {
        state.totalPoints += v;
      } // If we're in custom mode


      if (this.state.mode == 'custom') {
        // Which throw are we
        var i = state.points.length % this.state.modeThrows.length; // Is there a killshot

        if (this.state.modeThrows[i] == 'L') {
          state.killshot = 'expected_left';
        } else if (this.state.modeThrows[i] == 'R') {
          state.killshot = 'expected_right';
        } else {
          state.killshot = 'none';
        }
      } // Else, predefined mode
      else {
          var i = state.points.length % 10;

          switch (this.state.mode) {
            case 'perfect_left':
              if (i == 4) {
                state.killshot = 'expected_left';
              } else if (i == 9) {
                state.killshot = 'expected_right';
              } else {
                state.killshot = 'none';
              }

              break;

            case 'perfect_right':
              if (i == 9) {
                state.killshot = 'expected_left';
              } else if (i == 4) {
                state.killshot = 'expected_right';
              } else {
                state.killshot = 'none';
              }

              break;
          }
        } // Set the state


      this.setState(state);
    }
  }, {
    key: "pointsHide",
    value: function pointsHide() {
      this.setState({
        "showPoints": false
      });
    }
  }, {
    key: "pointsShow",
    value: function pointsShow() {
      this.setState({
        "showPoints": true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var self = this; // If we have points

      if (this.state.points.length) {
        // Init the last index
        var last = 28; // If we have less than 29

        if (this.state.points.length < 29) {
          last = this.state.points.length - 1;
        }
      }

      return React.createElement("div", {
        className: "watl"
      }, !this.state.mode && React.createElement(React.Fragment, null, this.state.thrower && React.createElement("div", {
        className: "aright"
      }, React.createElement("i", {
        "class": "fas fa-plus",
        onClick: this.patternNew
      })), React.createElement("dl", {
        className: "select"
      }, this.state.patterns && this.state.patterns.map(function (p, i) {
        return React.createElement(React.Fragment, {
          key: i
        }, React.createElement("dt", {
          "data-mode": "custom:" + p._id,
          onClick: self.modeSelect
        }, React.createElement("div", {
          className: "fright"
        }, React.createElement("i", {
          "class": "fas fa-edit",
          title: "Edit Pattern",
          onClick: self.patternEdit.bind(self, p._id)
        }), React.createElement("i", {
          "class": "far fa-trash-alt",
          title: "Delete Pattern",
          onClick: self.patternDelete.bind(self, p._id)
        })), React.createElement("span", null, p.title)), React.createElement("dd", null, p.descr));
      }), React.createElement("dt", {
        "data-mode": "free",
        onClick: this.modeSelect
      }, "Free Practice"), React.createElement("dd", null, "Anything is avaialble at any time, you must select a killshot to score it."), React.createElement("dt", {
        "data-mode": "perfect_left",
        onClick: this.modeSelect
      }, "Perfect game, left then right"), React.createElement("dd", null, "The fifth and tenth throws are for killshot, first left, then right."), React.createElement("dt", {
        "data-mode": "perfect_right",
        onClick: this.modeSelect
      }, "Perfect game, right then left"), React.createElement("dd", null, "The fifth and tenth throws are for killshot, first right, then left.")), Tools.isObject(this.state.pattern) && React.createElement(Modal, {
        buttons: [{
          "name": "update pattern",
          "callback": this.patternUpdate
        }],
        close: this.patternClose,
        title: "Edit Pattern",
        width: "95%"
      }, React.createElement(Pattern, {
        descr: this.state.pattern.descr,
        ref: "pattern",
        "throws": this.state.pattern["throws"],
        title: this.state.pattern.title
      })), this.state.pattern === true && React.createElement(Modal, {
        buttons: [{
          "name": "create pattern",
          "callback": this.patternCreate
        }],
        close: this.patternClose,
        title: "New Pattern",
        width: "95%"
      }, React.createElement(Pattern, {
        ref: "pattern"
      }))), this.state.mode && React.createElement(React.Fragment, null, React.createElement(Board, {
        ref: "board",
        mode: self.state.killshot,
        onPoints: self.points
      }), self.state.points.length > 0 && React.createElement(React.Fragment, null, React.createElement("div", {
        className: "averages"
      }, React.createElement("span", {
        className: "killshot fright"
      }, React.createElement("b", null, "KS %: "), React.createElement("span", null, (self.state.kslAttempts == 0 ? "0.0" : (self.state.kslHits / self.state.kslAttempts * 100.0).toFixed(1)) + ' / ' + (self.state.ksrAttempts == 0 ? "0.0" : (self.state.ksrHits / self.state.ksrAttempts * 100.0).toFixed(1)))), React.createElement("span", {
        className: "average fleft"
      }, React.createElement("b", null, "Avg Throw: "), React.createElement("span", null, (self.state.totalPoints / self.state.points.length).toFixed(2))), React.createElement("br", null)), React.createElement("div", {
        className: "points"
      }, self.state.points.length > 29 && React.createElement("span", {
        key: -1,
        className: "link bold",
        onClick: self.pointsShow
      }, "..."), self.state.points.slice(-29).map(function (p, i) {
        if (i == last) {
          return React.createElement("span", {
            key: i,
            className: "last " + (self.state.overwrite ? 'overwrite' : p[0] != '0' ? 'killshot' : ''),
            onClick: self.overwrite
          }, p[1]);
        } else {
          return React.createElement("span", {
            key: i,
            className: p[0] != '0' ? 'killshot' : ''
          }, p[1]);
        }
      }))), React.createElement("div", {
        className: "reset fright",
        onClick: self.reset
      }, "Reset"), this.state.thrower && this.state.points.length > 0 && React.createElement("div", {
        className: "save fleft",
        onClick: self.save
      }, "Save & Reset"), self.state.showPoints && React.createElement(Modal, {
        title: "All points this practice",
        close: self.pointsHide
      }, React.createElement("div", {
        className: "allPoints"
      }, self.state.points.map(function (p, i) {
        return React.createElement("span", {
          key: i,
          className: p[0] != '0' ? 'killshot' : ''
        }, p[1]);
      })))));
    }
  }, {
    key: "reset",
    value: function reset() {
      // Init the reset flag
      var reset = true; // If there's points

      if (this.state.points.length) {
        // Update the flag based on the user's response
        reset = confirm('Are you sure you want to reset your practice?');
      } // If we can reset


      if (reset) {
        this.setState({
          "kslAttempts": 0,
          "kslHits": 0,
          "ksrAttempts": 0,
          "ksrHits": 0,
          "mode": null,
          "points": [],
          "showPoints": false,
          "totalPoints": 0
        });
      }
    }
  }, {
    key: "save",
    value: function save(ev) {
      var _this7 = this;

      // Show loader
      Loader.show(); // Send the practice to the NATF service

      Services.create('watl', 'practice', {
        "points": this.state.points
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Notify
          Events.trigger('success', 'Practice saved!'); // Reset

          _this7.setState({
            "kslAttempts": 0,
            "kslHits": 0,
            "ksrAttempts": 0,
            "ksrHits": 0,
            "mode": null,
            "points": [],
            "showPoints": false,
            "totalPoints": 0
          });
        }
      }).always(function () {
        // Hide loader
        Loader.hide();
      });
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      // Set the thrower
      this.setState({
        "thrower": thrower
      }); // Get the custom practice patterns

      this.patternFetch();
    }
  }, {
    key: "signout",
    value: function signout() {
      // Remove the thrower and patterns
      this.setState({
        "patterns": false,
        "thrower": false
      });
    }
  }]);

  return Practice;
}(React.Component); // Export the component


module.exports = Practice;

/***/ }),

/***/ "./webpack/react/watl/stats.jsx":
/*!**************************************!*\
  !*** ./webpack/react/watl/stats.jsx ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * WATL Stats
 *
 * Fetchs and displays WATL stats for practice and matches
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-18
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Hash = __webpack_require__(/*! ../../generic/hash.js */ "./webpack/generic/hash.js"); // Generic components


var _require = __webpack_require__(/*! ../generic/menu.jsx */ "./webpack/react/generic/menu.jsx"),
    Menu = _require.Menu,
    Item = _require.Item; // Stats components


var Match = __webpack_require__(/*! ./statsMatch.jsx */ "./webpack/react/watl/statsMatch.jsx");

var Practice = __webpack_require__(/*! ./statsPractice.jsx */ "./webpack/react/watl/statsPractice.jsx"); // Stats component


var Stats =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Stats, _React$Component);

  function Stats(props) {
    var _this;

    _classCallCheck(this, Stats);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stats).call(this, props)); // Initialise the state

    _this.state = {
      "which": Hash.get('which', 'practice')
    }; // Bind methods

    _this.whichChange = _this.whichChange.bind(_assertThisInitialized(_this));
    _this.whichHash = _this.whichHash.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Stats, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track any which hash change events
      Hash.watch('which', this.whichHash);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking any which hash change events
      Hash.unwatch('which', this.whichHash); // Remove the which from the hash

      Hash.set('which', null);
    }
  }, {
    key: "render",
    value: function render() {
      var self = this;
      return React.createElement(React.Fragment, null, React.createElement(Menu, {
        className: "menu secondary",
        selected: self.state.which,
        onChange: self.whichChange
      }, React.createElement(Item, {
        name: "practice"
      }, "Practice"), React.createElement(Item, {
        name: "match"
      }, "Match")), React.createElement("div", {
        id: "content"
      }, React.createElement("div", {
        className: "watl"
      }, self.state.which == 'practice' && React.createElement(Practice, {
        thrower: self.props.thrower
      }), self.state.which == 'match' && React.createElement(Match, {
        thrower: self.props.thrower
      }))));
    }
  }, {
    key: "whichChange",
    value: function whichChange(which) {
      Hash.set('which', which);
    }
  }, {
    key: "whichHash",
    value: function whichHash(which) {
      if (which != this.state.which) {
        if (which == null) {
          which = 'practice';
        }

        this.setState({
          "which": which
        });
      }
    }
  }]);

  return Stats;
}(React.Component); // Export the component


module.exports = Stats;

/***/ }),

/***/ "./webpack/react/watl/statsMatch.jsx":
/*!*******************************************!*\
  !*** ./webpack/react/watl/statsMatch.jsx ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * WATL Stats: Match
 *
 * Fetchs and displays WATL stats for matches
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-28
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Loader = __webpack_require__(/*! ../../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../../generic/services.js */ "./webpack/generic/services.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Site modules


var Utils = __webpack_require__(/*! ../../utils.js */ "./webpack/utils.js"); // Components


var PieKillshot = __webpack_require__(/*! ./pieKillshot.jsx */ "./webpack/react/watl/pieKillshot.jsx");

var PieRegular = __webpack_require__(/*! ./pieRegular.jsx */ "./webpack/react/watl/pieRegular.jsx"); // StatsMatch component


var StatsMatch =
/*#__PURE__*/
function (_React$Component) {
  _inherits(StatsMatch, _React$Component);

  function StatsMatch(props) {
    var _this;

    _classCallCheck(this, StatsMatch);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatsMatch).call(this, props)); // Initialise the state

    _this.state = {
      "data": null,
      "thrower": props.thrower // Bind methods

    };
    _this.signin = _this.signin.bind(_assertThisInitialized(_this));
    _this.signout = _this.signout.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(StatsMatch, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track signin / signout
      Events.add('signin', this.signin);
      Events.add('signout', this.signout); // If someone is logged in

      if (this.state.thrower) {
        // Fetch the match stats
        this.fetch();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking signin / signout
      Events.remove('signin', this.signin);
      Events.remove('signout', this.signout);
    }
  }, {
    key: "fetch",
    value: function fetch() {
      var _this2 = this;

      // Show the loader
      Loader.show(); // Fetch the match stats

      Services.read('watl', 'match/stats', {}).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Add the stats to the state
          _this2.setState({
            "data": res.data
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "render",
    value: function render() {
      var match = this.state.data; // If there's data

      if (match) {
        return React.createElement("div", {
          className: "match"
        }, React.createElement("div", {
          className: "smwl"
        }, React.createElement("div", null, "Matches"), React.createElement("div", null, "Wins"), React.createElement("div", null, "Losses"), React.createElement("div", null, "64s")), React.createElement("div", {
          className: "smwl gap large"
        }, React.createElement("div", null, match.matches), React.createElement("div", {
          className: "win"
        }, match.wins), React.createElement("div", {
          className: "loss"
        }, match.losses), React.createElement("div", null, match.sixtyfours)), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, "Regular"), React.createElement("div", null, "Killshot L"), React.createElement("div", null, "Killshot R")), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, match.regular.attempts), React.createElement("div", null, match.ksLeft.attempts), React.createElement("div", null, match.ksRight.attempts)), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, React.createElement(PieRegular, {
          height: "150px",
          data: [match.regular.sixes, match.regular.fours, match.regular.threes, match.regular.twos, match.regular.ones, match.regular.zeros, match.regular.drops]
        })), React.createElement("div", null, React.createElement(PieKillshot, {
          height: "150px",
          data: [match.ksLeft.hits, match.ksLeft.attempts - (match.ksLeft.hits + match.ksLeft.drops), match.ksLeft.drops]
        })), React.createElement("div", null, React.createElement(PieKillshot, {
          height: "150px",
          data: [match.ksRight.hits, match.ksRight.attempts - (match.ksRight.hits + match.ksRight.drops), match.ksRight.drops]
        }))));
      } else {
        return React.createElement("div", null);
      }
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      // Set the thrower
      this.setState({
        "thrower": thrower
      }); // Fetch the match stats

      this.fetch();
    }
  }, {
    key: "signout",
    value: function signout() {
      this.setState({
        "thrower": false
      });
    }
  }]);

  return StatsMatch;
}(React.Component); // Export the component


module.exports = StatsMatch;

/***/ }),

/***/ "./webpack/react/watl/statsPractice.jsx":
/*!**********************************************!*\
  !*** ./webpack/react/watl/statsPractice.jsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * WATL Stats: Practice
 *
 * Fetchs and displays WATL stats for practices
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-04-18
 */
// Generic modules
var Events = __webpack_require__(/*! ../../generic/events.js */ "./webpack/generic/events.js");

var Loader = __webpack_require__(/*! ../../generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ../../generic/services.js */ "./webpack/generic/services.js");

var Tools = __webpack_require__(/*! ../../generic/tools.js */ "./webpack/generic/tools.js"); // Site modules


var Utils = __webpack_require__(/*! ../../utils.js */ "./webpack/utils.js"); // Generic Components


var Graph = __webpack_require__(/*! ../generic/graph.jsx */ "./webpack/react/generic/graph.jsx");

var Modal = __webpack_require__(/*! ../generic/modal.jsx */ "./webpack/react/generic/modal.jsx"); // Components


var PieKillshot = __webpack_require__(/*! ./pieKillshot.jsx */ "./webpack/react/watl/pieKillshot.jsx");

var PieRegular = __webpack_require__(/*! ./pieRegular.jsx */ "./webpack/react/watl/pieRegular.jsx"); // Practice component


var Practice =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Practice, _React$Component);

  function Practice(props) {
    _classCallCheck(this, Practice);

    // Call the parent constructor
    return _possibleConstructorReturn(this, _getPrototypeOf(Practice).call(this, props));
  }

  _createClass(Practice, [{
    key: "render",
    value: function render() {
      var self = this;
      var data = this.props.data;
      return React.createElement(React.Fragment, null, React.createElement("div", {
        className: "allPoints"
      }, data.data.map(function (p, i) {
        return React.createElement("span", {
          key: i,
          className: p.killshot != '0' ? 'killshot' : ''
        }, "" + p.value);
      })), React.createElement("br", null), React.createElement("div", {
        className: "throws"
      }, React.createElement("div", null, "Regular"), React.createElement("div", null, "Killshot L"), React.createElement("div", null, "Killshot R")), React.createElement("div", {
        className: "throws"
      }, React.createElement("div", null, data.stats.regular.attempts), React.createElement("div", null, data.stats.ksLeft.attempts), React.createElement("div", null, data.stats.ksRight.attempts)), React.createElement("div", {
        className: "throws"
      }, React.createElement("div", null, React.createElement(PieRegular, {
        height: "150px",
        data: [data.stats.regular.sixes, data.stats.regular.fours, data.stats.regular.threes, data.stats.regular.twos, data.stats.regular.ones, data.stats.regular.zeros, data.stats.regular.drops]
      })), React.createElement("div", null, React.createElement(PieKillshot, {
        height: "150px",
        data: [data.stats.ksLeft.hits, data.stats.ksLeft.attempts - (data.stats.ksLeft.hits + data.stats.ksLeft.drops), data.stats.ksLeft.drops]
      })), React.createElement("div", null, React.createElement(PieKillshot, {
        height: "150px",
        data: [data.stats.ksRight.hits, data.stats.ksRight.attempts - (data.stats.ksRight.hits + data.stats.ksRight.drops), data.stats.ksRight.drops]
      }))));
    }
  }]);

  return Practice;
}(React.Component); // StatsPractice component


var StatsPractice =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(StatsPractice, _React$Component2);

  function StatsPractice(props) {
    var _this;

    _classCallCheck(this, StatsPractice);

    // Call the parent constructor
    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatsPractice).call(this, props)); // Initialise the state

    _this.state = {
      "all": false,
      "graphs": false,
      "one": false,
      "overall": null,
      "practices": [],
      "thrower": props.thrower
    }; // Bind methods

    _this.one = _this.one.bind(_assertThisInitialized(_this));
    _this.oneHide = _this.oneHide.bind(_assertThisInitialized(_this));
    _this.all = _this.all.bind(_assertThisInitialized(_this));
    _this.signin = _this.signin.bind(_assertThisInitialized(_this));
    _this.signout = _this.signout.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(StatsPractice, [{
    key: "all",
    value: function all() {
      this.fetch(true);
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      // Track signin / signout
      Events.add('signin', this.signin);
      Events.add('signout', this.signout); // If someone is logged in

      if (this.state.thrower) {
        // Fetch the practice stats
        this.fetch();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Stop tracking signin / signout
      Events.remove('signin', this.signin);
      Events.remove('signout', this.signout);
    }
  }, {
    key: "fetch",
    value: function fetch(all) {
      var _this2 = this;

      // If All is not passed
      if (typeof all == 'undefined') {
        all = false;
      } // Show the loader


      Loader.show(); // Fetch the practice stats

      Services.read('watl', 'practice/stats', {
        "all": all
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Add the stats to the state
          _this2.setState({
            "graphs": _this2.processGraphs(res.data.graphs),
            "overall": res.data.overall,
            "practices": res.data.practices
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "one",
    value: function one(ev) {
      var _this3 = this;

      // Get the ID
      var id = ev.currentTarget.value; // If it's -1, do nothing

      if (id == '-1') {
        return;
      } // Show the loader


      Loader.show(); // Fetch the practice data

      Services.read('watl', 'practice/data', {
        "id": id
      }).done(function (res) {
        // If there's an error
        if (res.error && !Utils.serviceError(res.error)) {
          Events.trigger('error', JSON.stringify(res.error));
        } // If there's a warning


        if (res.warning) {
          Events.trigger('warning', JSON.stringify(res.warning));
        } // If there's data


        if (res.data) {
          // Add the stats to the state
          _this3.setState({
            "one": res.data
          });
        }
      }).always(function () {
        // Hide the loader
        Loader.hide();
      });
    }
  }, {
    key: "oneHide",
    value: function oneHide() {
      this.setState({
        "one": false
      });
    }
  }, {
    key: "processGraphs",
    value: function processGraphs(data) {
      // Init the return data
      var ret = {
        "ksLeft": {
          "labels": [],
          "datasets": [{
            "label": "Hits",
            "data": [],
            "fill": false,
            "borderColor": "rgb(0,0,255,0.9)",
            "lineTension": 0.1
          }, {
            "label": "Misses",
            "data": [],
            "fill": false,
            "borderColor": "rgb(100,100,100,0.5)",
            "lineTension": 0.1
          }, {
            "label": "Drops",
            "data": [],
            "fill": false,
            "borderColor": "rgb(200,200,200,0.5)",
            "lineTension": 0.1
          }]
        },
        "ksRight": {
          "labels": [],
          "datasets": [{
            "label": "Hits",
            "data": [],
            "fill": false,
            "borderColor": "rgb(0,0,255,0.9)",
            "lineTension": 0.1
          }, {
            "label": "Misses",
            "data": [],
            "fill": false,
            "borderColor": "rgb(100,100,100,0.5)",
            "lineTension": 0.1
          }, {
            "label": "Drops",
            "data": [],
            "fill": false,
            "borderColor": "rgb(200,200,200,0.5)",
            "lineTension": 0.1
          }]
        },
        "regular": {
          "labels": [],
          "datasets": [{
            "label": "Sixes",
            "data": [],
            "fill": false,
            "borderColor": "rgb(255,0,0,0.9)",
            "lineTension": 0.1
          }, {
            "label": "Fours",
            "data": [],
            "fill": false,
            "borderColor": "rgb(30,30,30,0.9)",
            "lineTension": 0.1
          }, {
            "label": "Threes",
            "data": [],
            "fill": false,
            "borderColor": "rgb(60,60,60,0.9)",
            "lineTension": 0.1
          }, {
            "label": "Twos",
            "data": [],
            "fill": false,
            "borderColor": "rgb(90,90,90,0.9)",
            "lineTension": 0.1
          }, {
            "label": "Ones",
            "data": [],
            "fill": false,
            "borderColor": "rgb(120,120,120,0.9)",
            "lineTension": 0.1
          }, {
            "label": "Zeros",
            "data": [],
            "fill": false,
            "borderColor": "rgb(150,150,150,0.5)",
            "lineTension": 0.1
          }, {
            "label": "Drops",
            "data": [],
            "fill": false,
            "borderColor": "rgb(200,200,200,0.5)",
            "lineTension": 0.1
          }]
        } // Go through each set of stats backwards

      };

      for (var i = data.length - 1; i >= 0; --i) {
        // Add the labels
        var ts = Utils.date(data[i]._created);
        ret.regular.labels.push(ts);
        ret.ksLeft.labels.push(ts);
        ret.ksRight.labels.push(ts); // Calculate the target percentages

        if (data[i].stats.regular.attempts == 0) {
          ret.regular.datasets[0].data.push(0.0);
          ret.regular.datasets[1].data.push(0.0);
          ret.regular.datasets[2].data.push(0.0);
          ret.regular.datasets[3].data.push(0.0);
          ret.regular.datasets[4].data.push(0.0);
          ret.regular.datasets[5].data.push(0.0);
          ret.regular.datasets[6].data.push(0.0);
        } else {
          ret.regular.datasets[0].data.push((data[i].stats.regular.sixes / data[i].stats.regular.attempts * 100.0).toFixed(1));
          ret.regular.datasets[1].data.push((data[i].stats.regular.fours / data[i].stats.regular.attempts * 100.0).toFixed(1));
          ret.regular.datasets[2].data.push((data[i].stats.regular.threes / data[i].stats.regular.attempts * 100.0).toFixed(1));
          ret.regular.datasets[3].data.push((data[i].stats.regular.twos / data[i].stats.regular.attempts * 100.0).toFixed(1));
          ret.regular.datasets[4].data.push((data[i].stats.regular.ones / data[i].stats.regular.attempts * 100.0).toFixed(1));
          ret.regular.datasets[3].data.push((data[i].stats.regular.zeros / data[i].stats.regular.attempts * 100.0).toFixed(1));
          ret.regular.datasets[4].data.push((data[i].stats.regular.drops / data[i].stats.regular.attempts * 100.0).toFixed(1));
        } // Calculate the killshot left percentages


        if (data[i].stats.ksLeft.attempts == 0) {
          ret.ksLeft.datasets[0].data.push(0.0);
          ret.ksLeft.datasets[1].data.push(0.0);
          ret.ksLeft.datasets[2].data.push(0.0);
        } else {
          ret.ksLeft.datasets[0].data.push((data[i].stats.ksLeft.hits / data[i].stats.ksLeft.attempts * 100.0).toFixed(1));
          ret.ksLeft.datasets[1].data.push(((data[i].stats.ksLeft.attempts - (data[i].stats.ksLeft.drops + data[i].stats.ksLeft.hits)) / data[i].stats.ksLeft.attempts * 100.0).toFixed(1));
          ret.ksLeft.datasets[2].data.push((data[i].stats.ksLeft.drops / data[i].stats.ksLeft.attempts * 100.0).toFixed(1));
        } // Calculate the killshot right percentages


        if (data[i].stats.ksRight.attempts == 0) {
          ret.ksRight.datasets[0].data.push(0.0);
          ret.ksRight.datasets[1].data.push(0.0);
          ret.ksRight.datasets[2].data.push(0.0);
        } else {
          ret.ksRight.datasets[0].data.push((data[i].stats.ksRight.hits / data[i].stats.ksRight.attempts * 100.0).toFixed(1));
          ret.ksRight.datasets[1].data.push(((data[i].stats.ksRight.attempts - (data[i].stats.ksRight.drops + data[i].stats.ksRight.hits)) / data[i].stats.ksRight.attempts * 100.0).toFixed(1));
          ret.ksRight.datasets[2].data.push((data[i].stats.ksRight.drops / data[i].stats.ksRight.attempts * 100.0).toFixed(1));
        }
      } // Return the processed data


      return ret;
    }
  }, {
    key: "render",
    value: function render() {
      var overall = this.state.overall; // If there's data

      if (overall) {
        return React.createElement("div", {
          className: "practice"
        }, React.createElement("h2", null, "View Specific Practice"), React.createElement("div", {
          className: "gap large"
        }, React.createElement("p", null, React.createElement("select", {
          onChange: this.one
        }, React.createElement("option", {
          value: "-1"
        }, "Select a Practice"), this.state.practices.map(function (p, i) {
          return React.createElement("option", {
            value: p['_id']
          }, Utils.datetime(p['_created']));
        })))), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, "Regular"), React.createElement("div", null, "Left KS"), React.createElement("div", null, "Right KS")), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, overall.regular.attempts), React.createElement("div", null, overall.ksLeft.attempts), React.createElement("div", null, overall.ksRight.attempts)), React.createElement("div", {
          className: "throws"
        }, React.createElement("div", null, React.createElement(PieRegular, {
          height: "150px",
          data: [overall.regular.sixes, overall.regular.fours, overall.regular.threes, overall.regular.twos, overall.regular.ones, overall.regular.zeros, overall.regular.drops]
        })), React.createElement("div", null, React.createElement(PieKillshot, {
          height: "150px",
          data: [overall.ksLeft.hits, overall.ksLeft.attempts - (overall.ksLeft.hits + overall.ksLeft.drops), overall.ksLeft.drops]
        })), React.createElement("div", null, React.createElement(PieKillshot, {
          height: "150px",
          data: [overall.ksRight.hits, overall.ksRight.attempts - (overall.ksRight.hits + overall.ksRight.drops), overall.ksRight.drops]
        }))), React.createElement("div", {
          className: "title"
        }, "Target"), React.createElement("div", {
          className: "gap small"
        }, React.createElement(Graph, {
          data: this.state.graphs.regular
        })), React.createElement("div", {
          className: "title"
        }, "Left Killshots"), React.createElement("div", {
          className: "gap small"
        }, React.createElement(Graph, {
          data: this.state.graphs.ksLeft
        })), React.createElement("div", {
          className: "title"
        }, "Right Killshots"), React.createElement("div", {
          className: "gap large"
        }, React.createElement(Graph, {
          data: this.state.graphs.ksRight
        })), this.state.one && React.createElement(Modal, {
          title: "Practice Throws",
          close: this.oneHide
        }, React.createElement(Practice, {
          data: this.state.one
        })));
      } else {
        return React.createElement("div", null);
      }
    }
  }, {
    key: "signin",
    value: function signin(thrower) {
      // Set the thrower
      this.setState({
        "thrower": thrower
      }); // Fetch the practice stats

      this.fetch();
    }
  }, {
    key: "signout",
    value: function signout() {
      this.setState({
        "thrower": false
      });
    }
  }]);

  return StatsPractice;
}(React.Component); // Export the component


module.exports = StatsPractice;

/***/ }),

/***/ "./webpack/requests.js":
/*!*****************************!*\
  !*** ./webpack/requests.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Requests
 *
 * Manages match requests
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-31
 */
// Generic
var Events = __webpack_require__(/*! ./generic/events.js */ "./webpack/generic/events.js");

var Hash = __webpack_require__(/*! ./generic/hash.js */ "./webpack/generic/hash.js");

var Loader = __webpack_require__(/*! ./generic/loader.js */ "./webpack/generic/loader.js");

var Services = __webpack_require__(/*! ./generic/services.js */ "./webpack/generic/services.js"); // Site specific


var TwoWay = __webpack_require__(/*! ./twoway.js */ "./webpack/twoway.js");

var Utils = __webpack_require__(/*! ./utils.js */ "./webpack/utils.js"); // Signed in thrower


__thrower = null; // Pending requests

__pending = [];
/**
 * Init
 *
 * Initialises the module by tracking any sign in / sign out events
 *
 * @name _init
 * @return void
 */

function _init() {
  // Get notified of any change in thrower
  Events.add('signin', _signin);
  Events.add('signout', _signout);
}
/**
 * Pending
 *
 * Fetches pending requests
 *
 * @name _pending
 * @return void
 */


function _pending() {
  // Show the loader
  Loader.show(); // Fetch the requests

  Services.read('auth', 'match/requests', {}).done(function (res) {
    // If there's an error
    if (res.error && !Utils.serviceError(res.error)) {
      Events.trigger('error', JSON.stringify(res.error));
    } // If there's a warning


    if (res.warning) {
      Events.trigger('warning', JSON.stringify(res.warning));
    } // If there's data


    if (res.data) {
      _pendingProcess(res.data);
    }
  }).always(function () {
    Loader.hide();
  });
}
/**
 * Pending Process
 *
 * Processes any pending requests that are returned from the server
 *
 * @name _pendingProcess
 * @return void
 */


function _pendingProcess(requests) {
  // Store the pending requests
  __pending = requests; // Go through each in which the thrower is the opponent

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = __pending['opponent'][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var o = _step.value;
      // Add a new message
      Events.trigger('message', o._id, {
        "text": "You have an " + o.org + " match request from " + o.alias + ". Do you want to start this match now?",
        "buttons": [{
          "title": "Decline",
          "callback": _requestDecline
        }, {
          "title": "Accept",
          "callback": _requestAccept
        }]
      });
    } // Go through each in which the thrower is the initiator

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = __pending['initiator'][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var o = _step2.value;
      // Add a new message
      Events.trigger('message', o._id, {
        "text": "You initiated an " + o.org + " match with " + o.alias + ". Do you want to wait for this match to start?",
        "buttons": [{
          "title": "Delete",
          "callback": _requestDelete
        }, {
          "title": "Wait",
          "callback": _requestWait
        }]
      });
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}
/**
 * Request Accept
 *
 * Called when a match request is accepted by the opponent
 *
 * @name _requestAccept
 * @return bool
 */


function _requestAccept(id) {
  // Let the server know the match was accepted
  Services.update('auth', 'match/request', {
    "id": id
  }).done(function (res) {
    // If there's an error
    if (res.error && !Utils.serviceError(res.error)) {
      Events.trigger('error', JSON.stringify(res.error));
    } // If there's a warning


    if (res.warning) {
      Events.trigger('warning', JSON.stringify(res.warning));
    } // If there's data


    if (res.data) {
      // Find the pending match, store it, then remove it from pending
      var req = null;

      for (var i in __pending['opponent']) {
        if (__pending['opponent'][i]._id == id) {
          req = __pending['opponent'][i];

          __pending['opponent'].splice(i, 1);
        }
      }

      Hash.set({
        "page": "match",
        "org": req.org.toLowerCase(),
        "id": "m|" + res.data
      });
    }
  }); // Return true, assume the request was accepted

  return true;
}
/**
 * Request Decline
 *
 * Called when a match request is declined by the opponent
 *
 * @name _requestDecline
 * @return bool
 */


function _requestDecline(id) {
  // Let the server know the match was declined
  Services["delete"]('auth', 'match/request', {
    "id": id
  }).done(function (res) {
    // If there's an error
    if (res.error && !Utils.serviceError(res.error)) {
      Events.trigger('error', JSON.stringify(res.error));
    } // If there's a warning


    if (res.warning) {
      Events.trigger('warning', JSON.stringify(res.warning));
    } // If there's data


    if (res.data) {
      // Delete the request from the pending
      for (var i in __pending['opponent']) {
        if (__pending['opponent'][i]._id == id) {
          __pending['opponent'].splice(i, 1);
        }
      }
    }
  }); // Return true, assume the request was deleted

  return true;
}
/**
 * Request Delete
 *
 * Called when a match request is deleted by the initiator
 *
 * @name _requestDelete
 * @return bool
 */


function _requestDelete(id) {
  // Let the server know we are removing our request
  Services["delete"]('auth', 'match/request', {
    "id": id
  }).done(function (res) {
    // If there's an error
    if (res.error && !Utils.serviceError(res.error)) {
      Events.trigger('error', JSON.stringify(res.error));
    } // If there's a warning


    if (res.warning) {
      Events.trigger('warning', JSON.stringify(res.warning));
    } // If there's data


    if (res.data) {
      // Delete the request from the pending
      for (var i in __pending['initiator']) {
        if (__pending['initiator'][i]._id == id) {
          __pending['initiator'].splice(i, 1);
        }
      }
    }
  }); // Return true, assume the request was deleted

  return true;
}
/**
 * Request New
 *
 * Called when the thrower recieves a new match request
 *
 * @name _requestNew
 * @param object msg
 * @return void
 */


function _requestNew(msg) {
  // If this is a new request
  if (msg.type == 'match_request') {
    // Add it to the pending
    __pending['opponent'].push(msg); // Add a new message


    Events.trigger('message', msg._id, {
      "text": "You have an " + msg.org + " match request from " + msg.alias + ". Do you want to start this match now?",
      "buttons": [{
        "title": "Decline",
        "callback": _requestDecline
      }, {
        "title": "Accept",
        "callback": _requestAccept
      }]
    });
  } // Else if we need to delete
  else if (msg.type == "match_request_delete") {
      // Delete the request from the pending
      for (var i in __pending['opponent']) {
        if (__pending['opponent'][i]._id == msg.id) {
          __pending['opponent'].splice(i, 1);
        }
      } // Remove the message


      Events.trigger('message_remove', msg.id);
    }
}
/**
 * Request Wait
 *
 * Called when the initiator of a match request has chosen to wait for it
 *
 * @name _requestWait
 * @return bool
 */


function _requestWait(id) {
  // Find the pending match, store it, then remove it from pending
  var req = null;

  for (var i in __pending['initiator']) {
    if (__pending['initiator'][i]._id == id) {
      req = __pending['initiator'][i];
    }
  } // Change the page and store the request info


  Hash.set({
    "page": "match",
    "org": req.org.toLowerCase(),
    "id": "r|" + req._id
  }); // Return OK

  return true;
}
/**
 * Signin
 *
 * Called when the user signs in (or was already signed in). Fetches pending
 * requests and starts tracking any new requests
 *
 * @name _signin
 * @return void
 */


function _signin(thrower) {
  // Store the thrower
  __thrower = thrower._id; // Fetch the pending requests

  _pending(); // Track any new requests


  TwoWay.track('auth', 'requests-' + __thrower, _requestNew);
}
/**
 * Signout
 *
 * Called when the user signs out or is signed out. Removes all messages and
 * stops tracking requests
 *
 * @name _signout
 * @return void
 */


function _signout() {
  // Delete all messages
  for (var o in __pending) {
    Events.trigger('message_remove', o._id);
  } // Stop tracking the thrower


  TwoWay.untrack('auth', 'requests-' + __thrower, _requestNew);
} // Export the module


module.exports = {
  "init": _init
};

/***/ }),

/***/ "./webpack/twoway.js":
/*!***************************!*\
  !*** ./webpack/twoway.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Two Way
 *
 * Allows clients to connect to the backend via websocket so events can be
 * tracked in real time
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-29
 */
// Generic modules
var Events = __webpack_require__(/*! ./generic/events.js */ "./webpack/generic/events.js");

var Services = __webpack_require__(/*! ./generic/services.js */ "./webpack/generic/services.js");

var Tools = __webpack_require__(/*! ./generic/tools.js */ "./webpack/generic/tools.js");

var WSHelper = __webpack_require__(/*! ./generic/websocket.js */ "./webpack/generic/websocket.js"); // The ping timer


var __ping = null; // The valid close flag

var __close = false; // The websocket

var __socket = null;
/**
 * The service callbacks
 *
 * will contain a string for the service / key with callbacks for those keys,
 * e.g. {
 *	"service1": {
 *		"key1": [function1, function2],
 *		"key2": [function3]
 *	},
 *	"service2": {
 *		"key3": [function4]
 *	}
 * }
 */

var __services = {};
/**
 * Add Track
 *
 * Adds tracking for a specific service key
 *
 * @name _addTrack
 * @param string service
 * @param string key
 * @param function callback
 * @return void
 */

function _addTrack(service, key, callback) {
  // If we don't have the service, add it
  if (!(service in __services)) {
    __services[service] = {};
  } // If we don't have the key for the given service, add the list with
  //	the callback


  if (!(key in __services[service])) {
    __services[service][key] = [callback];
  } // Else, add the callback, to the given service/key
  else {
      __services[service][key].push(callback);
    }
}
/**
 * Handle Close
 *
 * Checks if it's a legitimate closed socket, or if we need to reconnect to
 * everything
 *
 * @name _handleClose
 * @return void
 */


function _handleClose() {
  // If it's a valid close
  if (__close) {
    __socket = null;
  } // Else, wait 5 seconds, and reopen the socket
  else {
      setTimeout(_openSocket, 5000);
    }
}
/**
 * Handle Messages
 *
 * Recieves messages from websockets and directs the data to the appropriate
 * callback
 *
 * @name _handleMessage
 * @param WebSocket sock		The socket the message came on
 * @param MessageEvent ev		The event message received
 * @return void
 */


function _handleMessage(sock, ev) {
  // If it's pong
  if (ev.data == 'pong') {
    return;
  } // Screw you javascript


  var r = new FileReader();
  r.addEventListener("loadend", function () {
    // Parse the data
    oMsg = JSON.parse(r.result); // If we have the service

    if (oMsg.service in __services) {
      // If we have the key
      if (oMsg.key in __services[oMsg.service]) {
        // Call each callback
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = __services[oMsg.service][oMsg.key][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var f = _step.value;
            f(oMsg.data);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  });
  r.readAsText(ev.data);
}
/**
 * Open Socket
 *
 * Opens a new websocket by first sending a message to webpoll to start the
 * authentication handshake, then making the connection, and finally sending
 * all the track messages stored
 *
 * @name _openSocket
 * @param
 * @return void
 */


function _openSocket() {
  // Notify the backend of a new ws connection
  Services.read('webpoll', 'websocket', {}).done(function (res) {
    // Create the websocket
    __socket = WSHelper('wss://' + window.location.hostname + '/ws', {
      "open": function open(sock) {
        // Reset the close flag
        __close = false; // Init the message list

        lMsgs = []; // Add the connect message

        lMsgs.push({
          "_type": "connect",
          "key": res.data
        }); // Add each track message

        for (var s in __services) {
          for (var k in __services[s]) {
            lMsgs.push({
              "_type": "track",
              "service": s,
              "key": k
            });
          }
        } // Send the messages


        sock.send(JSON.stringify(lMsgs));
      },
      "message": _handleMessage,
      "close": _handleClose
    }); // If we got false

    if (__socket == false) {
      Events.trigger('error', 'Websockets not supported');
      return;
    } // If we haven't already setup the ping interval


    if (__ping == null) {
      __ping = setInterval(_ping, 300000);
    }
  });
}
/**
 * Ping
 *
 * Send a ping to keep the socket alive
 *
 * @name _ping
 * @return void
 */


function _ping() {
  // Send a ping message over the socket to keep it alive
  __socket.send(JSON.stringify({
    "_type": "ping"
  }));
}
/**
 * Track
 *
 * Takes a URL and an event type and a) opens a new websocket or uses an
 * existing one, then b) sends a tracking message through the websocket so the
 * backend knowsn to send the key type to us
 *
 * @name _track
 * @param string service		The name of the service the key is associated with
 * @param string key			The key to track
 * @param function callback		The callback for any messages of the key value
 * @return void
 */


function _track(service, key, callback) {
  // Add the tracking callback
  _addTrack(service, key, callback); // If we have no socket


  if (!__socket) {
    // If it's null
    if (__socket == null) {
      // Set socket to false so we don't try to re-open
      __socket = false; // Open a new one

      _openSocket();
    }
  } // Else if it's open
  else if (__socket.readyState == 1) {
      // Send the tracking message through the websocket
      __socket.send(JSON.stringify({
        "_type": "track",
        "service": service,
        "key": key
      }));
    } // If we have no socket, or it's opening, then upon opening all servives/
  //	keys in the tracking list will be sent as messages

}
/**
 * Untrack
 *
 * Removes a callback and notifies the websocket we are not tracking anymore
 *
 * @name _untrack
 * @param string service		The name of the service the key is associated with
 * @param string key			The key to untrack
 * @param function callback		The callback associated with the track
 * @return bool
 */


function _untrack(service, key, callback) {
  // If we have the service
  if (service in __services) {
    // If we have the key
    if (key in __services[service]) {
      // Go through each callback
      for (var i = 0; i < __services[service][key].length; ++i) {
        // If the callback matches
        if (callback == __services[service][key][i]) {
          // Remove the callback
          __services[service][key].splice(i, 1); // If we have no more callbacks


          if (__services[service][key].length == 0) {
            // Notify the websocket we aren't tracking the key
            //	anymore
            __socket.send(JSON.stringify({
              "_type": "untrack",
              "service": service,
              "key": key
            })); // Remove the key


            delete __services[service][key]; // If we have no more keys in the service

            if (Tools.empty(__services[service])) {
              // Remove the service
              delete __services[service]; // If there's no more services

              if (Tools.empty(__services)) {
                // Turn off the ping interval
                clearInterval(__ping);
                __ping = null; // Close the socket

                __close = true;

                __socket.close(1000, 'nothing else to track');
              }
            }
          } // Callback found and removed


          return true;
        }
      }
    }
  } // Callback not found


  return false;
} // export the module


module.exports = {
  "track": _track,
  "untrack": _untrack
};

/***/ }),

/***/ "./webpack/utils.js":
/*!**************************!*\
  !*** ./webpack/utils.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Utils
 *
 * Shared utilities
 *
 * @author Chris Nasr
 * @copyright OuroborosCoding
 * @created 2019-03-24
 */
// Generic modules
var Events = __webpack_require__(/*! ./generic/events.js */ "./webpack/generic/events.js");
/**
 * Utils
 */


var Utils = {
  date: function date(ts) {
    var d = new Date(ts * 1000);
    var Y = '' + d.getFullYear();
    var M = '' + (d.getMonth() + 1);
    if (M.length == 1) M = '0' + M;
    var D = '' + d.getDate();
    if (D.length == 1) D = '0' + D;
    return Y + '/' + M + '/' + D;
  },
  datetime: function datetime(ts) {
    var d = new Date(ts * 1000);
    var t = ['', '', ''];
    t[0] += d.getHours();
    if (t[0].length == 1) t[0] = '0' + t[0];
    t[1] += d.getMinutes();
    if (t[1].length == 1) t[1] = '0' + t[1];
    t[2] += d.getSeconds();
    if (t[2].length == 1) t[2] = '0' + t[2];
    return Utils.date(ts) + ' ' + t.join(':');
  },
  errorTree: function errorTree(errors) {
    // Init the return
    var oRet = {}; // Go through each error

    for (var i = 0; i < errors.length; ++i) {
      // If the error field has a period
      if (errors[i][0].includes('.')) {
        // Split it
        lField = errors[i][0].split(/\.(.*)/); // If we don't have the field already

        if (!oRet[lField[0]]) {
          oRet[lField[0]] = [];
        } // Add the rest


        oRet[lField[0]].push([lField[1], errors[i][1]]);
      } // Else it's a flat field
      else {
          oRet[errors[i][0]] = errors[i][1];
        }
    } // Go through all the errors we found


    for (var k in oRet) {
      // If we find an array
      if (Array.isArray(oRet[k])) {
        // Recurse
        oRet[k] = Utils.errorTree(oRet[k]);
      }
    } // Return the Tree


    return oRet;
  },
  serviceError: function serviceError(err) {
    // What error is it?
    switch (err.code) {
      // No Session
      case 102:
        // Trigger signout
        Events.trigger("signout"); // Nothing else to do

        return true;
      // Invalid fields

      case 1001:
        // Rebuild the error message
        err.msg = Utils.errorTree(err.msg); // But allow the child to deal with the messages themselves

        return false;
    } // Failed to process error


    return false;
  } // Export the module

};
module.exports = Utils;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,